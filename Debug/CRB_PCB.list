
CRB_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d378  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  0800d438  0800d438  0000e438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db3c  0800db3c  0000f21c  2**0
                  CONTENTS
  4 .ARM          00000000  0800db3c  0800db3c  0000f21c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db3c  0800db3c  0000f21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db3c  0800db3c  0000eb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db40  0800db40  0000eb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800db44  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  2000021c  0800dd60  0000f21c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  0800dd60  0000f7d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012492  00000000  00000000  0000f244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e73  00000000  00000000  000216d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00024550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c25  00000000  00000000  000254f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c177  00000000  00000000  00026115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c33  00000000  00000000  0004228c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d686  00000000  00000000  00055ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3545  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  000f3588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000f830c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000021c 	.word	0x2000021c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d420 	.word	0x0800d420

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000220 	.word	0x20000220
 8000104:	0800d420 	.word	0x0800d420

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fd2b 	bl	8001eac <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fc6b 	bl	8001d3c <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd1d 	bl	8001eac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd13 	bl	8001eac <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc95 	bl	8001dc4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fc8b 	bl	8001dc4 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fbc3 	bl	8000c50 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fb43 	bl	8000b60 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb5 	bl	8000c50 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fbab 	bl	8000c50 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb51 	bl	8000bb0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fb47 	bl	8000bb0 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_d2uiz>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2200      	movs	r2, #0
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <__aeabi_d2uiz+0x38>)
 8000536:	0004      	movs	r4, r0
 8000538:	000d      	movs	r5, r1
 800053a:	f7ff ffb5 	bl	80004a8 <__aeabi_dcmpge>
 800053e:	2800      	cmp	r0, #0
 8000540:	d104      	bne.n	800054c <__aeabi_d2uiz+0x1c>
 8000542:	0020      	movs	r0, r4
 8000544:	0029      	movs	r1, r5
 8000546:	f002 fb87 	bl	8002c58 <__aeabi_d2iz>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <__aeabi_d2uiz+0x38>)
 800054e:	2200      	movs	r2, #0
 8000550:	0020      	movs	r0, r4
 8000552:	0029      	movs	r1, r5
 8000554:	f001 ffe4 	bl	8002520 <__aeabi_dsub>
 8000558:	f002 fb7e 	bl	8002c58 <__aeabi_d2iz>
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	061b      	lsls	r3, r3, #24
 8000560:	469c      	mov	ip, r3
 8000562:	4460      	add	r0, ip
 8000564:	e7f1      	b.n	800054a <__aeabi_d2uiz+0x1a>
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	41e00000 	.word	0x41e00000

0800056c <__aeabi_d2lz>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	0004      	movs	r4, r0
 8000574:	000d      	movs	r5, r1
 8000576:	f7ff ff79 	bl	800046c <__aeabi_dcmplt>
 800057a:	2800      	cmp	r0, #0
 800057c:	d108      	bne.n	8000590 <__aeabi_d2lz+0x24>
 800057e:	0020      	movs	r0, r4
 8000580:	0029      	movs	r1, r5
 8000582:	f000 f80f 	bl	80005a4 <__aeabi_d2ulz>
 8000586:	0002      	movs	r2, r0
 8000588:	000b      	movs	r3, r1
 800058a:	0010      	movs	r0, r2
 800058c:	0019      	movs	r1, r3
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	061b      	lsls	r3, r3, #24
 8000594:	18e9      	adds	r1, r5, r3
 8000596:	0020      	movs	r0, r4
 8000598:	f000 f804 	bl	80005a4 <__aeabi_d2ulz>
 800059c:	2300      	movs	r3, #0
 800059e:	4242      	negs	r2, r0
 80005a0:	418b      	sbcs	r3, r1
 80005a2:	e7f2      	b.n	800058a <__aeabi_d2lz+0x1e>

080005a4 <__aeabi_d2ulz>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	2200      	movs	r2, #0
 80005a8:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <__aeabi_d2ulz+0x34>)
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	f001 fcef 	bl	8001f90 <__aeabi_dmul>
 80005b2:	f7ff ffbd 	bl	8000530 <__aeabi_d2uiz>
 80005b6:	0006      	movs	r6, r0
 80005b8:	f002 fbb8 	bl	8002d2c <__aeabi_ui2d>
 80005bc:	2200      	movs	r2, #0
 80005be:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <__aeabi_d2ulz+0x38>)
 80005c0:	f001 fce6 	bl	8001f90 <__aeabi_dmul>
 80005c4:	0002      	movs	r2, r0
 80005c6:	000b      	movs	r3, r1
 80005c8:	0020      	movs	r0, r4
 80005ca:	0029      	movs	r1, r5
 80005cc:	f001 ffa8 	bl	8002520 <__aeabi_dsub>
 80005d0:	f7ff ffae 	bl	8000530 <__aeabi_d2uiz>
 80005d4:	0031      	movs	r1, r6
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
 80005d8:	3df00000 	.word	0x3df00000
 80005dc:	41f00000 	.word	0x41f00000

080005e0 <__aeabi_l2d>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	0006      	movs	r6, r0
 80005e4:	0008      	movs	r0, r1
 80005e6:	f002 fb73 	bl	8002cd0 <__aeabi_i2d>
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <__aeabi_l2d+0x28>)
 80005ee:	f001 fccf 	bl	8001f90 <__aeabi_dmul>
 80005f2:	000d      	movs	r5, r1
 80005f4:	0004      	movs	r4, r0
 80005f6:	0030      	movs	r0, r6
 80005f8:	f002 fb98 	bl	8002d2c <__aeabi_ui2d>
 80005fc:	002b      	movs	r3, r5
 80005fe:	0022      	movs	r2, r4
 8000600:	f000 fd1e 	bl	8001040 <__aeabi_dadd>
 8000604:	bd70      	pop	{r4, r5, r6, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	41f00000 	.word	0x41f00000

0800060c <__aeabi_fadd>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	46ce      	mov	lr, r9
 8000610:	4647      	mov	r7, r8
 8000612:	0243      	lsls	r3, r0, #9
 8000614:	0a5a      	lsrs	r2, r3, #9
 8000616:	024e      	lsls	r6, r1, #9
 8000618:	0045      	lsls	r5, r0, #1
 800061a:	0fc4      	lsrs	r4, r0, #31
 800061c:	0048      	lsls	r0, r1, #1
 800061e:	4691      	mov	r9, r2
 8000620:	0e2d      	lsrs	r5, r5, #24
 8000622:	0a72      	lsrs	r2, r6, #9
 8000624:	0e00      	lsrs	r0, r0, #24
 8000626:	4694      	mov	ip, r2
 8000628:	b580      	push	{r7, lr}
 800062a:	099b      	lsrs	r3, r3, #6
 800062c:	0fc9      	lsrs	r1, r1, #31
 800062e:	09b6      	lsrs	r6, r6, #6
 8000630:	1a2a      	subs	r2, r5, r0
 8000632:	428c      	cmp	r4, r1
 8000634:	d021      	beq.n	800067a <__aeabi_fadd+0x6e>
 8000636:	2a00      	cmp	r2, #0
 8000638:	dd0d      	ble.n	8000656 <__aeabi_fadd+0x4a>
 800063a:	2800      	cmp	r0, #0
 800063c:	d12d      	bne.n	800069a <__aeabi_fadd+0x8e>
 800063e:	2e00      	cmp	r6, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x38>
 8000642:	e08d      	b.n	8000760 <__aeabi_fadd+0x154>
 8000644:	1e51      	subs	r1, r2, #1
 8000646:	2a01      	cmp	r2, #1
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x40>
 800064a:	e11d      	b.n	8000888 <__aeabi_fadd+0x27c>
 800064c:	2aff      	cmp	r2, #255	@ 0xff
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0x46>
 8000650:	e0ab      	b.n	80007aa <__aeabi_fadd+0x19e>
 8000652:	000a      	movs	r2, r1
 8000654:	e027      	b.n	80006a6 <__aeabi_fadd+0x9a>
 8000656:	2a00      	cmp	r2, #0
 8000658:	d04d      	beq.n	80006f6 <__aeabi_fadd+0xea>
 800065a:	1b42      	subs	r2, r0, r5
 800065c:	2d00      	cmp	r5, #0
 800065e:	d000      	beq.n	8000662 <__aeabi_fadd+0x56>
 8000660:	e0cc      	b.n	80007fc <__aeabi_fadd+0x1f0>
 8000662:	2b00      	cmp	r3, #0
 8000664:	d100      	bne.n	8000668 <__aeabi_fadd+0x5c>
 8000666:	e079      	b.n	800075c <__aeabi_fadd+0x150>
 8000668:	1e54      	subs	r4, r2, #1
 800066a:	2a01      	cmp	r2, #1
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x64>
 800066e:	e128      	b.n	80008c2 <__aeabi_fadd+0x2b6>
 8000670:	2aff      	cmp	r2, #255	@ 0xff
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x6a>
 8000674:	e097      	b.n	80007a6 <__aeabi_fadd+0x19a>
 8000676:	0022      	movs	r2, r4
 8000678:	e0c5      	b.n	8000806 <__aeabi_fadd+0x1fa>
 800067a:	2a00      	cmp	r2, #0
 800067c:	dc00      	bgt.n	8000680 <__aeabi_fadd+0x74>
 800067e:	e096      	b.n	80007ae <__aeabi_fadd+0x1a2>
 8000680:	2800      	cmp	r0, #0
 8000682:	d04f      	beq.n	8000724 <__aeabi_fadd+0x118>
 8000684:	2dff      	cmp	r5, #255	@ 0xff
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x7e>
 8000688:	e08f      	b.n	80007aa <__aeabi_fadd+0x19e>
 800068a:	2180      	movs	r1, #128	@ 0x80
 800068c:	04c9      	lsls	r1, r1, #19
 800068e:	430e      	orrs	r6, r1
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dd51      	ble.n	8000738 <__aeabi_fadd+0x12c>
 8000694:	002a      	movs	r2, r5
 8000696:	3301      	adds	r3, #1
 8000698:	e018      	b.n	80006cc <__aeabi_fadd+0xc0>
 800069a:	2dff      	cmp	r5, #255	@ 0xff
 800069c:	d100      	bne.n	80006a0 <__aeabi_fadd+0x94>
 800069e:	e084      	b.n	80007aa <__aeabi_fadd+0x19e>
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	04c9      	lsls	r1, r1, #19
 80006a4:	430e      	orrs	r6, r1
 80006a6:	2101      	movs	r1, #1
 80006a8:	2a1b      	cmp	r2, #27
 80006aa:	dc08      	bgt.n	80006be <__aeabi_fadd+0xb2>
 80006ac:	0031      	movs	r1, r6
 80006ae:	2020      	movs	r0, #32
 80006b0:	40d1      	lsrs	r1, r2
 80006b2:	1a82      	subs	r2, r0, r2
 80006b4:	4096      	lsls	r6, r2
 80006b6:	0032      	movs	r2, r6
 80006b8:	1e50      	subs	r0, r2, #1
 80006ba:	4182      	sbcs	r2, r0
 80006bc:	4311      	orrs	r1, r2
 80006be:	1a5b      	subs	r3, r3, r1
 80006c0:	015a      	lsls	r2, r3, #5
 80006c2:	d459      	bmi.n	8000778 <__aeabi_fadd+0x16c>
 80006c4:	2107      	movs	r1, #7
 80006c6:	002a      	movs	r2, r5
 80006c8:	4019      	ands	r1, r3
 80006ca:	d049      	beq.n	8000760 <__aeabi_fadd+0x154>
 80006cc:	210f      	movs	r1, #15
 80006ce:	4019      	ands	r1, r3
 80006d0:	2904      	cmp	r1, #4
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fadd+0xca>
 80006d4:	3304      	adds	r3, #4
 80006d6:	0159      	lsls	r1, r3, #5
 80006d8:	d542      	bpl.n	8000760 <__aeabi_fadd+0x154>
 80006da:	1c50      	adds	r0, r2, #1
 80006dc:	2afe      	cmp	r2, #254	@ 0xfe
 80006de:	d03a      	beq.n	8000756 <__aeabi_fadd+0x14a>
 80006e0:	019b      	lsls	r3, r3, #6
 80006e2:	b2c0      	uxtb	r0, r0
 80006e4:	0a5b      	lsrs	r3, r3, #9
 80006e6:	05c0      	lsls	r0, r0, #23
 80006e8:	4318      	orrs	r0, r3
 80006ea:	07e4      	lsls	r4, r4, #31
 80006ec:	4320      	orrs	r0, r4
 80006ee:	bcc0      	pop	{r6, r7}
 80006f0:	46b9      	mov	r9, r7
 80006f2:	46b0      	mov	r8, r6
 80006f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006f6:	20fe      	movs	r0, #254	@ 0xfe
 80006f8:	4680      	mov	r8, r0
 80006fa:	1c6f      	adds	r7, r5, #1
 80006fc:	0038      	movs	r0, r7
 80006fe:	4647      	mov	r7, r8
 8000700:	4207      	tst	r7, r0
 8000702:	d000      	beq.n	8000706 <__aeabi_fadd+0xfa>
 8000704:	e08e      	b.n	8000824 <__aeabi_fadd+0x218>
 8000706:	2d00      	cmp	r5, #0
 8000708:	d000      	beq.n	800070c <__aeabi_fadd+0x100>
 800070a:	e0b4      	b.n	8000876 <__aeabi_fadd+0x26a>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x106>
 8000710:	e0db      	b.n	80008ca <__aeabi_fadd+0x2be>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d06c      	beq.n	80007f0 <__aeabi_fadd+0x1e4>
 8000716:	1b98      	subs	r0, r3, r6
 8000718:	0145      	lsls	r5, r0, #5
 800071a:	d400      	bmi.n	800071e <__aeabi_fadd+0x112>
 800071c:	e0f7      	b.n	800090e <__aeabi_fadd+0x302>
 800071e:	000c      	movs	r4, r1
 8000720:	1af3      	subs	r3, r6, r3
 8000722:	e03d      	b.n	80007a0 <__aeabi_fadd+0x194>
 8000724:	2e00      	cmp	r6, #0
 8000726:	d01b      	beq.n	8000760 <__aeabi_fadd+0x154>
 8000728:	1e51      	subs	r1, r2, #1
 800072a:	2a01      	cmp	r2, #1
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x124>
 800072e:	e082      	b.n	8000836 <__aeabi_fadd+0x22a>
 8000730:	2aff      	cmp	r2, #255	@ 0xff
 8000732:	d03a      	beq.n	80007aa <__aeabi_fadd+0x19e>
 8000734:	000a      	movs	r2, r1
 8000736:	e7ab      	b.n	8000690 <__aeabi_fadd+0x84>
 8000738:	0031      	movs	r1, r6
 800073a:	2020      	movs	r0, #32
 800073c:	40d1      	lsrs	r1, r2
 800073e:	1a82      	subs	r2, r0, r2
 8000740:	4096      	lsls	r6, r2
 8000742:	0032      	movs	r2, r6
 8000744:	1e50      	subs	r0, r2, #1
 8000746:	4182      	sbcs	r2, r0
 8000748:	430a      	orrs	r2, r1
 800074a:	189b      	adds	r3, r3, r2
 800074c:	015a      	lsls	r2, r3, #5
 800074e:	d5b9      	bpl.n	80006c4 <__aeabi_fadd+0xb8>
 8000750:	1c6a      	adds	r2, r5, #1
 8000752:	2dfe      	cmp	r5, #254	@ 0xfe
 8000754:	d175      	bne.n	8000842 <__aeabi_fadd+0x236>
 8000756:	20ff      	movs	r0, #255	@ 0xff
 8000758:	2300      	movs	r3, #0
 800075a:	e7c4      	b.n	80006e6 <__aeabi_fadd+0xda>
 800075c:	000c      	movs	r4, r1
 800075e:	0033      	movs	r3, r6
 8000760:	08db      	lsrs	r3, r3, #3
 8000762:	2aff      	cmp	r2, #255	@ 0xff
 8000764:	d146      	bne.n	80007f4 <__aeabi_fadd+0x1e8>
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f5      	beq.n	8000756 <__aeabi_fadd+0x14a>
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	03d2      	lsls	r2, r2, #15
 800076e:	4313      	orrs	r3, r2
 8000770:	025b      	lsls	r3, r3, #9
 8000772:	20ff      	movs	r0, #255	@ 0xff
 8000774:	0a5b      	lsrs	r3, r3, #9
 8000776:	e7b6      	b.n	80006e6 <__aeabi_fadd+0xda>
 8000778:	019f      	lsls	r7, r3, #6
 800077a:	09bf      	lsrs	r7, r7, #6
 800077c:	0038      	movs	r0, r7
 800077e:	f002 fbc5 	bl	8002f0c <__clzsi2>
 8000782:	3805      	subs	r0, #5
 8000784:	4087      	lsls	r7, r0
 8000786:	4285      	cmp	r5, r0
 8000788:	dc24      	bgt.n	80007d4 <__aeabi_fadd+0x1c8>
 800078a:	003b      	movs	r3, r7
 800078c:	2120      	movs	r1, #32
 800078e:	1b42      	subs	r2, r0, r5
 8000790:	3201      	adds	r2, #1
 8000792:	40d3      	lsrs	r3, r2
 8000794:	1a8a      	subs	r2, r1, r2
 8000796:	4097      	lsls	r7, r2
 8000798:	1e7a      	subs	r2, r7, #1
 800079a:	4197      	sbcs	r7, r2
 800079c:	2200      	movs	r2, #0
 800079e:	433b      	orrs	r3, r7
 80007a0:	0759      	lsls	r1, r3, #29
 80007a2:	d193      	bne.n	80006cc <__aeabi_fadd+0xc0>
 80007a4:	e797      	b.n	80006d6 <__aeabi_fadd+0xca>
 80007a6:	000c      	movs	r4, r1
 80007a8:	0033      	movs	r3, r6
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	e7db      	b.n	8000766 <__aeabi_fadd+0x15a>
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	d014      	beq.n	80007dc <__aeabi_fadd+0x1d0>
 80007b2:	1b42      	subs	r2, r0, r5
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d14b      	bne.n	8000850 <__aeabi_fadd+0x244>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0d0      	beq.n	800075e <__aeabi_fadd+0x152>
 80007bc:	1e51      	subs	r1, r2, #1
 80007be:	2a01      	cmp	r2, #1
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x1b8>
 80007c2:	e09e      	b.n	8000902 <__aeabi_fadd+0x2f6>
 80007c4:	2aff      	cmp	r2, #255	@ 0xff
 80007c6:	d0ef      	beq.n	80007a8 <__aeabi_fadd+0x19c>
 80007c8:	000a      	movs	r2, r1
 80007ca:	2a1b      	cmp	r2, #27
 80007cc:	dd5f      	ble.n	800088e <__aeabi_fadd+0x282>
 80007ce:	0002      	movs	r2, r0
 80007d0:	1c73      	adds	r3, r6, #1
 80007d2:	e77b      	b.n	80006cc <__aeabi_fadd+0xc0>
 80007d4:	4b50      	ldr	r3, [pc, #320]	@ (8000918 <__aeabi_fadd+0x30c>)
 80007d6:	1a2a      	subs	r2, r5, r0
 80007d8:	403b      	ands	r3, r7
 80007da:	e7e1      	b.n	80007a0 <__aeabi_fadd+0x194>
 80007dc:	21fe      	movs	r1, #254	@ 0xfe
 80007de:	1c6a      	adds	r2, r5, #1
 80007e0:	4211      	tst	r1, r2
 80007e2:	d13b      	bne.n	800085c <__aeabi_fadd+0x250>
 80007e4:	2d00      	cmp	r5, #0
 80007e6:	d15d      	bne.n	80008a4 <__aeabi_fadd+0x298>
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d07f      	beq.n	80008ec <__aeabi_fadd+0x2e0>
 80007ec:	2e00      	cmp	r6, #0
 80007ee:	d17f      	bne.n	80008f0 <__aeabi_fadd+0x2e4>
 80007f0:	2200      	movs	r2, #0
 80007f2:	08db      	lsrs	r3, r3, #3
 80007f4:	025b      	lsls	r3, r3, #9
 80007f6:	0a5b      	lsrs	r3, r3, #9
 80007f8:	b2d0      	uxtb	r0, r2
 80007fa:	e774      	b.n	80006e6 <__aeabi_fadd+0xda>
 80007fc:	28ff      	cmp	r0, #255	@ 0xff
 80007fe:	d0d2      	beq.n	80007a6 <__aeabi_fadd+0x19a>
 8000800:	2480      	movs	r4, #128	@ 0x80
 8000802:	04e4      	lsls	r4, r4, #19
 8000804:	4323      	orrs	r3, r4
 8000806:	2401      	movs	r4, #1
 8000808:	2a1b      	cmp	r2, #27
 800080a:	dc07      	bgt.n	800081c <__aeabi_fadd+0x210>
 800080c:	001c      	movs	r4, r3
 800080e:	2520      	movs	r5, #32
 8000810:	40d4      	lsrs	r4, r2
 8000812:	1aaa      	subs	r2, r5, r2
 8000814:	4093      	lsls	r3, r2
 8000816:	1e5a      	subs	r2, r3, #1
 8000818:	4193      	sbcs	r3, r2
 800081a:	431c      	orrs	r4, r3
 800081c:	1b33      	subs	r3, r6, r4
 800081e:	0005      	movs	r5, r0
 8000820:	000c      	movs	r4, r1
 8000822:	e74d      	b.n	80006c0 <__aeabi_fadd+0xb4>
 8000824:	1b9f      	subs	r7, r3, r6
 8000826:	017a      	lsls	r2, r7, #5
 8000828:	d422      	bmi.n	8000870 <__aeabi_fadd+0x264>
 800082a:	2f00      	cmp	r7, #0
 800082c:	d1a6      	bne.n	800077c <__aeabi_fadd+0x170>
 800082e:	2400      	movs	r4, #0
 8000830:	2000      	movs	r0, #0
 8000832:	2300      	movs	r3, #0
 8000834:	e757      	b.n	80006e6 <__aeabi_fadd+0xda>
 8000836:	199b      	adds	r3, r3, r6
 8000838:	2501      	movs	r5, #1
 800083a:	3201      	adds	r2, #1
 800083c:	0159      	lsls	r1, r3, #5
 800083e:	d400      	bmi.n	8000842 <__aeabi_fadd+0x236>
 8000840:	e740      	b.n	80006c4 <__aeabi_fadd+0xb8>
 8000842:	2101      	movs	r1, #1
 8000844:	4835      	ldr	r0, [pc, #212]	@ (800091c <__aeabi_fadd+0x310>)
 8000846:	4019      	ands	r1, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	4003      	ands	r3, r0
 800084c:	430b      	orrs	r3, r1
 800084e:	e7a7      	b.n	80007a0 <__aeabi_fadd+0x194>
 8000850:	28ff      	cmp	r0, #255	@ 0xff
 8000852:	d0a9      	beq.n	80007a8 <__aeabi_fadd+0x19c>
 8000854:	2180      	movs	r1, #128	@ 0x80
 8000856:	04c9      	lsls	r1, r1, #19
 8000858:	430b      	orrs	r3, r1
 800085a:	e7b6      	b.n	80007ca <__aeabi_fadd+0x1be>
 800085c:	2aff      	cmp	r2, #255	@ 0xff
 800085e:	d100      	bne.n	8000862 <__aeabi_fadd+0x256>
 8000860:	e779      	b.n	8000756 <__aeabi_fadd+0x14a>
 8000862:	199b      	adds	r3, r3, r6
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	0759      	lsls	r1, r3, #29
 8000868:	d000      	beq.n	800086c <__aeabi_fadd+0x260>
 800086a:	e72f      	b.n	80006cc <__aeabi_fadd+0xc0>
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	e7c1      	b.n	80007f4 <__aeabi_fadd+0x1e8>
 8000870:	000c      	movs	r4, r1
 8000872:	1af7      	subs	r7, r6, r3
 8000874:	e782      	b.n	800077c <__aeabi_fadd+0x170>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d12c      	bne.n	80008d4 <__aeabi_fadd+0x2c8>
 800087a:	2e00      	cmp	r6, #0
 800087c:	d193      	bne.n	80007a6 <__aeabi_fadd+0x19a>
 800087e:	2380      	movs	r3, #128	@ 0x80
 8000880:	2400      	movs	r4, #0
 8000882:	20ff      	movs	r0, #255	@ 0xff
 8000884:	03db      	lsls	r3, r3, #15
 8000886:	e72e      	b.n	80006e6 <__aeabi_fadd+0xda>
 8000888:	2501      	movs	r5, #1
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	e718      	b.n	80006c0 <__aeabi_fadd+0xb4>
 800088e:	0019      	movs	r1, r3
 8000890:	2520      	movs	r5, #32
 8000892:	40d1      	lsrs	r1, r2
 8000894:	1aaa      	subs	r2, r5, r2
 8000896:	4093      	lsls	r3, r2
 8000898:	1e5a      	subs	r2, r3, #1
 800089a:	4193      	sbcs	r3, r2
 800089c:	430b      	orrs	r3, r1
 800089e:	0005      	movs	r5, r0
 80008a0:	199b      	adds	r3, r3, r6
 80008a2:	e753      	b.n	800074c <__aeabi_fadd+0x140>
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d100      	bne.n	80008aa <__aeabi_fadd+0x29e>
 80008a8:	e77e      	b.n	80007a8 <__aeabi_fadd+0x19c>
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_fadd+0x2a4>
 80008ae:	e77c      	b.n	80007aa <__aeabi_fadd+0x19e>
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	03d2      	lsls	r2, r2, #15
 80008b4:	4591      	cmp	r9, r2
 80008b6:	d302      	bcc.n	80008be <__aeabi_fadd+0x2b2>
 80008b8:	4594      	cmp	ip, r2
 80008ba:	d200      	bcs.n	80008be <__aeabi_fadd+0x2b2>
 80008bc:	0033      	movs	r3, r6
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	e753      	b.n	800076a <__aeabi_fadd+0x15e>
 80008c2:	000c      	movs	r4, r1
 80008c4:	1af3      	subs	r3, r6, r3
 80008c6:	3501      	adds	r5, #1
 80008c8:	e6fa      	b.n	80006c0 <__aeabi_fadd+0xb4>
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d0af      	beq.n	800082e <__aeabi_fadd+0x222>
 80008ce:	000c      	movs	r4, r1
 80008d0:	0033      	movs	r3, r6
 80008d2:	e78d      	b.n	80007f0 <__aeabi_fadd+0x1e4>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d100      	bne.n	80008da <__aeabi_fadd+0x2ce>
 80008d8:	e767      	b.n	80007aa <__aeabi_fadd+0x19e>
 80008da:	2280      	movs	r2, #128	@ 0x80
 80008dc:	03d2      	lsls	r2, r2, #15
 80008de:	4591      	cmp	r9, r2
 80008e0:	d3ed      	bcc.n	80008be <__aeabi_fadd+0x2b2>
 80008e2:	4594      	cmp	ip, r2
 80008e4:	d2eb      	bcs.n	80008be <__aeabi_fadd+0x2b2>
 80008e6:	000c      	movs	r4, r1
 80008e8:	0033      	movs	r3, r6
 80008ea:	e7e8      	b.n	80008be <__aeabi_fadd+0x2b2>
 80008ec:	0033      	movs	r3, r6
 80008ee:	e77f      	b.n	80007f0 <__aeabi_fadd+0x1e4>
 80008f0:	199b      	adds	r3, r3, r6
 80008f2:	2200      	movs	r2, #0
 80008f4:	0159      	lsls	r1, r3, #5
 80008f6:	d5b9      	bpl.n	800086c <__aeabi_fadd+0x260>
 80008f8:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <__aeabi_fadd+0x30c>)
 80008fa:	4013      	ands	r3, r2
 80008fc:	08db      	lsrs	r3, r3, #3
 80008fe:	2201      	movs	r2, #1
 8000900:	e778      	b.n	80007f4 <__aeabi_fadd+0x1e8>
 8000902:	199b      	adds	r3, r3, r6
 8000904:	3201      	adds	r2, #1
 8000906:	3501      	adds	r5, #1
 8000908:	0159      	lsls	r1, r3, #5
 800090a:	d49a      	bmi.n	8000842 <__aeabi_fadd+0x236>
 800090c:	e6da      	b.n	80006c4 <__aeabi_fadd+0xb8>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d08d      	beq.n	800082e <__aeabi_fadd+0x222>
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	e76e      	b.n	80007f4 <__aeabi_fadd+0x1e8>
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	fbffffff 	.word	0xfbffffff
 800091c:	7dffffff 	.word	0x7dffffff

08000920 <__aeabi_fdiv>:
 8000920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000922:	464f      	mov	r7, r9
 8000924:	4646      	mov	r6, r8
 8000926:	46d6      	mov	lr, sl
 8000928:	0244      	lsls	r4, r0, #9
 800092a:	b5c0      	push	{r6, r7, lr}
 800092c:	0047      	lsls	r7, r0, #1
 800092e:	1c0e      	adds	r6, r1, #0
 8000930:	0a64      	lsrs	r4, r4, #9
 8000932:	0e3f      	lsrs	r7, r7, #24
 8000934:	0fc5      	lsrs	r5, r0, #31
 8000936:	2f00      	cmp	r7, #0
 8000938:	d03c      	beq.n	80009b4 <__aeabi_fdiv+0x94>
 800093a:	2fff      	cmp	r7, #255	@ 0xff
 800093c:	d042      	beq.n	80009c4 <__aeabi_fdiv+0xa4>
 800093e:	2300      	movs	r3, #0
 8000940:	2280      	movs	r2, #128	@ 0x80
 8000942:	4699      	mov	r9, r3
 8000944:	469a      	mov	sl, r3
 8000946:	00e4      	lsls	r4, r4, #3
 8000948:	04d2      	lsls	r2, r2, #19
 800094a:	4314      	orrs	r4, r2
 800094c:	3f7f      	subs	r7, #127	@ 0x7f
 800094e:	0273      	lsls	r3, r6, #9
 8000950:	0a5b      	lsrs	r3, r3, #9
 8000952:	4698      	mov	r8, r3
 8000954:	0073      	lsls	r3, r6, #1
 8000956:	0e1b      	lsrs	r3, r3, #24
 8000958:	0ff6      	lsrs	r6, r6, #31
 800095a:	2b00      	cmp	r3, #0
 800095c:	d01b      	beq.n	8000996 <__aeabi_fdiv+0x76>
 800095e:	2bff      	cmp	r3, #255	@ 0xff
 8000960:	d013      	beq.n	800098a <__aeabi_fdiv+0x6a>
 8000962:	4642      	mov	r2, r8
 8000964:	2180      	movs	r1, #128	@ 0x80
 8000966:	00d2      	lsls	r2, r2, #3
 8000968:	04c9      	lsls	r1, r1, #19
 800096a:	4311      	orrs	r1, r2
 800096c:	4688      	mov	r8, r1
 800096e:	2000      	movs	r0, #0
 8000970:	3b7f      	subs	r3, #127	@ 0x7f
 8000972:	0029      	movs	r1, r5
 8000974:	1aff      	subs	r7, r7, r3
 8000976:	464b      	mov	r3, r9
 8000978:	4071      	eors	r1, r6
 800097a:	b2c9      	uxtb	r1, r1
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d900      	bls.n	8000982 <__aeabi_fdiv+0x62>
 8000980:	e0b5      	b.n	8000aee <__aeabi_fdiv+0x1ce>
 8000982:	4a74      	ldr	r2, [pc, #464]	@ (8000b54 <__aeabi_fdiv+0x234>)
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	58d3      	ldr	r3, [r2, r3]
 8000988:	469f      	mov	pc, r3
 800098a:	4643      	mov	r3, r8
 800098c:	2b00      	cmp	r3, #0
 800098e:	d13f      	bne.n	8000a10 <__aeabi_fdiv+0xf0>
 8000990:	3fff      	subs	r7, #255	@ 0xff
 8000992:	3302      	adds	r3, #2
 8000994:	e003      	b.n	800099e <__aeabi_fdiv+0x7e>
 8000996:	4643      	mov	r3, r8
 8000998:	2b00      	cmp	r3, #0
 800099a:	d12d      	bne.n	80009f8 <__aeabi_fdiv+0xd8>
 800099c:	2301      	movs	r3, #1
 800099e:	0029      	movs	r1, r5
 80009a0:	464a      	mov	r2, r9
 80009a2:	4071      	eors	r1, r6
 80009a4:	b2c9      	uxtb	r1, r1
 80009a6:	431a      	orrs	r2, r3
 80009a8:	2a0e      	cmp	r2, #14
 80009aa:	d838      	bhi.n	8000a1e <__aeabi_fdiv+0xfe>
 80009ac:	486a      	ldr	r0, [pc, #424]	@ (8000b58 <__aeabi_fdiv+0x238>)
 80009ae:	0092      	lsls	r2, r2, #2
 80009b0:	5882      	ldr	r2, [r0, r2]
 80009b2:	4697      	mov	pc, r2
 80009b4:	2c00      	cmp	r4, #0
 80009b6:	d113      	bne.n	80009e0 <__aeabi_fdiv+0xc0>
 80009b8:	2304      	movs	r3, #4
 80009ba:	4699      	mov	r9, r3
 80009bc:	3b03      	subs	r3, #3
 80009be:	2700      	movs	r7, #0
 80009c0:	469a      	mov	sl, r3
 80009c2:	e7c4      	b.n	800094e <__aeabi_fdiv+0x2e>
 80009c4:	2c00      	cmp	r4, #0
 80009c6:	d105      	bne.n	80009d4 <__aeabi_fdiv+0xb4>
 80009c8:	2308      	movs	r3, #8
 80009ca:	4699      	mov	r9, r3
 80009cc:	3b06      	subs	r3, #6
 80009ce:	27ff      	movs	r7, #255	@ 0xff
 80009d0:	469a      	mov	sl, r3
 80009d2:	e7bc      	b.n	800094e <__aeabi_fdiv+0x2e>
 80009d4:	230c      	movs	r3, #12
 80009d6:	4699      	mov	r9, r3
 80009d8:	3b09      	subs	r3, #9
 80009da:	27ff      	movs	r7, #255	@ 0xff
 80009dc:	469a      	mov	sl, r3
 80009de:	e7b6      	b.n	800094e <__aeabi_fdiv+0x2e>
 80009e0:	0020      	movs	r0, r4
 80009e2:	f002 fa93 	bl	8002f0c <__clzsi2>
 80009e6:	2776      	movs	r7, #118	@ 0x76
 80009e8:	1f43      	subs	r3, r0, #5
 80009ea:	409c      	lsls	r4, r3
 80009ec:	2300      	movs	r3, #0
 80009ee:	427f      	negs	r7, r7
 80009f0:	4699      	mov	r9, r3
 80009f2:	469a      	mov	sl, r3
 80009f4:	1a3f      	subs	r7, r7, r0
 80009f6:	e7aa      	b.n	800094e <__aeabi_fdiv+0x2e>
 80009f8:	4640      	mov	r0, r8
 80009fa:	f002 fa87 	bl	8002f0c <__clzsi2>
 80009fe:	4642      	mov	r2, r8
 8000a00:	1f43      	subs	r3, r0, #5
 8000a02:	409a      	lsls	r2, r3
 8000a04:	2376      	movs	r3, #118	@ 0x76
 8000a06:	425b      	negs	r3, r3
 8000a08:	1a1b      	subs	r3, r3, r0
 8000a0a:	4690      	mov	r8, r2
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	e7b0      	b.n	8000972 <__aeabi_fdiv+0x52>
 8000a10:	2303      	movs	r3, #3
 8000a12:	464a      	mov	r2, r9
 8000a14:	431a      	orrs	r2, r3
 8000a16:	4691      	mov	r9, r2
 8000a18:	2003      	movs	r0, #3
 8000a1a:	33fc      	adds	r3, #252	@ 0xfc
 8000a1c:	e7a9      	b.n	8000972 <__aeabi_fdiv+0x52>
 8000a1e:	000d      	movs	r5, r1
 8000a20:	20ff      	movs	r0, #255	@ 0xff
 8000a22:	2200      	movs	r2, #0
 8000a24:	05c0      	lsls	r0, r0, #23
 8000a26:	07ed      	lsls	r5, r5, #31
 8000a28:	4310      	orrs	r0, r2
 8000a2a:	4328      	orrs	r0, r5
 8000a2c:	bce0      	pop	{r5, r6, r7}
 8000a2e:	46ba      	mov	sl, r7
 8000a30:	46b1      	mov	r9, r6
 8000a32:	46a8      	mov	r8, r5
 8000a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a36:	000d      	movs	r5, r1
 8000a38:	2000      	movs	r0, #0
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	e7f2      	b.n	8000a24 <__aeabi_fdiv+0x104>
 8000a3e:	4653      	mov	r3, sl
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d0ed      	beq.n	8000a20 <__aeabi_fdiv+0x100>
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d033      	beq.n	8000ab0 <__aeabi_fdiv+0x190>
 8000a48:	46a0      	mov	r8, r4
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d105      	bne.n	8000a5a <__aeabi_fdiv+0x13a>
 8000a4e:	2000      	movs	r0, #0
 8000a50:	2200      	movs	r2, #0
 8000a52:	e7e7      	b.n	8000a24 <__aeabi_fdiv+0x104>
 8000a54:	0035      	movs	r5, r6
 8000a56:	2803      	cmp	r0, #3
 8000a58:	d07a      	beq.n	8000b50 <__aeabi_fdiv+0x230>
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	337f      	adds	r3, #127	@ 0x7f
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	dd2d      	ble.n	8000abe <__aeabi_fdiv+0x19e>
 8000a62:	4642      	mov	r2, r8
 8000a64:	0752      	lsls	r2, r2, #29
 8000a66:	d007      	beq.n	8000a78 <__aeabi_fdiv+0x158>
 8000a68:	220f      	movs	r2, #15
 8000a6a:	4641      	mov	r1, r8
 8000a6c:	400a      	ands	r2, r1
 8000a6e:	2a04      	cmp	r2, #4
 8000a70:	d002      	beq.n	8000a78 <__aeabi_fdiv+0x158>
 8000a72:	2204      	movs	r2, #4
 8000a74:	4694      	mov	ip, r2
 8000a76:	44e0      	add	r8, ip
 8000a78:	4642      	mov	r2, r8
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	d505      	bpl.n	8000a8a <__aeabi_fdiv+0x16a>
 8000a7e:	4642      	mov	r2, r8
 8000a80:	4b36      	ldr	r3, [pc, #216]	@ (8000b5c <__aeabi_fdiv+0x23c>)
 8000a82:	401a      	ands	r2, r3
 8000a84:	003b      	movs	r3, r7
 8000a86:	4690      	mov	r8, r2
 8000a88:	3380      	adds	r3, #128	@ 0x80
 8000a8a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a8c:	dcc8      	bgt.n	8000a20 <__aeabi_fdiv+0x100>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	0192      	lsls	r2, r2, #6
 8000a92:	0a52      	lsrs	r2, r2, #9
 8000a94:	b2d8      	uxtb	r0, r3
 8000a96:	e7c5      	b.n	8000a24 <__aeabi_fdiv+0x104>
 8000a98:	2280      	movs	r2, #128	@ 0x80
 8000a9a:	2500      	movs	r5, #0
 8000a9c:	20ff      	movs	r0, #255	@ 0xff
 8000a9e:	03d2      	lsls	r2, r2, #15
 8000aa0:	e7c0      	b.n	8000a24 <__aeabi_fdiv+0x104>
 8000aa2:	2280      	movs	r2, #128	@ 0x80
 8000aa4:	03d2      	lsls	r2, r2, #15
 8000aa6:	4214      	tst	r4, r2
 8000aa8:	d002      	beq.n	8000ab0 <__aeabi_fdiv+0x190>
 8000aaa:	4643      	mov	r3, r8
 8000aac:	4213      	tst	r3, r2
 8000aae:	d049      	beq.n	8000b44 <__aeabi_fdiv+0x224>
 8000ab0:	2280      	movs	r2, #128	@ 0x80
 8000ab2:	03d2      	lsls	r2, r2, #15
 8000ab4:	4322      	orrs	r2, r4
 8000ab6:	0252      	lsls	r2, r2, #9
 8000ab8:	20ff      	movs	r0, #255	@ 0xff
 8000aba:	0a52      	lsrs	r2, r2, #9
 8000abc:	e7b2      	b.n	8000a24 <__aeabi_fdiv+0x104>
 8000abe:	2201      	movs	r2, #1
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b1b      	cmp	r3, #27
 8000ac4:	dcc3      	bgt.n	8000a4e <__aeabi_fdiv+0x12e>
 8000ac6:	4642      	mov	r2, r8
 8000ac8:	40da      	lsrs	r2, r3
 8000aca:	4643      	mov	r3, r8
 8000acc:	379e      	adds	r7, #158	@ 0x9e
 8000ace:	40bb      	lsls	r3, r7
 8000ad0:	1e59      	subs	r1, r3, #1
 8000ad2:	418b      	sbcs	r3, r1
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	0753      	lsls	r3, r2, #29
 8000ad8:	d004      	beq.n	8000ae4 <__aeabi_fdiv+0x1c4>
 8000ada:	230f      	movs	r3, #15
 8000adc:	4013      	ands	r3, r2
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fdiv+0x1c4>
 8000ae2:	3204      	adds	r2, #4
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d529      	bpl.n	8000b3c <__aeabi_fdiv+0x21c>
 8000ae8:	2001      	movs	r0, #1
 8000aea:	2200      	movs	r2, #0
 8000aec:	e79a      	b.n	8000a24 <__aeabi_fdiv+0x104>
 8000aee:	4642      	mov	r2, r8
 8000af0:	0163      	lsls	r3, r4, #5
 8000af2:	0155      	lsls	r5, r2, #5
 8000af4:	42ab      	cmp	r3, r5
 8000af6:	d215      	bcs.n	8000b24 <__aeabi_fdiv+0x204>
 8000af8:	201b      	movs	r0, #27
 8000afa:	2200      	movs	r2, #0
 8000afc:	3f01      	subs	r7, #1
 8000afe:	2601      	movs	r6, #1
 8000b00:	001c      	movs	r4, r3
 8000b02:	0052      	lsls	r2, r2, #1
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	db01      	blt.n	8000b0e <__aeabi_fdiv+0x1ee>
 8000b0a:	429d      	cmp	r5, r3
 8000b0c:	d801      	bhi.n	8000b12 <__aeabi_fdiv+0x1f2>
 8000b0e:	1b5b      	subs	r3, r3, r5
 8000b10:	4332      	orrs	r2, r6
 8000b12:	3801      	subs	r0, #1
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d1f3      	bne.n	8000b00 <__aeabi_fdiv+0x1e0>
 8000b18:	1e58      	subs	r0, r3, #1
 8000b1a:	4183      	sbcs	r3, r0
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	4698      	mov	r8, r3
 8000b20:	000d      	movs	r5, r1
 8000b22:	e79a      	b.n	8000a5a <__aeabi_fdiv+0x13a>
 8000b24:	201a      	movs	r0, #26
 8000b26:	2201      	movs	r2, #1
 8000b28:	1b5b      	subs	r3, r3, r5
 8000b2a:	e7e8      	b.n	8000afe <__aeabi_fdiv+0x1de>
 8000b2c:	3b02      	subs	r3, #2
 8000b2e:	425a      	negs	r2, r3
 8000b30:	4153      	adcs	r3, r2
 8000b32:	425b      	negs	r3, r3
 8000b34:	0035      	movs	r5, r6
 8000b36:	2200      	movs	r2, #0
 8000b38:	b2d8      	uxtb	r0, r3
 8000b3a:	e773      	b.n	8000a24 <__aeabi_fdiv+0x104>
 8000b3c:	0192      	lsls	r2, r2, #6
 8000b3e:	2000      	movs	r0, #0
 8000b40:	0a52      	lsrs	r2, r2, #9
 8000b42:	e76f      	b.n	8000a24 <__aeabi_fdiv+0x104>
 8000b44:	431a      	orrs	r2, r3
 8000b46:	0252      	lsls	r2, r2, #9
 8000b48:	0035      	movs	r5, r6
 8000b4a:	20ff      	movs	r0, #255	@ 0xff
 8000b4c:	0a52      	lsrs	r2, r2, #9
 8000b4e:	e769      	b.n	8000a24 <__aeabi_fdiv+0x104>
 8000b50:	4644      	mov	r4, r8
 8000b52:	e7ad      	b.n	8000ab0 <__aeabi_fdiv+0x190>
 8000b54:	0800d5d8 	.word	0x0800d5d8
 8000b58:	0800d618 	.word	0x0800d618
 8000b5c:	f7ffffff 	.word	0xf7ffffff

08000b60 <__eqsf2>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	0042      	lsls	r2, r0, #1
 8000b64:	024e      	lsls	r6, r1, #9
 8000b66:	004c      	lsls	r4, r1, #1
 8000b68:	0245      	lsls	r5, r0, #9
 8000b6a:	0a6d      	lsrs	r5, r5, #9
 8000b6c:	0e12      	lsrs	r2, r2, #24
 8000b6e:	0fc3      	lsrs	r3, r0, #31
 8000b70:	0a76      	lsrs	r6, r6, #9
 8000b72:	0e24      	lsrs	r4, r4, #24
 8000b74:	0fc9      	lsrs	r1, r1, #31
 8000b76:	2aff      	cmp	r2, #255	@ 0xff
 8000b78:	d010      	beq.n	8000b9c <__eqsf2+0x3c>
 8000b7a:	2cff      	cmp	r4, #255	@ 0xff
 8000b7c:	d00c      	beq.n	8000b98 <__eqsf2+0x38>
 8000b7e:	2001      	movs	r0, #1
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	d10a      	bne.n	8000b9a <__eqsf2+0x3a>
 8000b84:	42b5      	cmp	r5, r6
 8000b86:	d108      	bne.n	8000b9a <__eqsf2+0x3a>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	d00f      	beq.n	8000bac <__eqsf2+0x4c>
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d104      	bne.n	8000b9a <__eqsf2+0x3a>
 8000b90:	0028      	movs	r0, r5
 8000b92:	1e43      	subs	r3, r0, #1
 8000b94:	4198      	sbcs	r0, r3
 8000b96:	e000      	b.n	8000b9a <__eqsf2+0x3a>
 8000b98:	2001      	movs	r0, #1
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	2cff      	cmp	r4, #255	@ 0xff
 8000ba0:	d1fb      	bne.n	8000b9a <__eqsf2+0x3a>
 8000ba2:	4335      	orrs	r5, r6
 8000ba4:	d1f9      	bne.n	8000b9a <__eqsf2+0x3a>
 8000ba6:	404b      	eors	r3, r1
 8000ba8:	0018      	movs	r0, r3
 8000baa:	e7f6      	b.n	8000b9a <__eqsf2+0x3a>
 8000bac:	2000      	movs	r0, #0
 8000bae:	e7f4      	b.n	8000b9a <__eqsf2+0x3a>

08000bb0 <__gesf2>:
 8000bb0:	b530      	push	{r4, r5, lr}
 8000bb2:	0042      	lsls	r2, r0, #1
 8000bb4:	0244      	lsls	r4, r0, #9
 8000bb6:	024d      	lsls	r5, r1, #9
 8000bb8:	0fc3      	lsrs	r3, r0, #31
 8000bba:	0048      	lsls	r0, r1, #1
 8000bbc:	0a64      	lsrs	r4, r4, #9
 8000bbe:	0e12      	lsrs	r2, r2, #24
 8000bc0:	0a6d      	lsrs	r5, r5, #9
 8000bc2:	0e00      	lsrs	r0, r0, #24
 8000bc4:	0fc9      	lsrs	r1, r1, #31
 8000bc6:	2aff      	cmp	r2, #255	@ 0xff
 8000bc8:	d019      	beq.n	8000bfe <__gesf2+0x4e>
 8000bca:	28ff      	cmp	r0, #255	@ 0xff
 8000bcc:	d00b      	beq.n	8000be6 <__gesf2+0x36>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d11e      	bne.n	8000c10 <__gesf2+0x60>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d10b      	bne.n	8000bee <__gesf2+0x3e>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d027      	beq.n	8000c2a <__gesf2+0x7a>
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	d134      	bne.n	8000c48 <__gesf2+0x98>
 8000bde:	2900      	cmp	r1, #0
 8000be0:	d02f      	beq.n	8000c42 <__gesf2+0x92>
 8000be2:	0008      	movs	r0, r1
 8000be4:	bd30      	pop	{r4, r5, pc}
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d128      	bne.n	8000c3c <__gesf2+0x8c>
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d101      	bne.n	8000bf2 <__gesf2+0x42>
 8000bee:	2c00      	cmp	r4, #0
 8000bf0:	d0f5      	beq.n	8000bde <__gesf2+0x2e>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d107      	bne.n	8000c06 <__gesf2+0x56>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d023      	beq.n	8000c42 <__gesf2+0x92>
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	e7f2      	b.n	8000be4 <__gesf2+0x34>
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d11c      	bne.n	8000c3c <__gesf2+0x8c>
 8000c02:	28ff      	cmp	r0, #255	@ 0xff
 8000c04:	d014      	beq.n	8000c30 <__gesf2+0x80>
 8000c06:	1e58      	subs	r0, r3, #1
 8000c08:	2302      	movs	r3, #2
 8000c0a:	4018      	ands	r0, r3
 8000c0c:	3801      	subs	r0, #1
 8000c0e:	e7e9      	b.n	8000be4 <__gesf2+0x34>
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d0f8      	beq.n	8000c06 <__gesf2+0x56>
 8000c14:	428b      	cmp	r3, r1
 8000c16:	d1f6      	bne.n	8000c06 <__gesf2+0x56>
 8000c18:	4282      	cmp	r2, r0
 8000c1a:	dcf4      	bgt.n	8000c06 <__gesf2+0x56>
 8000c1c:	dbeb      	blt.n	8000bf6 <__gesf2+0x46>
 8000c1e:	42ac      	cmp	r4, r5
 8000c20:	d8f1      	bhi.n	8000c06 <__gesf2+0x56>
 8000c22:	2000      	movs	r0, #0
 8000c24:	42ac      	cmp	r4, r5
 8000c26:	d2dd      	bcs.n	8000be4 <__gesf2+0x34>
 8000c28:	e7e5      	b.n	8000bf6 <__gesf2+0x46>
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d0da      	beq.n	8000be4 <__gesf2+0x34>
 8000c2e:	e7ea      	b.n	8000c06 <__gesf2+0x56>
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d103      	bne.n	8000c3c <__gesf2+0x8c>
 8000c34:	428b      	cmp	r3, r1
 8000c36:	d1e6      	bne.n	8000c06 <__gesf2+0x56>
 8000c38:	2000      	movs	r0, #0
 8000c3a:	e7d3      	b.n	8000be4 <__gesf2+0x34>
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	4240      	negs	r0, r0
 8000c40:	e7d0      	b.n	8000be4 <__gesf2+0x34>
 8000c42:	2001      	movs	r0, #1
 8000c44:	4240      	negs	r0, r0
 8000c46:	e7cd      	b.n	8000be4 <__gesf2+0x34>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d0e8      	beq.n	8000c1e <__gesf2+0x6e>
 8000c4c:	e7db      	b.n	8000c06 <__gesf2+0x56>
 8000c4e:	46c0      	nop			@ (mov r8, r8)

08000c50 <__lesf2>:
 8000c50:	b530      	push	{r4, r5, lr}
 8000c52:	0042      	lsls	r2, r0, #1
 8000c54:	0244      	lsls	r4, r0, #9
 8000c56:	024d      	lsls	r5, r1, #9
 8000c58:	0fc3      	lsrs	r3, r0, #31
 8000c5a:	0048      	lsls	r0, r1, #1
 8000c5c:	0a64      	lsrs	r4, r4, #9
 8000c5e:	0e12      	lsrs	r2, r2, #24
 8000c60:	0a6d      	lsrs	r5, r5, #9
 8000c62:	0e00      	lsrs	r0, r0, #24
 8000c64:	0fc9      	lsrs	r1, r1, #31
 8000c66:	2aff      	cmp	r2, #255	@ 0xff
 8000c68:	d01a      	beq.n	8000ca0 <__lesf2+0x50>
 8000c6a:	28ff      	cmp	r0, #255	@ 0xff
 8000c6c:	d00e      	beq.n	8000c8c <__lesf2+0x3c>
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d11e      	bne.n	8000cb0 <__lesf2+0x60>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d10e      	bne.n	8000c94 <__lesf2+0x44>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d02a      	beq.n	8000cd0 <__lesf2+0x80>
 8000c7a:	2c00      	cmp	r4, #0
 8000c7c:	d00c      	beq.n	8000c98 <__lesf2+0x48>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d01d      	beq.n	8000cbe <__lesf2+0x6e>
 8000c82:	1e58      	subs	r0, r3, #1
 8000c84:	2302      	movs	r3, #2
 8000c86:	4018      	ands	r0, r3
 8000c88:	3801      	subs	r0, #1
 8000c8a:	e010      	b.n	8000cae <__lesf2+0x5e>
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d10d      	bne.n	8000cac <__lesf2+0x5c>
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	d120      	bne.n	8000cd6 <__lesf2+0x86>
 8000c94:	2c00      	cmp	r4, #0
 8000c96:	d11e      	bne.n	8000cd6 <__lesf2+0x86>
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d023      	beq.n	8000ce4 <__lesf2+0x94>
 8000c9c:	0008      	movs	r0, r1
 8000c9e:	e006      	b.n	8000cae <__lesf2+0x5e>
 8000ca0:	2c00      	cmp	r4, #0
 8000ca2:	d103      	bne.n	8000cac <__lesf2+0x5c>
 8000ca4:	28ff      	cmp	r0, #255	@ 0xff
 8000ca6:	d1ec      	bne.n	8000c82 <__lesf2+0x32>
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d017      	beq.n	8000cdc <__lesf2+0x8c>
 8000cac:	2002      	movs	r0, #2
 8000cae:	bd30      	pop	{r4, r5, pc}
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__lesf2+0x32>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d1e4      	bne.n	8000c82 <__lesf2+0x32>
 8000cb8:	4282      	cmp	r2, r0
 8000cba:	dce2      	bgt.n	8000c82 <__lesf2+0x32>
 8000cbc:	db04      	blt.n	8000cc8 <__lesf2+0x78>
 8000cbe:	42ac      	cmp	r4, r5
 8000cc0:	d8df      	bhi.n	8000c82 <__lesf2+0x32>
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	42ac      	cmp	r4, r5
 8000cc6:	d2f2      	bcs.n	8000cae <__lesf2+0x5e>
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00b      	beq.n	8000ce4 <__lesf2+0x94>
 8000ccc:	0018      	movs	r0, r3
 8000cce:	e7ee      	b.n	8000cae <__lesf2+0x5e>
 8000cd0:	2c00      	cmp	r4, #0
 8000cd2:	d0ec      	beq.n	8000cae <__lesf2+0x5e>
 8000cd4:	e7d5      	b.n	8000c82 <__lesf2+0x32>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d1d3      	bne.n	8000c82 <__lesf2+0x32>
 8000cda:	e7f5      	b.n	8000cc8 <__lesf2+0x78>
 8000cdc:	2000      	movs	r0, #0
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d0e5      	beq.n	8000cae <__lesf2+0x5e>
 8000ce2:	e7ce      	b.n	8000c82 <__lesf2+0x32>
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	e7e1      	b.n	8000cae <__lesf2+0x5e>
 8000cea:	46c0      	nop			@ (mov r8, r8)

08000cec <__aeabi_fmul>:
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	464f      	mov	r7, r9
 8000cf0:	4646      	mov	r6, r8
 8000cf2:	46d6      	mov	lr, sl
 8000cf4:	0243      	lsls	r3, r0, #9
 8000cf6:	0a5b      	lsrs	r3, r3, #9
 8000cf8:	0045      	lsls	r5, r0, #1
 8000cfa:	b5c0      	push	{r6, r7, lr}
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	1c0f      	adds	r7, r1, #0
 8000d00:	0e2d      	lsrs	r5, r5, #24
 8000d02:	0fc6      	lsrs	r6, r0, #31
 8000d04:	2d00      	cmp	r5, #0
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fmul+0x1e>
 8000d08:	e088      	b.n	8000e1c <__aeabi_fmul+0x130>
 8000d0a:	2dff      	cmp	r5, #255	@ 0xff
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fmul+0x24>
 8000d0e:	e08d      	b.n	8000e2c <__aeabi_fmul+0x140>
 8000d10:	2280      	movs	r2, #128	@ 0x80
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	04d2      	lsls	r2, r2, #19
 8000d16:	431a      	orrs	r2, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	4698      	mov	r8, r3
 8000d1e:	469a      	mov	sl, r3
 8000d20:	3d7f      	subs	r5, #127	@ 0x7f
 8000d22:	027c      	lsls	r4, r7, #9
 8000d24:	007b      	lsls	r3, r7, #1
 8000d26:	0a64      	lsrs	r4, r4, #9
 8000d28:	0e1b      	lsrs	r3, r3, #24
 8000d2a:	0fff      	lsrs	r7, r7, #31
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d068      	beq.n	8000e02 <__aeabi_fmul+0x116>
 8000d30:	2bff      	cmp	r3, #255	@ 0xff
 8000d32:	d021      	beq.n	8000d78 <__aeabi_fmul+0x8c>
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	00e4      	lsls	r4, r4, #3
 8000d38:	04d2      	lsls	r2, r2, #19
 8000d3a:	4314      	orrs	r4, r2
 8000d3c:	4642      	mov	r2, r8
 8000d3e:	3b7f      	subs	r3, #127	@ 0x7f
 8000d40:	195b      	adds	r3, r3, r5
 8000d42:	2100      	movs	r1, #0
 8000d44:	1c5d      	adds	r5, r3, #1
 8000d46:	2a0a      	cmp	r2, #10
 8000d48:	dc2e      	bgt.n	8000da8 <__aeabi_fmul+0xbc>
 8000d4a:	407e      	eors	r6, r7
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	2a02      	cmp	r2, #2
 8000d50:	dc23      	bgt.n	8000d9a <__aeabi_fmul+0xae>
 8000d52:	3a01      	subs	r2, #1
 8000d54:	2a01      	cmp	r2, #1
 8000d56:	d900      	bls.n	8000d5a <__aeabi_fmul+0x6e>
 8000d58:	e0bd      	b.n	8000ed6 <__aeabi_fmul+0x1ea>
 8000d5a:	2902      	cmp	r1, #2
 8000d5c:	d06e      	beq.n	8000e3c <__aeabi_fmul+0x150>
 8000d5e:	2901      	cmp	r1, #1
 8000d60:	d12c      	bne.n	8000dbc <__aeabi_fmul+0xd0>
 8000d62:	2000      	movs	r0, #0
 8000d64:	2200      	movs	r2, #0
 8000d66:	05c0      	lsls	r0, r0, #23
 8000d68:	07f6      	lsls	r6, r6, #31
 8000d6a:	4310      	orrs	r0, r2
 8000d6c:	4330      	orrs	r0, r6
 8000d6e:	bce0      	pop	{r5, r6, r7}
 8000d70:	46ba      	mov	sl, r7
 8000d72:	46b1      	mov	r9, r6
 8000d74:	46a8      	mov	r8, r5
 8000d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d78:	002b      	movs	r3, r5
 8000d7a:	33ff      	adds	r3, #255	@ 0xff
 8000d7c:	2c00      	cmp	r4, #0
 8000d7e:	d065      	beq.n	8000e4c <__aeabi_fmul+0x160>
 8000d80:	2203      	movs	r2, #3
 8000d82:	4641      	mov	r1, r8
 8000d84:	4311      	orrs	r1, r2
 8000d86:	0032      	movs	r2, r6
 8000d88:	3501      	adds	r5, #1
 8000d8a:	4688      	mov	r8, r1
 8000d8c:	407a      	eors	r2, r7
 8000d8e:	35ff      	adds	r5, #255	@ 0xff
 8000d90:	290a      	cmp	r1, #10
 8000d92:	dd00      	ble.n	8000d96 <__aeabi_fmul+0xaa>
 8000d94:	e0d8      	b.n	8000f48 <__aeabi_fmul+0x25c>
 8000d96:	0016      	movs	r6, r2
 8000d98:	2103      	movs	r1, #3
 8000d9a:	4640      	mov	r0, r8
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4082      	lsls	r2, r0
 8000da0:	20a6      	movs	r0, #166	@ 0xa6
 8000da2:	00c0      	lsls	r0, r0, #3
 8000da4:	4202      	tst	r2, r0
 8000da6:	d020      	beq.n	8000dea <__aeabi_fmul+0xfe>
 8000da8:	4653      	mov	r3, sl
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d046      	beq.n	8000e3c <__aeabi_fmul+0x150>
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fmul+0xc8>
 8000db2:	e0bb      	b.n	8000f2c <__aeabi_fmul+0x240>
 8000db4:	4651      	mov	r1, sl
 8000db6:	464c      	mov	r4, r9
 8000db8:	2901      	cmp	r1, #1
 8000dba:	d0d2      	beq.n	8000d62 <__aeabi_fmul+0x76>
 8000dbc:	002b      	movs	r3, r5
 8000dbe:	337f      	adds	r3, #127	@ 0x7f
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	dd70      	ble.n	8000ea6 <__aeabi_fmul+0x1ba>
 8000dc4:	0762      	lsls	r2, r4, #29
 8000dc6:	d004      	beq.n	8000dd2 <__aeabi_fmul+0xe6>
 8000dc8:	220f      	movs	r2, #15
 8000dca:	4022      	ands	r2, r4
 8000dcc:	2a04      	cmp	r2, #4
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_fmul+0xe6>
 8000dd0:	3404      	adds	r4, #4
 8000dd2:	0122      	lsls	r2, r4, #4
 8000dd4:	d503      	bpl.n	8000dde <__aeabi_fmul+0xf2>
 8000dd6:	4b63      	ldr	r3, [pc, #396]	@ (8000f64 <__aeabi_fmul+0x278>)
 8000dd8:	401c      	ands	r4, r3
 8000dda:	002b      	movs	r3, r5
 8000ddc:	3380      	adds	r3, #128	@ 0x80
 8000dde:	2bfe      	cmp	r3, #254	@ 0xfe
 8000de0:	dc2c      	bgt.n	8000e3c <__aeabi_fmul+0x150>
 8000de2:	01a2      	lsls	r2, r4, #6
 8000de4:	0a52      	lsrs	r2, r2, #9
 8000de6:	b2d8      	uxtb	r0, r3
 8000de8:	e7bd      	b.n	8000d66 <__aeabi_fmul+0x7a>
 8000dea:	2090      	movs	r0, #144	@ 0x90
 8000dec:	0080      	lsls	r0, r0, #2
 8000dee:	4202      	tst	r2, r0
 8000df0:	d127      	bne.n	8000e42 <__aeabi_fmul+0x156>
 8000df2:	38b9      	subs	r0, #185	@ 0xb9
 8000df4:	38ff      	subs	r0, #255	@ 0xff
 8000df6:	4210      	tst	r0, r2
 8000df8:	d06d      	beq.n	8000ed6 <__aeabi_fmul+0x1ea>
 8000dfa:	003e      	movs	r6, r7
 8000dfc:	46a1      	mov	r9, r4
 8000dfe:	468a      	mov	sl, r1
 8000e00:	e7d2      	b.n	8000da8 <__aeabi_fmul+0xbc>
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d141      	bne.n	8000e8a <__aeabi_fmul+0x19e>
 8000e06:	2301      	movs	r3, #1
 8000e08:	4642      	mov	r2, r8
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	4690      	mov	r8, r2
 8000e0e:	002b      	movs	r3, r5
 8000e10:	4642      	mov	r2, r8
 8000e12:	2101      	movs	r1, #1
 8000e14:	1c5d      	adds	r5, r3, #1
 8000e16:	2a0a      	cmp	r2, #10
 8000e18:	dd97      	ble.n	8000d4a <__aeabi_fmul+0x5e>
 8000e1a:	e7c5      	b.n	8000da8 <__aeabi_fmul+0xbc>
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d126      	bne.n	8000e6e <__aeabi_fmul+0x182>
 8000e20:	2304      	movs	r3, #4
 8000e22:	4698      	mov	r8, r3
 8000e24:	3b03      	subs	r3, #3
 8000e26:	2500      	movs	r5, #0
 8000e28:	469a      	mov	sl, r3
 8000e2a:	e77a      	b.n	8000d22 <__aeabi_fmul+0x36>
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d118      	bne.n	8000e62 <__aeabi_fmul+0x176>
 8000e30:	2308      	movs	r3, #8
 8000e32:	4698      	mov	r8, r3
 8000e34:	3b06      	subs	r3, #6
 8000e36:	25ff      	movs	r5, #255	@ 0xff
 8000e38:	469a      	mov	sl, r3
 8000e3a:	e772      	b.n	8000d22 <__aeabi_fmul+0x36>
 8000e3c:	20ff      	movs	r0, #255	@ 0xff
 8000e3e:	2200      	movs	r2, #0
 8000e40:	e791      	b.n	8000d66 <__aeabi_fmul+0x7a>
 8000e42:	2280      	movs	r2, #128	@ 0x80
 8000e44:	2600      	movs	r6, #0
 8000e46:	20ff      	movs	r0, #255	@ 0xff
 8000e48:	03d2      	lsls	r2, r2, #15
 8000e4a:	e78c      	b.n	8000d66 <__aeabi_fmul+0x7a>
 8000e4c:	4641      	mov	r1, r8
 8000e4e:	2202      	movs	r2, #2
 8000e50:	3501      	adds	r5, #1
 8000e52:	4311      	orrs	r1, r2
 8000e54:	4688      	mov	r8, r1
 8000e56:	35ff      	adds	r5, #255	@ 0xff
 8000e58:	290a      	cmp	r1, #10
 8000e5a:	dca5      	bgt.n	8000da8 <__aeabi_fmul+0xbc>
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	407e      	eors	r6, r7
 8000e60:	e774      	b.n	8000d4c <__aeabi_fmul+0x60>
 8000e62:	230c      	movs	r3, #12
 8000e64:	4698      	mov	r8, r3
 8000e66:	3b09      	subs	r3, #9
 8000e68:	25ff      	movs	r5, #255	@ 0xff
 8000e6a:	469a      	mov	sl, r3
 8000e6c:	e759      	b.n	8000d22 <__aeabi_fmul+0x36>
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f002 f84c 	bl	8002f0c <__clzsi2>
 8000e74:	464a      	mov	r2, r9
 8000e76:	1f43      	subs	r3, r0, #5
 8000e78:	2576      	movs	r5, #118	@ 0x76
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	426d      	negs	r5, r5
 8000e80:	4691      	mov	r9, r2
 8000e82:	4698      	mov	r8, r3
 8000e84:	469a      	mov	sl, r3
 8000e86:	1a2d      	subs	r5, r5, r0
 8000e88:	e74b      	b.n	8000d22 <__aeabi_fmul+0x36>
 8000e8a:	0020      	movs	r0, r4
 8000e8c:	f002 f83e 	bl	8002f0c <__clzsi2>
 8000e90:	4642      	mov	r2, r8
 8000e92:	1f43      	subs	r3, r0, #5
 8000e94:	409c      	lsls	r4, r3
 8000e96:	1a2b      	subs	r3, r5, r0
 8000e98:	3b76      	subs	r3, #118	@ 0x76
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	1c5d      	adds	r5, r3, #1
 8000e9e:	2a0a      	cmp	r2, #10
 8000ea0:	dc00      	bgt.n	8000ea4 <__aeabi_fmul+0x1b8>
 8000ea2:	e752      	b.n	8000d4a <__aeabi_fmul+0x5e>
 8000ea4:	e780      	b.n	8000da8 <__aeabi_fmul+0xbc>
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b1b      	cmp	r3, #27
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_fmul+0x1c4>
 8000eae:	e758      	b.n	8000d62 <__aeabi_fmul+0x76>
 8000eb0:	359e      	adds	r5, #158	@ 0x9e
 8000eb2:	0022      	movs	r2, r4
 8000eb4:	40ac      	lsls	r4, r5
 8000eb6:	40da      	lsrs	r2, r3
 8000eb8:	1e63      	subs	r3, r4, #1
 8000eba:	419c      	sbcs	r4, r3
 8000ebc:	4322      	orrs	r2, r4
 8000ebe:	0753      	lsls	r3, r2, #29
 8000ec0:	d004      	beq.n	8000ecc <__aeabi_fmul+0x1e0>
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_fmul+0x1e0>
 8000eca:	3204      	adds	r2, #4
 8000ecc:	0153      	lsls	r3, r2, #5
 8000ece:	d537      	bpl.n	8000f40 <__aeabi_fmul+0x254>
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	e747      	b.n	8000d66 <__aeabi_fmul+0x7a>
 8000ed6:	0c21      	lsrs	r1, r4, #16
 8000ed8:	464a      	mov	r2, r9
 8000eda:	0424      	lsls	r4, r4, #16
 8000edc:	0c24      	lsrs	r4, r4, #16
 8000ede:	0027      	movs	r7, r4
 8000ee0:	0c10      	lsrs	r0, r2, #16
 8000ee2:	0412      	lsls	r2, r2, #16
 8000ee4:	0c12      	lsrs	r2, r2, #16
 8000ee6:	4344      	muls	r4, r0
 8000ee8:	4357      	muls	r7, r2
 8000eea:	4348      	muls	r0, r1
 8000eec:	4351      	muls	r1, r2
 8000eee:	0c3a      	lsrs	r2, r7, #16
 8000ef0:	1909      	adds	r1, r1, r4
 8000ef2:	1852      	adds	r2, r2, r1
 8000ef4:	4294      	cmp	r4, r2
 8000ef6:	d903      	bls.n	8000f00 <__aeabi_fmul+0x214>
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	0249      	lsls	r1, r1, #9
 8000efc:	468c      	mov	ip, r1
 8000efe:	4460      	add	r0, ip
 8000f00:	043f      	lsls	r7, r7, #16
 8000f02:	0411      	lsls	r1, r2, #16
 8000f04:	0c3f      	lsrs	r7, r7, #16
 8000f06:	19c9      	adds	r1, r1, r7
 8000f08:	018c      	lsls	r4, r1, #6
 8000f0a:	1e67      	subs	r7, r4, #1
 8000f0c:	41bc      	sbcs	r4, r7
 8000f0e:	0c12      	lsrs	r2, r2, #16
 8000f10:	0e89      	lsrs	r1, r1, #26
 8000f12:	1812      	adds	r2, r2, r0
 8000f14:	430c      	orrs	r4, r1
 8000f16:	0192      	lsls	r2, r2, #6
 8000f18:	4314      	orrs	r4, r2
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	d50e      	bpl.n	8000f3c <__aeabi_fmul+0x250>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	0862      	lsrs	r2, r4, #1
 8000f22:	401c      	ands	r4, r3
 8000f24:	4314      	orrs	r4, r2
 8000f26:	e749      	b.n	8000dbc <__aeabi_fmul+0xd0>
 8000f28:	003e      	movs	r6, r7
 8000f2a:	46a1      	mov	r9, r4
 8000f2c:	2280      	movs	r2, #128	@ 0x80
 8000f2e:	464b      	mov	r3, r9
 8000f30:	03d2      	lsls	r2, r2, #15
 8000f32:	431a      	orrs	r2, r3
 8000f34:	0252      	lsls	r2, r2, #9
 8000f36:	20ff      	movs	r0, #255	@ 0xff
 8000f38:	0a52      	lsrs	r2, r2, #9
 8000f3a:	e714      	b.n	8000d66 <__aeabi_fmul+0x7a>
 8000f3c:	001d      	movs	r5, r3
 8000f3e:	e73d      	b.n	8000dbc <__aeabi_fmul+0xd0>
 8000f40:	0192      	lsls	r2, r2, #6
 8000f42:	2000      	movs	r0, #0
 8000f44:	0a52      	lsrs	r2, r2, #9
 8000f46:	e70e      	b.n	8000d66 <__aeabi_fmul+0x7a>
 8000f48:	290f      	cmp	r1, #15
 8000f4a:	d1ed      	bne.n	8000f28 <__aeabi_fmul+0x23c>
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	464b      	mov	r3, r9
 8000f50:	03d2      	lsls	r2, r2, #15
 8000f52:	4213      	tst	r3, r2
 8000f54:	d0ea      	beq.n	8000f2c <__aeabi_fmul+0x240>
 8000f56:	4214      	tst	r4, r2
 8000f58:	d1e8      	bne.n	8000f2c <__aeabi_fmul+0x240>
 8000f5a:	003e      	movs	r6, r7
 8000f5c:	20ff      	movs	r0, #255	@ 0xff
 8000f5e:	4322      	orrs	r2, r4
 8000f60:	e701      	b.n	8000d66 <__aeabi_fmul+0x7a>
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	f7ffffff 	.word	0xf7ffffff

08000f68 <__aeabi_f2iz>:
 8000f68:	0241      	lsls	r1, r0, #9
 8000f6a:	0042      	lsls	r2, r0, #1
 8000f6c:	0fc3      	lsrs	r3, r0, #31
 8000f6e:	0a49      	lsrs	r1, r1, #9
 8000f70:	2000      	movs	r0, #0
 8000f72:	0e12      	lsrs	r2, r2, #24
 8000f74:	2a7e      	cmp	r2, #126	@ 0x7e
 8000f76:	dd03      	ble.n	8000f80 <__aeabi_f2iz+0x18>
 8000f78:	2a9d      	cmp	r2, #157	@ 0x9d
 8000f7a:	dd02      	ble.n	8000f82 <__aeabi_f2iz+0x1a>
 8000f7c:	4a09      	ldr	r2, [pc, #36]	@ (8000fa4 <__aeabi_f2iz+0x3c>)
 8000f7e:	1898      	adds	r0, r3, r2
 8000f80:	4770      	bx	lr
 8000f82:	2080      	movs	r0, #128	@ 0x80
 8000f84:	0400      	lsls	r0, r0, #16
 8000f86:	4301      	orrs	r1, r0
 8000f88:	2a95      	cmp	r2, #149	@ 0x95
 8000f8a:	dc07      	bgt.n	8000f9c <__aeabi_f2iz+0x34>
 8000f8c:	2096      	movs	r0, #150	@ 0x96
 8000f8e:	1a82      	subs	r2, r0, r2
 8000f90:	40d1      	lsrs	r1, r2
 8000f92:	4248      	negs	r0, r1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f3      	bne.n	8000f80 <__aeabi_f2iz+0x18>
 8000f98:	0008      	movs	r0, r1
 8000f9a:	e7f1      	b.n	8000f80 <__aeabi_f2iz+0x18>
 8000f9c:	3a96      	subs	r2, #150	@ 0x96
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	e7f7      	b.n	8000f92 <__aeabi_f2iz+0x2a>
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	7fffffff 	.word	0x7fffffff

08000fa8 <__aeabi_i2f>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d013      	beq.n	8000fd6 <__aeabi_i2f+0x2e>
 8000fae:	17c3      	asrs	r3, r0, #31
 8000fb0:	18c5      	adds	r5, r0, r3
 8000fb2:	405d      	eors	r5, r3
 8000fb4:	0fc4      	lsrs	r4, r0, #31
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	f001 ffa8 	bl	8002f0c <__clzsi2>
 8000fbc:	239e      	movs	r3, #158	@ 0x9e
 8000fbe:	0001      	movs	r1, r0
 8000fc0:	1a1b      	subs	r3, r3, r0
 8000fc2:	2b96      	cmp	r3, #150	@ 0x96
 8000fc4:	dc0f      	bgt.n	8000fe6 <__aeabi_i2f+0x3e>
 8000fc6:	2808      	cmp	r0, #8
 8000fc8:	d034      	beq.n	8001034 <__aeabi_i2f+0x8c>
 8000fca:	3908      	subs	r1, #8
 8000fcc:	408d      	lsls	r5, r1
 8000fce:	026d      	lsls	r5, r5, #9
 8000fd0:	0a6d      	lsrs	r5, r5, #9
 8000fd2:	b2d8      	uxtb	r0, r3
 8000fd4:	e002      	b.n	8000fdc <__aeabi_i2f+0x34>
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	2000      	movs	r0, #0
 8000fda:	2500      	movs	r5, #0
 8000fdc:	05c0      	lsls	r0, r0, #23
 8000fde:	4328      	orrs	r0, r5
 8000fe0:	07e4      	lsls	r4, r4, #31
 8000fe2:	4320      	orrs	r0, r4
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
 8000fe6:	2b99      	cmp	r3, #153	@ 0x99
 8000fe8:	dc16      	bgt.n	8001018 <__aeabi_i2f+0x70>
 8000fea:	1f42      	subs	r2, r0, #5
 8000fec:	2805      	cmp	r0, #5
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_i2f+0x4a>
 8000ff0:	4095      	lsls	r5, r2
 8000ff2:	002a      	movs	r2, r5
 8000ff4:	4811      	ldr	r0, [pc, #68]	@ (800103c <__aeabi_i2f+0x94>)
 8000ff6:	4002      	ands	r2, r0
 8000ff8:	076e      	lsls	r6, r5, #29
 8000ffa:	d009      	beq.n	8001010 <__aeabi_i2f+0x68>
 8000ffc:	260f      	movs	r6, #15
 8000ffe:	4035      	ands	r5, r6
 8001000:	2d04      	cmp	r5, #4
 8001002:	d005      	beq.n	8001010 <__aeabi_i2f+0x68>
 8001004:	3204      	adds	r2, #4
 8001006:	0155      	lsls	r5, r2, #5
 8001008:	d502      	bpl.n	8001010 <__aeabi_i2f+0x68>
 800100a:	239f      	movs	r3, #159	@ 0x9f
 800100c:	4002      	ands	r2, r0
 800100e:	1a5b      	subs	r3, r3, r1
 8001010:	0192      	lsls	r2, r2, #6
 8001012:	0a55      	lsrs	r5, r2, #9
 8001014:	b2d8      	uxtb	r0, r3
 8001016:	e7e1      	b.n	8000fdc <__aeabi_i2f+0x34>
 8001018:	2205      	movs	r2, #5
 800101a:	1a12      	subs	r2, r2, r0
 800101c:	0028      	movs	r0, r5
 800101e:	40d0      	lsrs	r0, r2
 8001020:	0002      	movs	r2, r0
 8001022:	0008      	movs	r0, r1
 8001024:	301b      	adds	r0, #27
 8001026:	4085      	lsls	r5, r0
 8001028:	0028      	movs	r0, r5
 800102a:	1e45      	subs	r5, r0, #1
 800102c:	41a8      	sbcs	r0, r5
 800102e:	4302      	orrs	r2, r0
 8001030:	0015      	movs	r5, r2
 8001032:	e7de      	b.n	8000ff2 <__aeabi_i2f+0x4a>
 8001034:	026d      	lsls	r5, r5, #9
 8001036:	2096      	movs	r0, #150	@ 0x96
 8001038:	0a6d      	lsrs	r5, r5, #9
 800103a:	e7cf      	b.n	8000fdc <__aeabi_i2f+0x34>
 800103c:	fbffffff 	.word	0xfbffffff

08001040 <__aeabi_dadd>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	4657      	mov	r7, sl
 8001044:	464e      	mov	r6, r9
 8001046:	4645      	mov	r5, r8
 8001048:	46de      	mov	lr, fp
 800104a:	b5e0      	push	{r5, r6, r7, lr}
 800104c:	b083      	sub	sp, #12
 800104e:	9000      	str	r0, [sp, #0]
 8001050:	9101      	str	r1, [sp, #4]
 8001052:	030c      	lsls	r4, r1, #12
 8001054:	004f      	lsls	r7, r1, #1
 8001056:	0fce      	lsrs	r6, r1, #31
 8001058:	0a61      	lsrs	r1, r4, #9
 800105a:	9c00      	ldr	r4, [sp, #0]
 800105c:	031d      	lsls	r5, r3, #12
 800105e:	0f64      	lsrs	r4, r4, #29
 8001060:	430c      	orrs	r4, r1
 8001062:	9900      	ldr	r1, [sp, #0]
 8001064:	9200      	str	r2, [sp, #0]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	00c8      	lsls	r0, r1, #3
 800106a:	0059      	lsls	r1, r3, #1
 800106c:	0d4b      	lsrs	r3, r1, #21
 800106e:	4699      	mov	r9, r3
 8001070:	9a00      	ldr	r2, [sp, #0]
 8001072:	9b01      	ldr	r3, [sp, #4]
 8001074:	0a6d      	lsrs	r5, r5, #9
 8001076:	0fd9      	lsrs	r1, r3, #31
 8001078:	0f53      	lsrs	r3, r2, #29
 800107a:	432b      	orrs	r3, r5
 800107c:	469a      	mov	sl, r3
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	0d7f      	lsrs	r7, r7, #21
 8001082:	00da      	lsls	r2, r3, #3
 8001084:	4694      	mov	ip, r2
 8001086:	464a      	mov	r2, r9
 8001088:	46b0      	mov	r8, r6
 800108a:	1aba      	subs	r2, r7, r2
 800108c:	428e      	cmp	r6, r1
 800108e:	d100      	bne.n	8001092 <__aeabi_dadd+0x52>
 8001090:	e0b0      	b.n	80011f4 <__aeabi_dadd+0x1b4>
 8001092:	2a00      	cmp	r2, #0
 8001094:	dc00      	bgt.n	8001098 <__aeabi_dadd+0x58>
 8001096:	e078      	b.n	800118a <__aeabi_dadd+0x14a>
 8001098:	4649      	mov	r1, r9
 800109a:	2900      	cmp	r1, #0
 800109c:	d100      	bne.n	80010a0 <__aeabi_dadd+0x60>
 800109e:	e0e9      	b.n	8001274 <__aeabi_dadd+0x234>
 80010a0:	49c9      	ldr	r1, [pc, #804]	@ (80013c8 <__aeabi_dadd+0x388>)
 80010a2:	428f      	cmp	r7, r1
 80010a4:	d100      	bne.n	80010a8 <__aeabi_dadd+0x68>
 80010a6:	e195      	b.n	80013d4 <__aeabi_dadd+0x394>
 80010a8:	2501      	movs	r5, #1
 80010aa:	2a38      	cmp	r2, #56	@ 0x38
 80010ac:	dc16      	bgt.n	80010dc <__aeabi_dadd+0x9c>
 80010ae:	2180      	movs	r1, #128	@ 0x80
 80010b0:	4653      	mov	r3, sl
 80010b2:	0409      	lsls	r1, r1, #16
 80010b4:	430b      	orrs	r3, r1
 80010b6:	469a      	mov	sl, r3
 80010b8:	2a1f      	cmp	r2, #31
 80010ba:	dd00      	ble.n	80010be <__aeabi_dadd+0x7e>
 80010bc:	e1e7      	b.n	800148e <__aeabi_dadd+0x44e>
 80010be:	2120      	movs	r1, #32
 80010c0:	4655      	mov	r5, sl
 80010c2:	1a8b      	subs	r3, r1, r2
 80010c4:	4661      	mov	r1, ip
 80010c6:	409d      	lsls	r5, r3
 80010c8:	40d1      	lsrs	r1, r2
 80010ca:	430d      	orrs	r5, r1
 80010cc:	4661      	mov	r1, ip
 80010ce:	4099      	lsls	r1, r3
 80010d0:	1e4b      	subs	r3, r1, #1
 80010d2:	4199      	sbcs	r1, r3
 80010d4:	4653      	mov	r3, sl
 80010d6:	40d3      	lsrs	r3, r2
 80010d8:	430d      	orrs	r5, r1
 80010da:	1ae4      	subs	r4, r4, r3
 80010dc:	1b45      	subs	r5, r0, r5
 80010de:	42a8      	cmp	r0, r5
 80010e0:	4180      	sbcs	r0, r0
 80010e2:	4240      	negs	r0, r0
 80010e4:	1a24      	subs	r4, r4, r0
 80010e6:	0223      	lsls	r3, r4, #8
 80010e8:	d400      	bmi.n	80010ec <__aeabi_dadd+0xac>
 80010ea:	e10f      	b.n	800130c <__aeabi_dadd+0x2cc>
 80010ec:	0264      	lsls	r4, r4, #9
 80010ee:	0a64      	lsrs	r4, r4, #9
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dadd+0xb6>
 80010f4:	e139      	b.n	800136a <__aeabi_dadd+0x32a>
 80010f6:	0020      	movs	r0, r4
 80010f8:	f001 ff08 	bl	8002f0c <__clzsi2>
 80010fc:	0003      	movs	r3, r0
 80010fe:	3b08      	subs	r3, #8
 8001100:	2120      	movs	r1, #32
 8001102:	0028      	movs	r0, r5
 8001104:	1aca      	subs	r2, r1, r3
 8001106:	40d0      	lsrs	r0, r2
 8001108:	409c      	lsls	r4, r3
 800110a:	0002      	movs	r2, r0
 800110c:	409d      	lsls	r5, r3
 800110e:	4322      	orrs	r2, r4
 8001110:	429f      	cmp	r7, r3
 8001112:	dd00      	ble.n	8001116 <__aeabi_dadd+0xd6>
 8001114:	e173      	b.n	80013fe <__aeabi_dadd+0x3be>
 8001116:	1bd8      	subs	r0, r3, r7
 8001118:	3001      	adds	r0, #1
 800111a:	1a09      	subs	r1, r1, r0
 800111c:	002c      	movs	r4, r5
 800111e:	408d      	lsls	r5, r1
 8001120:	40c4      	lsrs	r4, r0
 8001122:	1e6b      	subs	r3, r5, #1
 8001124:	419d      	sbcs	r5, r3
 8001126:	0013      	movs	r3, r2
 8001128:	40c2      	lsrs	r2, r0
 800112a:	408b      	lsls	r3, r1
 800112c:	4325      	orrs	r5, r4
 800112e:	2700      	movs	r7, #0
 8001130:	0014      	movs	r4, r2
 8001132:	431d      	orrs	r5, r3
 8001134:	076b      	lsls	r3, r5, #29
 8001136:	d009      	beq.n	800114c <__aeabi_dadd+0x10c>
 8001138:	230f      	movs	r3, #15
 800113a:	402b      	ands	r3, r5
 800113c:	2b04      	cmp	r3, #4
 800113e:	d005      	beq.n	800114c <__aeabi_dadd+0x10c>
 8001140:	1d2b      	adds	r3, r5, #4
 8001142:	42ab      	cmp	r3, r5
 8001144:	41ad      	sbcs	r5, r5
 8001146:	426d      	negs	r5, r5
 8001148:	1964      	adds	r4, r4, r5
 800114a:	001d      	movs	r5, r3
 800114c:	0223      	lsls	r3, r4, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x112>
 8001150:	e12d      	b.n	80013ae <__aeabi_dadd+0x36e>
 8001152:	4a9d      	ldr	r2, [pc, #628]	@ (80013c8 <__aeabi_dadd+0x388>)
 8001154:	3701      	adds	r7, #1
 8001156:	4297      	cmp	r7, r2
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x11c>
 800115a:	e0d3      	b.n	8001304 <__aeabi_dadd+0x2c4>
 800115c:	4646      	mov	r6, r8
 800115e:	499b      	ldr	r1, [pc, #620]	@ (80013cc <__aeabi_dadd+0x38c>)
 8001160:	08ed      	lsrs	r5, r5, #3
 8001162:	4021      	ands	r1, r4
 8001164:	074a      	lsls	r2, r1, #29
 8001166:	432a      	orrs	r2, r5
 8001168:	057c      	lsls	r4, r7, #21
 800116a:	024d      	lsls	r5, r1, #9
 800116c:	0b2d      	lsrs	r5, r5, #12
 800116e:	0d64      	lsrs	r4, r4, #21
 8001170:	0524      	lsls	r4, r4, #20
 8001172:	432c      	orrs	r4, r5
 8001174:	07f6      	lsls	r6, r6, #31
 8001176:	4334      	orrs	r4, r6
 8001178:	0010      	movs	r0, r2
 800117a:	0021      	movs	r1, r4
 800117c:	b003      	add	sp, #12
 800117e:	bcf0      	pop	{r4, r5, r6, r7}
 8001180:	46bb      	mov	fp, r7
 8001182:	46b2      	mov	sl, r6
 8001184:	46a9      	mov	r9, r5
 8001186:	46a0      	mov	r8, r4
 8001188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118a:	2a00      	cmp	r2, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_dadd+0x150>
 800118e:	e084      	b.n	800129a <__aeabi_dadd+0x25a>
 8001190:	464a      	mov	r2, r9
 8001192:	1bd2      	subs	r2, r2, r7
 8001194:	2f00      	cmp	r7, #0
 8001196:	d000      	beq.n	800119a <__aeabi_dadd+0x15a>
 8001198:	e16d      	b.n	8001476 <__aeabi_dadd+0x436>
 800119a:	0025      	movs	r5, r4
 800119c:	4305      	orrs	r5, r0
 800119e:	d100      	bne.n	80011a2 <__aeabi_dadd+0x162>
 80011a0:	e127      	b.n	80013f2 <__aeabi_dadd+0x3b2>
 80011a2:	1e56      	subs	r6, r2, #1
 80011a4:	2a01      	cmp	r2, #1
 80011a6:	d100      	bne.n	80011aa <__aeabi_dadd+0x16a>
 80011a8:	e23b      	b.n	8001622 <__aeabi_dadd+0x5e2>
 80011aa:	4d87      	ldr	r5, [pc, #540]	@ (80013c8 <__aeabi_dadd+0x388>)
 80011ac:	42aa      	cmp	r2, r5
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x172>
 80011b0:	e26a      	b.n	8001688 <__aeabi_dadd+0x648>
 80011b2:	2501      	movs	r5, #1
 80011b4:	2e38      	cmp	r6, #56	@ 0x38
 80011b6:	dc12      	bgt.n	80011de <__aeabi_dadd+0x19e>
 80011b8:	0032      	movs	r2, r6
 80011ba:	2a1f      	cmp	r2, #31
 80011bc:	dd00      	ble.n	80011c0 <__aeabi_dadd+0x180>
 80011be:	e1f8      	b.n	80015b2 <__aeabi_dadd+0x572>
 80011c0:	2620      	movs	r6, #32
 80011c2:	0025      	movs	r5, r4
 80011c4:	1ab6      	subs	r6, r6, r2
 80011c6:	0007      	movs	r7, r0
 80011c8:	4653      	mov	r3, sl
 80011ca:	40b0      	lsls	r0, r6
 80011cc:	40d4      	lsrs	r4, r2
 80011ce:	40b5      	lsls	r5, r6
 80011d0:	40d7      	lsrs	r7, r2
 80011d2:	1e46      	subs	r6, r0, #1
 80011d4:	41b0      	sbcs	r0, r6
 80011d6:	1b1b      	subs	r3, r3, r4
 80011d8:	469a      	mov	sl, r3
 80011da:	433d      	orrs	r5, r7
 80011dc:	4305      	orrs	r5, r0
 80011de:	4662      	mov	r2, ip
 80011e0:	1b55      	subs	r5, r2, r5
 80011e2:	45ac      	cmp	ip, r5
 80011e4:	4192      	sbcs	r2, r2
 80011e6:	4653      	mov	r3, sl
 80011e8:	4252      	negs	r2, r2
 80011ea:	000e      	movs	r6, r1
 80011ec:	464f      	mov	r7, r9
 80011ee:	4688      	mov	r8, r1
 80011f0:	1a9c      	subs	r4, r3, r2
 80011f2:	e778      	b.n	80010e6 <__aeabi_dadd+0xa6>
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	dc00      	bgt.n	80011fa <__aeabi_dadd+0x1ba>
 80011f8:	e08e      	b.n	8001318 <__aeabi_dadd+0x2d8>
 80011fa:	4649      	mov	r1, r9
 80011fc:	2900      	cmp	r1, #0
 80011fe:	d175      	bne.n	80012ec <__aeabi_dadd+0x2ac>
 8001200:	4661      	mov	r1, ip
 8001202:	4653      	mov	r3, sl
 8001204:	4319      	orrs	r1, r3
 8001206:	d100      	bne.n	800120a <__aeabi_dadd+0x1ca>
 8001208:	e0f6      	b.n	80013f8 <__aeabi_dadd+0x3b8>
 800120a:	1e51      	subs	r1, r2, #1
 800120c:	2a01      	cmp	r2, #1
 800120e:	d100      	bne.n	8001212 <__aeabi_dadd+0x1d2>
 8001210:	e191      	b.n	8001536 <__aeabi_dadd+0x4f6>
 8001212:	4d6d      	ldr	r5, [pc, #436]	@ (80013c8 <__aeabi_dadd+0x388>)
 8001214:	42aa      	cmp	r2, r5
 8001216:	d100      	bne.n	800121a <__aeabi_dadd+0x1da>
 8001218:	e0dc      	b.n	80013d4 <__aeabi_dadd+0x394>
 800121a:	2501      	movs	r5, #1
 800121c:	2938      	cmp	r1, #56	@ 0x38
 800121e:	dc14      	bgt.n	800124a <__aeabi_dadd+0x20a>
 8001220:	000a      	movs	r2, r1
 8001222:	2a1f      	cmp	r2, #31
 8001224:	dd00      	ble.n	8001228 <__aeabi_dadd+0x1e8>
 8001226:	e1a2      	b.n	800156e <__aeabi_dadd+0x52e>
 8001228:	2120      	movs	r1, #32
 800122a:	4653      	mov	r3, sl
 800122c:	1a89      	subs	r1, r1, r2
 800122e:	408b      	lsls	r3, r1
 8001230:	001d      	movs	r5, r3
 8001232:	4663      	mov	r3, ip
 8001234:	40d3      	lsrs	r3, r2
 8001236:	431d      	orrs	r5, r3
 8001238:	4663      	mov	r3, ip
 800123a:	408b      	lsls	r3, r1
 800123c:	0019      	movs	r1, r3
 800123e:	1e4b      	subs	r3, r1, #1
 8001240:	4199      	sbcs	r1, r3
 8001242:	4653      	mov	r3, sl
 8001244:	40d3      	lsrs	r3, r2
 8001246:	430d      	orrs	r5, r1
 8001248:	18e4      	adds	r4, r4, r3
 800124a:	182d      	adds	r5, r5, r0
 800124c:	4285      	cmp	r5, r0
 800124e:	4180      	sbcs	r0, r0
 8001250:	4240      	negs	r0, r0
 8001252:	1824      	adds	r4, r4, r0
 8001254:	0223      	lsls	r3, r4, #8
 8001256:	d559      	bpl.n	800130c <__aeabi_dadd+0x2cc>
 8001258:	4b5b      	ldr	r3, [pc, #364]	@ (80013c8 <__aeabi_dadd+0x388>)
 800125a:	3701      	adds	r7, #1
 800125c:	429f      	cmp	r7, r3
 800125e:	d051      	beq.n	8001304 <__aeabi_dadd+0x2c4>
 8001260:	2101      	movs	r1, #1
 8001262:	4b5a      	ldr	r3, [pc, #360]	@ (80013cc <__aeabi_dadd+0x38c>)
 8001264:	086a      	lsrs	r2, r5, #1
 8001266:	401c      	ands	r4, r3
 8001268:	4029      	ands	r1, r5
 800126a:	430a      	orrs	r2, r1
 800126c:	07e5      	lsls	r5, r4, #31
 800126e:	4315      	orrs	r5, r2
 8001270:	0864      	lsrs	r4, r4, #1
 8001272:	e75f      	b.n	8001134 <__aeabi_dadd+0xf4>
 8001274:	4661      	mov	r1, ip
 8001276:	4653      	mov	r3, sl
 8001278:	4319      	orrs	r1, r3
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x23e>
 800127c:	e0bc      	b.n	80013f8 <__aeabi_dadd+0x3b8>
 800127e:	1e51      	subs	r1, r2, #1
 8001280:	2a01      	cmp	r2, #1
 8001282:	d100      	bne.n	8001286 <__aeabi_dadd+0x246>
 8001284:	e164      	b.n	8001550 <__aeabi_dadd+0x510>
 8001286:	4d50      	ldr	r5, [pc, #320]	@ (80013c8 <__aeabi_dadd+0x388>)
 8001288:	42aa      	cmp	r2, r5
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x24e>
 800128c:	e16a      	b.n	8001564 <__aeabi_dadd+0x524>
 800128e:	2501      	movs	r5, #1
 8001290:	2938      	cmp	r1, #56	@ 0x38
 8001292:	dd00      	ble.n	8001296 <__aeabi_dadd+0x256>
 8001294:	e722      	b.n	80010dc <__aeabi_dadd+0x9c>
 8001296:	000a      	movs	r2, r1
 8001298:	e70e      	b.n	80010b8 <__aeabi_dadd+0x78>
 800129a:	4a4d      	ldr	r2, [pc, #308]	@ (80013d0 <__aeabi_dadd+0x390>)
 800129c:	1c7d      	adds	r5, r7, #1
 800129e:	4215      	tst	r5, r2
 80012a0:	d000      	beq.n	80012a4 <__aeabi_dadd+0x264>
 80012a2:	e0d0      	b.n	8001446 <__aeabi_dadd+0x406>
 80012a4:	0025      	movs	r5, r4
 80012a6:	4662      	mov	r2, ip
 80012a8:	4653      	mov	r3, sl
 80012aa:	4305      	orrs	r5, r0
 80012ac:	431a      	orrs	r2, r3
 80012ae:	2f00      	cmp	r7, #0
 80012b0:	d000      	beq.n	80012b4 <__aeabi_dadd+0x274>
 80012b2:	e137      	b.n	8001524 <__aeabi_dadd+0x4e4>
 80012b4:	2d00      	cmp	r5, #0
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x27a>
 80012b8:	e1a8      	b.n	800160c <__aeabi_dadd+0x5cc>
 80012ba:	2a00      	cmp	r2, #0
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dadd+0x280>
 80012be:	e16a      	b.n	8001596 <__aeabi_dadd+0x556>
 80012c0:	4663      	mov	r3, ip
 80012c2:	1ac5      	subs	r5, r0, r3
 80012c4:	4653      	mov	r3, sl
 80012c6:	1ae2      	subs	r2, r4, r3
 80012c8:	42a8      	cmp	r0, r5
 80012ca:	419b      	sbcs	r3, r3
 80012cc:	425b      	negs	r3, r3
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	021a      	lsls	r2, r3, #8
 80012d2:	d400      	bmi.n	80012d6 <__aeabi_dadd+0x296>
 80012d4:	e203      	b.n	80016de <__aeabi_dadd+0x69e>
 80012d6:	4663      	mov	r3, ip
 80012d8:	1a1d      	subs	r5, r3, r0
 80012da:	45ac      	cmp	ip, r5
 80012dc:	4192      	sbcs	r2, r2
 80012de:	4653      	mov	r3, sl
 80012e0:	4252      	negs	r2, r2
 80012e2:	1b1c      	subs	r4, r3, r4
 80012e4:	000e      	movs	r6, r1
 80012e6:	4688      	mov	r8, r1
 80012e8:	1aa4      	subs	r4, r4, r2
 80012ea:	e723      	b.n	8001134 <__aeabi_dadd+0xf4>
 80012ec:	4936      	ldr	r1, [pc, #216]	@ (80013c8 <__aeabi_dadd+0x388>)
 80012ee:	428f      	cmp	r7, r1
 80012f0:	d070      	beq.n	80013d4 <__aeabi_dadd+0x394>
 80012f2:	2501      	movs	r5, #1
 80012f4:	2a38      	cmp	r2, #56	@ 0x38
 80012f6:	dca8      	bgt.n	800124a <__aeabi_dadd+0x20a>
 80012f8:	2180      	movs	r1, #128	@ 0x80
 80012fa:	4653      	mov	r3, sl
 80012fc:	0409      	lsls	r1, r1, #16
 80012fe:	430b      	orrs	r3, r1
 8001300:	469a      	mov	sl, r3
 8001302:	e78e      	b.n	8001222 <__aeabi_dadd+0x1e2>
 8001304:	003c      	movs	r4, r7
 8001306:	2500      	movs	r5, #0
 8001308:	2200      	movs	r2, #0
 800130a:	e731      	b.n	8001170 <__aeabi_dadd+0x130>
 800130c:	2307      	movs	r3, #7
 800130e:	402b      	ands	r3, r5
 8001310:	2b00      	cmp	r3, #0
 8001312:	d000      	beq.n	8001316 <__aeabi_dadd+0x2d6>
 8001314:	e710      	b.n	8001138 <__aeabi_dadd+0xf8>
 8001316:	e093      	b.n	8001440 <__aeabi_dadd+0x400>
 8001318:	2a00      	cmp	r2, #0
 800131a:	d074      	beq.n	8001406 <__aeabi_dadd+0x3c6>
 800131c:	464a      	mov	r2, r9
 800131e:	1bd2      	subs	r2, r2, r7
 8001320:	2f00      	cmp	r7, #0
 8001322:	d100      	bne.n	8001326 <__aeabi_dadd+0x2e6>
 8001324:	e0c7      	b.n	80014b6 <__aeabi_dadd+0x476>
 8001326:	4928      	ldr	r1, [pc, #160]	@ (80013c8 <__aeabi_dadd+0x388>)
 8001328:	4589      	cmp	r9, r1
 800132a:	d100      	bne.n	800132e <__aeabi_dadd+0x2ee>
 800132c:	e185      	b.n	800163a <__aeabi_dadd+0x5fa>
 800132e:	2501      	movs	r5, #1
 8001330:	2a38      	cmp	r2, #56	@ 0x38
 8001332:	dc12      	bgt.n	800135a <__aeabi_dadd+0x31a>
 8001334:	2180      	movs	r1, #128	@ 0x80
 8001336:	0409      	lsls	r1, r1, #16
 8001338:	430c      	orrs	r4, r1
 800133a:	2a1f      	cmp	r2, #31
 800133c:	dd00      	ble.n	8001340 <__aeabi_dadd+0x300>
 800133e:	e1ab      	b.n	8001698 <__aeabi_dadd+0x658>
 8001340:	2120      	movs	r1, #32
 8001342:	0025      	movs	r5, r4
 8001344:	1a89      	subs	r1, r1, r2
 8001346:	0007      	movs	r7, r0
 8001348:	4088      	lsls	r0, r1
 800134a:	408d      	lsls	r5, r1
 800134c:	40d7      	lsrs	r7, r2
 800134e:	1e41      	subs	r1, r0, #1
 8001350:	4188      	sbcs	r0, r1
 8001352:	40d4      	lsrs	r4, r2
 8001354:	433d      	orrs	r5, r7
 8001356:	4305      	orrs	r5, r0
 8001358:	44a2      	add	sl, r4
 800135a:	4465      	add	r5, ip
 800135c:	4565      	cmp	r5, ip
 800135e:	4192      	sbcs	r2, r2
 8001360:	4252      	negs	r2, r2
 8001362:	4452      	add	r2, sl
 8001364:	0014      	movs	r4, r2
 8001366:	464f      	mov	r7, r9
 8001368:	e774      	b.n	8001254 <__aeabi_dadd+0x214>
 800136a:	0028      	movs	r0, r5
 800136c:	f001 fdce 	bl	8002f0c <__clzsi2>
 8001370:	0003      	movs	r3, r0
 8001372:	3318      	adds	r3, #24
 8001374:	2b1f      	cmp	r3, #31
 8001376:	dc00      	bgt.n	800137a <__aeabi_dadd+0x33a>
 8001378:	e6c2      	b.n	8001100 <__aeabi_dadd+0xc0>
 800137a:	002a      	movs	r2, r5
 800137c:	3808      	subs	r0, #8
 800137e:	4082      	lsls	r2, r0
 8001380:	429f      	cmp	r7, r3
 8001382:	dd00      	ble.n	8001386 <__aeabi_dadd+0x346>
 8001384:	e0a9      	b.n	80014da <__aeabi_dadd+0x49a>
 8001386:	1bdb      	subs	r3, r3, r7
 8001388:	1c58      	adds	r0, r3, #1
 800138a:	281f      	cmp	r0, #31
 800138c:	dc00      	bgt.n	8001390 <__aeabi_dadd+0x350>
 800138e:	e1ac      	b.n	80016ea <__aeabi_dadd+0x6aa>
 8001390:	0015      	movs	r5, r2
 8001392:	3b1f      	subs	r3, #31
 8001394:	40dd      	lsrs	r5, r3
 8001396:	2820      	cmp	r0, #32
 8001398:	d005      	beq.n	80013a6 <__aeabi_dadd+0x366>
 800139a:	2340      	movs	r3, #64	@ 0x40
 800139c:	1a1b      	subs	r3, r3, r0
 800139e:	409a      	lsls	r2, r3
 80013a0:	1e53      	subs	r3, r2, #1
 80013a2:	419a      	sbcs	r2, r3
 80013a4:	4315      	orrs	r5, r2
 80013a6:	2307      	movs	r3, #7
 80013a8:	2700      	movs	r7, #0
 80013aa:	402b      	ands	r3, r5
 80013ac:	e7b0      	b.n	8001310 <__aeabi_dadd+0x2d0>
 80013ae:	08ed      	lsrs	r5, r5, #3
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <__aeabi_dadd+0x388>)
 80013b2:	0762      	lsls	r2, r4, #29
 80013b4:	432a      	orrs	r2, r5
 80013b6:	08e4      	lsrs	r4, r4, #3
 80013b8:	429f      	cmp	r7, r3
 80013ba:	d00f      	beq.n	80013dc <__aeabi_dadd+0x39c>
 80013bc:	0324      	lsls	r4, r4, #12
 80013be:	0b25      	lsrs	r5, r4, #12
 80013c0:	057c      	lsls	r4, r7, #21
 80013c2:	0d64      	lsrs	r4, r4, #21
 80013c4:	e6d4      	b.n	8001170 <__aeabi_dadd+0x130>
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	ff7fffff 	.word	0xff7fffff
 80013d0:	000007fe 	.word	0x000007fe
 80013d4:	08c0      	lsrs	r0, r0, #3
 80013d6:	0762      	lsls	r2, r4, #29
 80013d8:	4302      	orrs	r2, r0
 80013da:	08e4      	lsrs	r4, r4, #3
 80013dc:	0013      	movs	r3, r2
 80013de:	4323      	orrs	r3, r4
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x3a4>
 80013e2:	e186      	b.n	80016f2 <__aeabi_dadd+0x6b2>
 80013e4:	2580      	movs	r5, #128	@ 0x80
 80013e6:	032d      	lsls	r5, r5, #12
 80013e8:	4325      	orrs	r5, r4
 80013ea:	032d      	lsls	r5, r5, #12
 80013ec:	4cc3      	ldr	r4, [pc, #780]	@ (80016fc <__aeabi_dadd+0x6bc>)
 80013ee:	0b2d      	lsrs	r5, r5, #12
 80013f0:	e6be      	b.n	8001170 <__aeabi_dadd+0x130>
 80013f2:	4660      	mov	r0, ip
 80013f4:	4654      	mov	r4, sl
 80013f6:	000e      	movs	r6, r1
 80013f8:	0017      	movs	r7, r2
 80013fa:	08c5      	lsrs	r5, r0, #3
 80013fc:	e7d8      	b.n	80013b0 <__aeabi_dadd+0x370>
 80013fe:	4cc0      	ldr	r4, [pc, #768]	@ (8001700 <__aeabi_dadd+0x6c0>)
 8001400:	1aff      	subs	r7, r7, r3
 8001402:	4014      	ands	r4, r2
 8001404:	e696      	b.n	8001134 <__aeabi_dadd+0xf4>
 8001406:	4abf      	ldr	r2, [pc, #764]	@ (8001704 <__aeabi_dadd+0x6c4>)
 8001408:	1c79      	adds	r1, r7, #1
 800140a:	4211      	tst	r1, r2
 800140c:	d16b      	bne.n	80014e6 <__aeabi_dadd+0x4a6>
 800140e:	0022      	movs	r2, r4
 8001410:	4302      	orrs	r2, r0
 8001412:	2f00      	cmp	r7, #0
 8001414:	d000      	beq.n	8001418 <__aeabi_dadd+0x3d8>
 8001416:	e0db      	b.n	80015d0 <__aeabi_dadd+0x590>
 8001418:	2a00      	cmp	r2, #0
 800141a:	d100      	bne.n	800141e <__aeabi_dadd+0x3de>
 800141c:	e12d      	b.n	800167a <__aeabi_dadd+0x63a>
 800141e:	4662      	mov	r2, ip
 8001420:	4653      	mov	r3, sl
 8001422:	431a      	orrs	r2, r3
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x3e8>
 8001426:	e0b6      	b.n	8001596 <__aeabi_dadd+0x556>
 8001428:	4663      	mov	r3, ip
 800142a:	18c5      	adds	r5, r0, r3
 800142c:	4285      	cmp	r5, r0
 800142e:	4180      	sbcs	r0, r0
 8001430:	4454      	add	r4, sl
 8001432:	4240      	negs	r0, r0
 8001434:	1824      	adds	r4, r4, r0
 8001436:	0223      	lsls	r3, r4, #8
 8001438:	d502      	bpl.n	8001440 <__aeabi_dadd+0x400>
 800143a:	000f      	movs	r7, r1
 800143c:	4bb0      	ldr	r3, [pc, #704]	@ (8001700 <__aeabi_dadd+0x6c0>)
 800143e:	401c      	ands	r4, r3
 8001440:	003a      	movs	r2, r7
 8001442:	0028      	movs	r0, r5
 8001444:	e7d8      	b.n	80013f8 <__aeabi_dadd+0x3b8>
 8001446:	4662      	mov	r2, ip
 8001448:	1a85      	subs	r5, r0, r2
 800144a:	42a8      	cmp	r0, r5
 800144c:	4192      	sbcs	r2, r2
 800144e:	4653      	mov	r3, sl
 8001450:	4252      	negs	r2, r2
 8001452:	4691      	mov	r9, r2
 8001454:	1ae3      	subs	r3, r4, r3
 8001456:	001a      	movs	r2, r3
 8001458:	464b      	mov	r3, r9
 800145a:	1ad2      	subs	r2, r2, r3
 800145c:	0013      	movs	r3, r2
 800145e:	4691      	mov	r9, r2
 8001460:	021a      	lsls	r2, r3, #8
 8001462:	d454      	bmi.n	800150e <__aeabi_dadd+0x4ce>
 8001464:	464a      	mov	r2, r9
 8001466:	464c      	mov	r4, r9
 8001468:	432a      	orrs	r2, r5
 800146a:	d000      	beq.n	800146e <__aeabi_dadd+0x42e>
 800146c:	e640      	b.n	80010f0 <__aeabi_dadd+0xb0>
 800146e:	2600      	movs	r6, #0
 8001470:	2400      	movs	r4, #0
 8001472:	2500      	movs	r5, #0
 8001474:	e67c      	b.n	8001170 <__aeabi_dadd+0x130>
 8001476:	4da1      	ldr	r5, [pc, #644]	@ (80016fc <__aeabi_dadd+0x6bc>)
 8001478:	45a9      	cmp	r9, r5
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x43e>
 800147c:	e090      	b.n	80015a0 <__aeabi_dadd+0x560>
 800147e:	2501      	movs	r5, #1
 8001480:	2a38      	cmp	r2, #56	@ 0x38
 8001482:	dd00      	ble.n	8001486 <__aeabi_dadd+0x446>
 8001484:	e6ab      	b.n	80011de <__aeabi_dadd+0x19e>
 8001486:	2580      	movs	r5, #128	@ 0x80
 8001488:	042d      	lsls	r5, r5, #16
 800148a:	432c      	orrs	r4, r5
 800148c:	e695      	b.n	80011ba <__aeabi_dadd+0x17a>
 800148e:	0011      	movs	r1, r2
 8001490:	4655      	mov	r5, sl
 8001492:	3920      	subs	r1, #32
 8001494:	40cd      	lsrs	r5, r1
 8001496:	46a9      	mov	r9, r5
 8001498:	2a20      	cmp	r2, #32
 800149a:	d006      	beq.n	80014aa <__aeabi_dadd+0x46a>
 800149c:	2140      	movs	r1, #64	@ 0x40
 800149e:	4653      	mov	r3, sl
 80014a0:	1a8a      	subs	r2, r1, r2
 80014a2:	4093      	lsls	r3, r2
 80014a4:	4662      	mov	r2, ip
 80014a6:	431a      	orrs	r2, r3
 80014a8:	4694      	mov	ip, r2
 80014aa:	4665      	mov	r5, ip
 80014ac:	1e6b      	subs	r3, r5, #1
 80014ae:	419d      	sbcs	r5, r3
 80014b0:	464b      	mov	r3, r9
 80014b2:	431d      	orrs	r5, r3
 80014b4:	e612      	b.n	80010dc <__aeabi_dadd+0x9c>
 80014b6:	0021      	movs	r1, r4
 80014b8:	4301      	orrs	r1, r0
 80014ba:	d100      	bne.n	80014be <__aeabi_dadd+0x47e>
 80014bc:	e0c4      	b.n	8001648 <__aeabi_dadd+0x608>
 80014be:	1e51      	subs	r1, r2, #1
 80014c0:	2a01      	cmp	r2, #1
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dadd+0x486>
 80014c4:	e0fb      	b.n	80016be <__aeabi_dadd+0x67e>
 80014c6:	4d8d      	ldr	r5, [pc, #564]	@ (80016fc <__aeabi_dadd+0x6bc>)
 80014c8:	42aa      	cmp	r2, r5
 80014ca:	d100      	bne.n	80014ce <__aeabi_dadd+0x48e>
 80014cc:	e0b5      	b.n	800163a <__aeabi_dadd+0x5fa>
 80014ce:	2501      	movs	r5, #1
 80014d0:	2938      	cmp	r1, #56	@ 0x38
 80014d2:	dd00      	ble.n	80014d6 <__aeabi_dadd+0x496>
 80014d4:	e741      	b.n	800135a <__aeabi_dadd+0x31a>
 80014d6:	000a      	movs	r2, r1
 80014d8:	e72f      	b.n	800133a <__aeabi_dadd+0x2fa>
 80014da:	4c89      	ldr	r4, [pc, #548]	@ (8001700 <__aeabi_dadd+0x6c0>)
 80014dc:	1aff      	subs	r7, r7, r3
 80014de:	4014      	ands	r4, r2
 80014e0:	0762      	lsls	r2, r4, #29
 80014e2:	08e4      	lsrs	r4, r4, #3
 80014e4:	e76a      	b.n	80013bc <__aeabi_dadd+0x37c>
 80014e6:	4a85      	ldr	r2, [pc, #532]	@ (80016fc <__aeabi_dadd+0x6bc>)
 80014e8:	4291      	cmp	r1, r2
 80014ea:	d100      	bne.n	80014ee <__aeabi_dadd+0x4ae>
 80014ec:	e0e3      	b.n	80016b6 <__aeabi_dadd+0x676>
 80014ee:	4663      	mov	r3, ip
 80014f0:	18c2      	adds	r2, r0, r3
 80014f2:	4282      	cmp	r2, r0
 80014f4:	4180      	sbcs	r0, r0
 80014f6:	0023      	movs	r3, r4
 80014f8:	4240      	negs	r0, r0
 80014fa:	4453      	add	r3, sl
 80014fc:	181b      	adds	r3, r3, r0
 80014fe:	07dd      	lsls	r5, r3, #31
 8001500:	085c      	lsrs	r4, r3, #1
 8001502:	2307      	movs	r3, #7
 8001504:	0852      	lsrs	r2, r2, #1
 8001506:	4315      	orrs	r5, r2
 8001508:	000f      	movs	r7, r1
 800150a:	402b      	ands	r3, r5
 800150c:	e700      	b.n	8001310 <__aeabi_dadd+0x2d0>
 800150e:	4663      	mov	r3, ip
 8001510:	1a1d      	subs	r5, r3, r0
 8001512:	45ac      	cmp	ip, r5
 8001514:	4192      	sbcs	r2, r2
 8001516:	4653      	mov	r3, sl
 8001518:	4252      	negs	r2, r2
 800151a:	1b1c      	subs	r4, r3, r4
 800151c:	000e      	movs	r6, r1
 800151e:	4688      	mov	r8, r1
 8001520:	1aa4      	subs	r4, r4, r2
 8001522:	e5e5      	b.n	80010f0 <__aeabi_dadd+0xb0>
 8001524:	2d00      	cmp	r5, #0
 8001526:	d000      	beq.n	800152a <__aeabi_dadd+0x4ea>
 8001528:	e091      	b.n	800164e <__aeabi_dadd+0x60e>
 800152a:	2a00      	cmp	r2, #0
 800152c:	d138      	bne.n	80015a0 <__aeabi_dadd+0x560>
 800152e:	2480      	movs	r4, #128	@ 0x80
 8001530:	2600      	movs	r6, #0
 8001532:	0324      	lsls	r4, r4, #12
 8001534:	e756      	b.n	80013e4 <__aeabi_dadd+0x3a4>
 8001536:	4663      	mov	r3, ip
 8001538:	18c5      	adds	r5, r0, r3
 800153a:	4285      	cmp	r5, r0
 800153c:	4180      	sbcs	r0, r0
 800153e:	4454      	add	r4, sl
 8001540:	4240      	negs	r0, r0
 8001542:	1824      	adds	r4, r4, r0
 8001544:	2701      	movs	r7, #1
 8001546:	0223      	lsls	r3, r4, #8
 8001548:	d400      	bmi.n	800154c <__aeabi_dadd+0x50c>
 800154a:	e6df      	b.n	800130c <__aeabi_dadd+0x2cc>
 800154c:	2702      	movs	r7, #2
 800154e:	e687      	b.n	8001260 <__aeabi_dadd+0x220>
 8001550:	4663      	mov	r3, ip
 8001552:	1ac5      	subs	r5, r0, r3
 8001554:	42a8      	cmp	r0, r5
 8001556:	4180      	sbcs	r0, r0
 8001558:	4653      	mov	r3, sl
 800155a:	4240      	negs	r0, r0
 800155c:	1ae4      	subs	r4, r4, r3
 800155e:	2701      	movs	r7, #1
 8001560:	1a24      	subs	r4, r4, r0
 8001562:	e5c0      	b.n	80010e6 <__aeabi_dadd+0xa6>
 8001564:	0762      	lsls	r2, r4, #29
 8001566:	08c0      	lsrs	r0, r0, #3
 8001568:	4302      	orrs	r2, r0
 800156a:	08e4      	lsrs	r4, r4, #3
 800156c:	e736      	b.n	80013dc <__aeabi_dadd+0x39c>
 800156e:	0011      	movs	r1, r2
 8001570:	4653      	mov	r3, sl
 8001572:	3920      	subs	r1, #32
 8001574:	40cb      	lsrs	r3, r1
 8001576:	4699      	mov	r9, r3
 8001578:	2a20      	cmp	r2, #32
 800157a:	d006      	beq.n	800158a <__aeabi_dadd+0x54a>
 800157c:	2140      	movs	r1, #64	@ 0x40
 800157e:	4653      	mov	r3, sl
 8001580:	1a8a      	subs	r2, r1, r2
 8001582:	4093      	lsls	r3, r2
 8001584:	4662      	mov	r2, ip
 8001586:	431a      	orrs	r2, r3
 8001588:	4694      	mov	ip, r2
 800158a:	4665      	mov	r5, ip
 800158c:	1e6b      	subs	r3, r5, #1
 800158e:	419d      	sbcs	r5, r3
 8001590:	464b      	mov	r3, r9
 8001592:	431d      	orrs	r5, r3
 8001594:	e659      	b.n	800124a <__aeabi_dadd+0x20a>
 8001596:	0762      	lsls	r2, r4, #29
 8001598:	08c0      	lsrs	r0, r0, #3
 800159a:	4302      	orrs	r2, r0
 800159c:	08e4      	lsrs	r4, r4, #3
 800159e:	e70d      	b.n	80013bc <__aeabi_dadd+0x37c>
 80015a0:	4653      	mov	r3, sl
 80015a2:	075a      	lsls	r2, r3, #29
 80015a4:	4663      	mov	r3, ip
 80015a6:	08d8      	lsrs	r0, r3, #3
 80015a8:	4653      	mov	r3, sl
 80015aa:	000e      	movs	r6, r1
 80015ac:	4302      	orrs	r2, r0
 80015ae:	08dc      	lsrs	r4, r3, #3
 80015b0:	e714      	b.n	80013dc <__aeabi_dadd+0x39c>
 80015b2:	0015      	movs	r5, r2
 80015b4:	0026      	movs	r6, r4
 80015b6:	3d20      	subs	r5, #32
 80015b8:	40ee      	lsrs	r6, r5
 80015ba:	2a20      	cmp	r2, #32
 80015bc:	d003      	beq.n	80015c6 <__aeabi_dadd+0x586>
 80015be:	2540      	movs	r5, #64	@ 0x40
 80015c0:	1aaa      	subs	r2, r5, r2
 80015c2:	4094      	lsls	r4, r2
 80015c4:	4320      	orrs	r0, r4
 80015c6:	1e42      	subs	r2, r0, #1
 80015c8:	4190      	sbcs	r0, r2
 80015ca:	0005      	movs	r5, r0
 80015cc:	4335      	orrs	r5, r6
 80015ce:	e606      	b.n	80011de <__aeabi_dadd+0x19e>
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	d07c      	beq.n	80016ce <__aeabi_dadd+0x68e>
 80015d4:	4662      	mov	r2, ip
 80015d6:	4653      	mov	r3, sl
 80015d8:	08c0      	lsrs	r0, r0, #3
 80015da:	431a      	orrs	r2, r3
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dadd+0x5a0>
 80015de:	e6fa      	b.n	80013d6 <__aeabi_dadd+0x396>
 80015e0:	0762      	lsls	r2, r4, #29
 80015e2:	4310      	orrs	r0, r2
 80015e4:	2280      	movs	r2, #128	@ 0x80
 80015e6:	08e4      	lsrs	r4, r4, #3
 80015e8:	0312      	lsls	r2, r2, #12
 80015ea:	4214      	tst	r4, r2
 80015ec:	d008      	beq.n	8001600 <__aeabi_dadd+0x5c0>
 80015ee:	08d9      	lsrs	r1, r3, #3
 80015f0:	4211      	tst	r1, r2
 80015f2:	d105      	bne.n	8001600 <__aeabi_dadd+0x5c0>
 80015f4:	4663      	mov	r3, ip
 80015f6:	08d8      	lsrs	r0, r3, #3
 80015f8:	4653      	mov	r3, sl
 80015fa:	000c      	movs	r4, r1
 80015fc:	075b      	lsls	r3, r3, #29
 80015fe:	4318      	orrs	r0, r3
 8001600:	0f42      	lsrs	r2, r0, #29
 8001602:	00c0      	lsls	r0, r0, #3
 8001604:	08c0      	lsrs	r0, r0, #3
 8001606:	0752      	lsls	r2, r2, #29
 8001608:	4302      	orrs	r2, r0
 800160a:	e6e7      	b.n	80013dc <__aeabi_dadd+0x39c>
 800160c:	2a00      	cmp	r2, #0
 800160e:	d100      	bne.n	8001612 <__aeabi_dadd+0x5d2>
 8001610:	e72d      	b.n	800146e <__aeabi_dadd+0x42e>
 8001612:	4663      	mov	r3, ip
 8001614:	08d8      	lsrs	r0, r3, #3
 8001616:	4653      	mov	r3, sl
 8001618:	075a      	lsls	r2, r3, #29
 800161a:	000e      	movs	r6, r1
 800161c:	4302      	orrs	r2, r0
 800161e:	08dc      	lsrs	r4, r3, #3
 8001620:	e6cc      	b.n	80013bc <__aeabi_dadd+0x37c>
 8001622:	4663      	mov	r3, ip
 8001624:	1a1d      	subs	r5, r3, r0
 8001626:	45ac      	cmp	ip, r5
 8001628:	4192      	sbcs	r2, r2
 800162a:	4653      	mov	r3, sl
 800162c:	4252      	negs	r2, r2
 800162e:	1b1c      	subs	r4, r3, r4
 8001630:	000e      	movs	r6, r1
 8001632:	4688      	mov	r8, r1
 8001634:	1aa4      	subs	r4, r4, r2
 8001636:	3701      	adds	r7, #1
 8001638:	e555      	b.n	80010e6 <__aeabi_dadd+0xa6>
 800163a:	4663      	mov	r3, ip
 800163c:	08d9      	lsrs	r1, r3, #3
 800163e:	4653      	mov	r3, sl
 8001640:	075a      	lsls	r2, r3, #29
 8001642:	430a      	orrs	r2, r1
 8001644:	08dc      	lsrs	r4, r3, #3
 8001646:	e6c9      	b.n	80013dc <__aeabi_dadd+0x39c>
 8001648:	4660      	mov	r0, ip
 800164a:	4654      	mov	r4, sl
 800164c:	e6d4      	b.n	80013f8 <__aeabi_dadd+0x3b8>
 800164e:	08c0      	lsrs	r0, r0, #3
 8001650:	2a00      	cmp	r2, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dadd+0x616>
 8001654:	e6bf      	b.n	80013d6 <__aeabi_dadd+0x396>
 8001656:	0762      	lsls	r2, r4, #29
 8001658:	4310      	orrs	r0, r2
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	08e4      	lsrs	r4, r4, #3
 800165e:	0312      	lsls	r2, r2, #12
 8001660:	4214      	tst	r4, r2
 8001662:	d0cd      	beq.n	8001600 <__aeabi_dadd+0x5c0>
 8001664:	08dd      	lsrs	r5, r3, #3
 8001666:	4215      	tst	r5, r2
 8001668:	d1ca      	bne.n	8001600 <__aeabi_dadd+0x5c0>
 800166a:	4663      	mov	r3, ip
 800166c:	08d8      	lsrs	r0, r3, #3
 800166e:	4653      	mov	r3, sl
 8001670:	075b      	lsls	r3, r3, #29
 8001672:	000e      	movs	r6, r1
 8001674:	002c      	movs	r4, r5
 8001676:	4318      	orrs	r0, r3
 8001678:	e7c2      	b.n	8001600 <__aeabi_dadd+0x5c0>
 800167a:	4663      	mov	r3, ip
 800167c:	08d9      	lsrs	r1, r3, #3
 800167e:	4653      	mov	r3, sl
 8001680:	075a      	lsls	r2, r3, #29
 8001682:	430a      	orrs	r2, r1
 8001684:	08dc      	lsrs	r4, r3, #3
 8001686:	e699      	b.n	80013bc <__aeabi_dadd+0x37c>
 8001688:	4663      	mov	r3, ip
 800168a:	08d8      	lsrs	r0, r3, #3
 800168c:	4653      	mov	r3, sl
 800168e:	075a      	lsls	r2, r3, #29
 8001690:	000e      	movs	r6, r1
 8001692:	4302      	orrs	r2, r0
 8001694:	08dc      	lsrs	r4, r3, #3
 8001696:	e6a1      	b.n	80013dc <__aeabi_dadd+0x39c>
 8001698:	0011      	movs	r1, r2
 800169a:	0027      	movs	r7, r4
 800169c:	3920      	subs	r1, #32
 800169e:	40cf      	lsrs	r7, r1
 80016a0:	2a20      	cmp	r2, #32
 80016a2:	d003      	beq.n	80016ac <__aeabi_dadd+0x66c>
 80016a4:	2140      	movs	r1, #64	@ 0x40
 80016a6:	1a8a      	subs	r2, r1, r2
 80016a8:	4094      	lsls	r4, r2
 80016aa:	4320      	orrs	r0, r4
 80016ac:	1e42      	subs	r2, r0, #1
 80016ae:	4190      	sbcs	r0, r2
 80016b0:	0005      	movs	r5, r0
 80016b2:	433d      	orrs	r5, r7
 80016b4:	e651      	b.n	800135a <__aeabi_dadd+0x31a>
 80016b6:	000c      	movs	r4, r1
 80016b8:	2500      	movs	r5, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	e558      	b.n	8001170 <__aeabi_dadd+0x130>
 80016be:	4460      	add	r0, ip
 80016c0:	4560      	cmp	r0, ip
 80016c2:	4192      	sbcs	r2, r2
 80016c4:	4454      	add	r4, sl
 80016c6:	4252      	negs	r2, r2
 80016c8:	0005      	movs	r5, r0
 80016ca:	18a4      	adds	r4, r4, r2
 80016cc:	e73a      	b.n	8001544 <__aeabi_dadd+0x504>
 80016ce:	4653      	mov	r3, sl
 80016d0:	075a      	lsls	r2, r3, #29
 80016d2:	4663      	mov	r3, ip
 80016d4:	08d9      	lsrs	r1, r3, #3
 80016d6:	4653      	mov	r3, sl
 80016d8:	430a      	orrs	r2, r1
 80016da:	08dc      	lsrs	r4, r3, #3
 80016dc:	e67e      	b.n	80013dc <__aeabi_dadd+0x39c>
 80016de:	001a      	movs	r2, r3
 80016e0:	001c      	movs	r4, r3
 80016e2:	432a      	orrs	r2, r5
 80016e4:	d000      	beq.n	80016e8 <__aeabi_dadd+0x6a8>
 80016e6:	e6ab      	b.n	8001440 <__aeabi_dadd+0x400>
 80016e8:	e6c1      	b.n	800146e <__aeabi_dadd+0x42e>
 80016ea:	2120      	movs	r1, #32
 80016ec:	2500      	movs	r5, #0
 80016ee:	1a09      	subs	r1, r1, r0
 80016f0:	e519      	b.n	8001126 <__aeabi_dadd+0xe6>
 80016f2:	2200      	movs	r2, #0
 80016f4:	2500      	movs	r5, #0
 80016f6:	4c01      	ldr	r4, [pc, #4]	@ (80016fc <__aeabi_dadd+0x6bc>)
 80016f8:	e53a      	b.n	8001170 <__aeabi_dadd+0x130>
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	000007ff 	.word	0x000007ff
 8001700:	ff7fffff 	.word	0xff7fffff
 8001704:	000007fe 	.word	0x000007fe

08001708 <__aeabi_ddiv>:
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	46de      	mov	lr, fp
 800170c:	4645      	mov	r5, r8
 800170e:	4657      	mov	r7, sl
 8001710:	464e      	mov	r6, r9
 8001712:	b5e0      	push	{r5, r6, r7, lr}
 8001714:	b087      	sub	sp, #28
 8001716:	9200      	str	r2, [sp, #0]
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	030b      	lsls	r3, r1, #12
 800171c:	0b1b      	lsrs	r3, r3, #12
 800171e:	469b      	mov	fp, r3
 8001720:	0fca      	lsrs	r2, r1, #31
 8001722:	004b      	lsls	r3, r1, #1
 8001724:	0004      	movs	r4, r0
 8001726:	4680      	mov	r8, r0
 8001728:	0d5b      	lsrs	r3, r3, #21
 800172a:	9202      	str	r2, [sp, #8]
 800172c:	d100      	bne.n	8001730 <__aeabi_ddiv+0x28>
 800172e:	e16a      	b.n	8001a06 <__aeabi_ddiv+0x2fe>
 8001730:	4ad4      	ldr	r2, [pc, #848]	@ (8001a84 <__aeabi_ddiv+0x37c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d100      	bne.n	8001738 <__aeabi_ddiv+0x30>
 8001736:	e18c      	b.n	8001a52 <__aeabi_ddiv+0x34a>
 8001738:	4659      	mov	r1, fp
 800173a:	0f42      	lsrs	r2, r0, #29
 800173c:	00c9      	lsls	r1, r1, #3
 800173e:	430a      	orrs	r2, r1
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	0409      	lsls	r1, r1, #16
 8001744:	4311      	orrs	r1, r2
 8001746:	00c2      	lsls	r2, r0, #3
 8001748:	4690      	mov	r8, r2
 800174a:	4acf      	ldr	r2, [pc, #828]	@ (8001a88 <__aeabi_ddiv+0x380>)
 800174c:	4689      	mov	r9, r1
 800174e:	4692      	mov	sl, r2
 8001750:	449a      	add	sl, r3
 8001752:	2300      	movs	r3, #0
 8001754:	2400      	movs	r4, #0
 8001756:	9303      	str	r3, [sp, #12]
 8001758:	9e00      	ldr	r6, [sp, #0]
 800175a:	9f01      	ldr	r7, [sp, #4]
 800175c:	033b      	lsls	r3, r7, #12
 800175e:	0b1b      	lsrs	r3, r3, #12
 8001760:	469b      	mov	fp, r3
 8001762:	007b      	lsls	r3, r7, #1
 8001764:	0030      	movs	r0, r6
 8001766:	0d5b      	lsrs	r3, r3, #21
 8001768:	0ffd      	lsrs	r5, r7, #31
 800176a:	2b00      	cmp	r3, #0
 800176c:	d100      	bne.n	8001770 <__aeabi_ddiv+0x68>
 800176e:	e128      	b.n	80019c2 <__aeabi_ddiv+0x2ba>
 8001770:	4ac4      	ldr	r2, [pc, #784]	@ (8001a84 <__aeabi_ddiv+0x37c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d100      	bne.n	8001778 <__aeabi_ddiv+0x70>
 8001776:	e177      	b.n	8001a68 <__aeabi_ddiv+0x360>
 8001778:	4659      	mov	r1, fp
 800177a:	0f72      	lsrs	r2, r6, #29
 800177c:	00c9      	lsls	r1, r1, #3
 800177e:	430a      	orrs	r2, r1
 8001780:	2180      	movs	r1, #128	@ 0x80
 8001782:	0409      	lsls	r1, r1, #16
 8001784:	4311      	orrs	r1, r2
 8001786:	468b      	mov	fp, r1
 8001788:	49bf      	ldr	r1, [pc, #764]	@ (8001a88 <__aeabi_ddiv+0x380>)
 800178a:	00f2      	lsls	r2, r6, #3
 800178c:	468c      	mov	ip, r1
 800178e:	4651      	mov	r1, sl
 8001790:	4463      	add	r3, ip
 8001792:	1acb      	subs	r3, r1, r3
 8001794:	469a      	mov	sl, r3
 8001796:	2300      	movs	r3, #0
 8001798:	9e02      	ldr	r6, [sp, #8]
 800179a:	406e      	eors	r6, r5
 800179c:	2c0f      	cmp	r4, #15
 800179e:	d827      	bhi.n	80017f0 <__aeabi_ddiv+0xe8>
 80017a0:	49ba      	ldr	r1, [pc, #744]	@ (8001a8c <__aeabi_ddiv+0x384>)
 80017a2:	00a4      	lsls	r4, r4, #2
 80017a4:	5909      	ldr	r1, [r1, r4]
 80017a6:	468f      	mov	pc, r1
 80017a8:	46cb      	mov	fp, r9
 80017aa:	4642      	mov	r2, r8
 80017ac:	9e02      	ldr	r6, [sp, #8]
 80017ae:	9b03      	ldr	r3, [sp, #12]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d016      	beq.n	80017e2 <__aeabi_ddiv+0xda>
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d100      	bne.n	80017ba <__aeabi_ddiv+0xb2>
 80017b8:	e2a6      	b.n	8001d08 <__aeabi_ddiv+0x600>
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d000      	beq.n	80017c0 <__aeabi_ddiv+0xb8>
 80017be:	e0df      	b.n	8001980 <__aeabi_ddiv+0x278>
 80017c0:	2200      	movs	r2, #0
 80017c2:	2300      	movs	r3, #0
 80017c4:	2400      	movs	r4, #0
 80017c6:	4690      	mov	r8, r2
 80017c8:	051b      	lsls	r3, r3, #20
 80017ca:	4323      	orrs	r3, r4
 80017cc:	07f6      	lsls	r6, r6, #31
 80017ce:	4333      	orrs	r3, r6
 80017d0:	4640      	mov	r0, r8
 80017d2:	0019      	movs	r1, r3
 80017d4:	b007      	add	sp, #28
 80017d6:	bcf0      	pop	{r4, r5, r6, r7}
 80017d8:	46bb      	mov	fp, r7
 80017da:	46b2      	mov	sl, r6
 80017dc:	46a9      	mov	r9, r5
 80017de:	46a0      	mov	r8, r4
 80017e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e2:	2200      	movs	r2, #0
 80017e4:	2400      	movs	r4, #0
 80017e6:	4690      	mov	r8, r2
 80017e8:	4ba6      	ldr	r3, [pc, #664]	@ (8001a84 <__aeabi_ddiv+0x37c>)
 80017ea:	e7ed      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 80017ec:	002e      	movs	r6, r5
 80017ee:	e7df      	b.n	80017b0 <__aeabi_ddiv+0xa8>
 80017f0:	45cb      	cmp	fp, r9
 80017f2:	d200      	bcs.n	80017f6 <__aeabi_ddiv+0xee>
 80017f4:	e1d4      	b.n	8001ba0 <__aeabi_ddiv+0x498>
 80017f6:	d100      	bne.n	80017fa <__aeabi_ddiv+0xf2>
 80017f8:	e1cf      	b.n	8001b9a <__aeabi_ddiv+0x492>
 80017fa:	2301      	movs	r3, #1
 80017fc:	425b      	negs	r3, r3
 80017fe:	469c      	mov	ip, r3
 8001800:	4644      	mov	r4, r8
 8001802:	4648      	mov	r0, r9
 8001804:	2700      	movs	r7, #0
 8001806:	44e2      	add	sl, ip
 8001808:	465b      	mov	r3, fp
 800180a:	0e15      	lsrs	r5, r2, #24
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	431d      	orrs	r5, r3
 8001810:	0c19      	lsrs	r1, r3, #16
 8001812:	042b      	lsls	r3, r5, #16
 8001814:	0212      	lsls	r2, r2, #8
 8001816:	9500      	str	r5, [sp, #0]
 8001818:	0c1d      	lsrs	r5, r3, #16
 800181a:	4691      	mov	r9, r2
 800181c:	9102      	str	r1, [sp, #8]
 800181e:	9503      	str	r5, [sp, #12]
 8001820:	f7fe fd1e 	bl	8000260 <__aeabi_uidivmod>
 8001824:	0002      	movs	r2, r0
 8001826:	436a      	muls	r2, r5
 8001828:	040b      	lsls	r3, r1, #16
 800182a:	0c21      	lsrs	r1, r4, #16
 800182c:	4680      	mov	r8, r0
 800182e:	4319      	orrs	r1, r3
 8001830:	428a      	cmp	r2, r1
 8001832:	d909      	bls.n	8001848 <__aeabi_ddiv+0x140>
 8001834:	9d00      	ldr	r5, [sp, #0]
 8001836:	2301      	movs	r3, #1
 8001838:	46ac      	mov	ip, r5
 800183a:	425b      	negs	r3, r3
 800183c:	4461      	add	r1, ip
 800183e:	469c      	mov	ip, r3
 8001840:	44e0      	add	r8, ip
 8001842:	428d      	cmp	r5, r1
 8001844:	d800      	bhi.n	8001848 <__aeabi_ddiv+0x140>
 8001846:	e1fb      	b.n	8001c40 <__aeabi_ddiv+0x538>
 8001848:	1a88      	subs	r0, r1, r2
 800184a:	9902      	ldr	r1, [sp, #8]
 800184c:	f7fe fd08 	bl	8000260 <__aeabi_uidivmod>
 8001850:	9a03      	ldr	r2, [sp, #12]
 8001852:	0424      	lsls	r4, r4, #16
 8001854:	4342      	muls	r2, r0
 8001856:	0409      	lsls	r1, r1, #16
 8001858:	0c24      	lsrs	r4, r4, #16
 800185a:	0003      	movs	r3, r0
 800185c:	430c      	orrs	r4, r1
 800185e:	42a2      	cmp	r2, r4
 8001860:	d906      	bls.n	8001870 <__aeabi_ddiv+0x168>
 8001862:	9900      	ldr	r1, [sp, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	468c      	mov	ip, r1
 8001868:	4464      	add	r4, ip
 800186a:	42a1      	cmp	r1, r4
 800186c:	d800      	bhi.n	8001870 <__aeabi_ddiv+0x168>
 800186e:	e1e1      	b.n	8001c34 <__aeabi_ddiv+0x52c>
 8001870:	1aa0      	subs	r0, r4, r2
 8001872:	4642      	mov	r2, r8
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	4693      	mov	fp, r2
 800187a:	464b      	mov	r3, r9
 800187c:	4659      	mov	r1, fp
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	001d      	movs	r5, r3
 8001882:	9304      	str	r3, [sp, #16]
 8001884:	040b      	lsls	r3, r1, #16
 8001886:	4649      	mov	r1, r9
 8001888:	0409      	lsls	r1, r1, #16
 800188a:	0c09      	lsrs	r1, r1, #16
 800188c:	000c      	movs	r4, r1
 800188e:	0c1b      	lsrs	r3, r3, #16
 8001890:	435c      	muls	r4, r3
 8001892:	0c12      	lsrs	r2, r2, #16
 8001894:	436b      	muls	r3, r5
 8001896:	4688      	mov	r8, r1
 8001898:	4351      	muls	r1, r2
 800189a:	436a      	muls	r2, r5
 800189c:	0c25      	lsrs	r5, r4, #16
 800189e:	46ac      	mov	ip, r5
 80018a0:	185b      	adds	r3, r3, r1
 80018a2:	4463      	add	r3, ip
 80018a4:	4299      	cmp	r1, r3
 80018a6:	d903      	bls.n	80018b0 <__aeabi_ddiv+0x1a8>
 80018a8:	2180      	movs	r1, #128	@ 0x80
 80018aa:	0249      	lsls	r1, r1, #9
 80018ac:	468c      	mov	ip, r1
 80018ae:	4462      	add	r2, ip
 80018b0:	0c19      	lsrs	r1, r3, #16
 80018b2:	0424      	lsls	r4, r4, #16
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	0c24      	lsrs	r4, r4, #16
 80018b8:	188a      	adds	r2, r1, r2
 80018ba:	191c      	adds	r4, r3, r4
 80018bc:	4290      	cmp	r0, r2
 80018be:	d302      	bcc.n	80018c6 <__aeabi_ddiv+0x1be>
 80018c0:	d116      	bne.n	80018f0 <__aeabi_ddiv+0x1e8>
 80018c2:	42a7      	cmp	r7, r4
 80018c4:	d214      	bcs.n	80018f0 <__aeabi_ddiv+0x1e8>
 80018c6:	465b      	mov	r3, fp
 80018c8:	9d00      	ldr	r5, [sp, #0]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	444f      	add	r7, r9
 80018ce:	9305      	str	r3, [sp, #20]
 80018d0:	454f      	cmp	r7, r9
 80018d2:	419b      	sbcs	r3, r3
 80018d4:	46ac      	mov	ip, r5
 80018d6:	425b      	negs	r3, r3
 80018d8:	4463      	add	r3, ip
 80018da:	18c0      	adds	r0, r0, r3
 80018dc:	4285      	cmp	r5, r0
 80018de:	d300      	bcc.n	80018e2 <__aeabi_ddiv+0x1da>
 80018e0:	e1a1      	b.n	8001c26 <__aeabi_ddiv+0x51e>
 80018e2:	4282      	cmp	r2, r0
 80018e4:	d900      	bls.n	80018e8 <__aeabi_ddiv+0x1e0>
 80018e6:	e1f6      	b.n	8001cd6 <__aeabi_ddiv+0x5ce>
 80018e8:	d100      	bne.n	80018ec <__aeabi_ddiv+0x1e4>
 80018ea:	e1f1      	b.n	8001cd0 <__aeabi_ddiv+0x5c8>
 80018ec:	9b05      	ldr	r3, [sp, #20]
 80018ee:	469b      	mov	fp, r3
 80018f0:	1b3c      	subs	r4, r7, r4
 80018f2:	42a7      	cmp	r7, r4
 80018f4:	41bf      	sbcs	r7, r7
 80018f6:	9d00      	ldr	r5, [sp, #0]
 80018f8:	1a80      	subs	r0, r0, r2
 80018fa:	427f      	negs	r7, r7
 80018fc:	1bc0      	subs	r0, r0, r7
 80018fe:	4285      	cmp	r5, r0
 8001900:	d100      	bne.n	8001904 <__aeabi_ddiv+0x1fc>
 8001902:	e1d0      	b.n	8001ca6 <__aeabi_ddiv+0x59e>
 8001904:	9902      	ldr	r1, [sp, #8]
 8001906:	f7fe fcab 	bl	8000260 <__aeabi_uidivmod>
 800190a:	9a03      	ldr	r2, [sp, #12]
 800190c:	040b      	lsls	r3, r1, #16
 800190e:	4342      	muls	r2, r0
 8001910:	0c21      	lsrs	r1, r4, #16
 8001912:	0007      	movs	r7, r0
 8001914:	4319      	orrs	r1, r3
 8001916:	428a      	cmp	r2, r1
 8001918:	d900      	bls.n	800191c <__aeabi_ddiv+0x214>
 800191a:	e178      	b.n	8001c0e <__aeabi_ddiv+0x506>
 800191c:	1a88      	subs	r0, r1, r2
 800191e:	9902      	ldr	r1, [sp, #8]
 8001920:	f7fe fc9e 	bl	8000260 <__aeabi_uidivmod>
 8001924:	9a03      	ldr	r2, [sp, #12]
 8001926:	0424      	lsls	r4, r4, #16
 8001928:	4342      	muls	r2, r0
 800192a:	0409      	lsls	r1, r1, #16
 800192c:	0c24      	lsrs	r4, r4, #16
 800192e:	0003      	movs	r3, r0
 8001930:	430c      	orrs	r4, r1
 8001932:	42a2      	cmp	r2, r4
 8001934:	d900      	bls.n	8001938 <__aeabi_ddiv+0x230>
 8001936:	e15d      	b.n	8001bf4 <__aeabi_ddiv+0x4ec>
 8001938:	4641      	mov	r1, r8
 800193a:	1aa4      	subs	r4, r4, r2
 800193c:	043a      	lsls	r2, r7, #16
 800193e:	431a      	orrs	r2, r3
 8001940:	9d04      	ldr	r5, [sp, #16]
 8001942:	0413      	lsls	r3, r2, #16
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	4359      	muls	r1, r3
 8001948:	4647      	mov	r7, r8
 800194a:	436b      	muls	r3, r5
 800194c:	469c      	mov	ip, r3
 800194e:	0c10      	lsrs	r0, r2, #16
 8001950:	4347      	muls	r7, r0
 8001952:	0c0b      	lsrs	r3, r1, #16
 8001954:	44bc      	add	ip, r7
 8001956:	4463      	add	r3, ip
 8001958:	4368      	muls	r0, r5
 800195a:	429f      	cmp	r7, r3
 800195c:	d903      	bls.n	8001966 <__aeabi_ddiv+0x25e>
 800195e:	2580      	movs	r5, #128	@ 0x80
 8001960:	026d      	lsls	r5, r5, #9
 8001962:	46ac      	mov	ip, r5
 8001964:	4460      	add	r0, ip
 8001966:	0c1f      	lsrs	r7, r3, #16
 8001968:	0409      	lsls	r1, r1, #16
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	0c09      	lsrs	r1, r1, #16
 800196e:	183f      	adds	r7, r7, r0
 8001970:	185b      	adds	r3, r3, r1
 8001972:	42bc      	cmp	r4, r7
 8001974:	d200      	bcs.n	8001978 <__aeabi_ddiv+0x270>
 8001976:	e102      	b.n	8001b7e <__aeabi_ddiv+0x476>
 8001978:	d100      	bne.n	800197c <__aeabi_ddiv+0x274>
 800197a:	e0fd      	b.n	8001b78 <__aeabi_ddiv+0x470>
 800197c:	2301      	movs	r3, #1
 800197e:	431a      	orrs	r2, r3
 8001980:	4b43      	ldr	r3, [pc, #268]	@ (8001a90 <__aeabi_ddiv+0x388>)
 8001982:	4453      	add	r3, sl
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_ddiv+0x282>
 8001988:	e0ae      	b.n	8001ae8 <__aeabi_ddiv+0x3e0>
 800198a:	0751      	lsls	r1, r2, #29
 800198c:	d000      	beq.n	8001990 <__aeabi_ddiv+0x288>
 800198e:	e198      	b.n	8001cc2 <__aeabi_ddiv+0x5ba>
 8001990:	4659      	mov	r1, fp
 8001992:	01c9      	lsls	r1, r1, #7
 8001994:	d506      	bpl.n	80019a4 <__aeabi_ddiv+0x29c>
 8001996:	4659      	mov	r1, fp
 8001998:	4b3e      	ldr	r3, [pc, #248]	@ (8001a94 <__aeabi_ddiv+0x38c>)
 800199a:	4019      	ands	r1, r3
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	468b      	mov	fp, r1
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4453      	add	r3, sl
 80019a4:	493c      	ldr	r1, [pc, #240]	@ (8001a98 <__aeabi_ddiv+0x390>)
 80019a6:	428b      	cmp	r3, r1
 80019a8:	dd00      	ble.n	80019ac <__aeabi_ddiv+0x2a4>
 80019aa:	e71a      	b.n	80017e2 <__aeabi_ddiv+0xda>
 80019ac:	4659      	mov	r1, fp
 80019ae:	08d2      	lsrs	r2, r2, #3
 80019b0:	0749      	lsls	r1, r1, #29
 80019b2:	4311      	orrs	r1, r2
 80019b4:	465a      	mov	r2, fp
 80019b6:	055b      	lsls	r3, r3, #21
 80019b8:	0254      	lsls	r4, r2, #9
 80019ba:	4688      	mov	r8, r1
 80019bc:	0b24      	lsrs	r4, r4, #12
 80019be:	0d5b      	lsrs	r3, r3, #21
 80019c0:	e702      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 80019c2:	465a      	mov	r2, fp
 80019c4:	9b00      	ldr	r3, [sp, #0]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	d100      	bne.n	80019cc <__aeabi_ddiv+0x2c4>
 80019ca:	e07e      	b.n	8001aca <__aeabi_ddiv+0x3c2>
 80019cc:	465b      	mov	r3, fp
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d100      	bne.n	80019d4 <__aeabi_ddiv+0x2cc>
 80019d2:	e100      	b.n	8001bd6 <__aeabi_ddiv+0x4ce>
 80019d4:	4658      	mov	r0, fp
 80019d6:	f001 fa99 	bl	8002f0c <__clzsi2>
 80019da:	0002      	movs	r2, r0
 80019dc:	0003      	movs	r3, r0
 80019de:	3a0b      	subs	r2, #11
 80019e0:	271d      	movs	r7, #29
 80019e2:	9e00      	ldr	r6, [sp, #0]
 80019e4:	1aba      	subs	r2, r7, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	4658      	mov	r0, fp
 80019ea:	40d6      	lsrs	r6, r2
 80019ec:	3908      	subs	r1, #8
 80019ee:	4088      	lsls	r0, r1
 80019f0:	0032      	movs	r2, r6
 80019f2:	4302      	orrs	r2, r0
 80019f4:	4693      	mov	fp, r2
 80019f6:	9a00      	ldr	r2, [sp, #0]
 80019f8:	408a      	lsls	r2, r1
 80019fa:	4928      	ldr	r1, [pc, #160]	@ (8001a9c <__aeabi_ddiv+0x394>)
 80019fc:	4453      	add	r3, sl
 80019fe:	468a      	mov	sl, r1
 8001a00:	449a      	add	sl, r3
 8001a02:	2300      	movs	r3, #0
 8001a04:	e6c8      	b.n	8001798 <__aeabi_ddiv+0x90>
 8001a06:	465b      	mov	r3, fp
 8001a08:	4303      	orrs	r3, r0
 8001a0a:	4699      	mov	r9, r3
 8001a0c:	d056      	beq.n	8001abc <__aeabi_ddiv+0x3b4>
 8001a0e:	465b      	mov	r3, fp
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_ddiv+0x30e>
 8001a14:	e0cd      	b.n	8001bb2 <__aeabi_ddiv+0x4aa>
 8001a16:	4658      	mov	r0, fp
 8001a18:	f001 fa78 	bl	8002f0c <__clzsi2>
 8001a1c:	230b      	movs	r3, #11
 8001a1e:	425b      	negs	r3, r3
 8001a20:	469c      	mov	ip, r3
 8001a22:	0002      	movs	r2, r0
 8001a24:	4484      	add	ip, r0
 8001a26:	4666      	mov	r6, ip
 8001a28:	231d      	movs	r3, #29
 8001a2a:	1b9b      	subs	r3, r3, r6
 8001a2c:	0026      	movs	r6, r4
 8001a2e:	0011      	movs	r1, r2
 8001a30:	4658      	mov	r0, fp
 8001a32:	40de      	lsrs	r6, r3
 8001a34:	3908      	subs	r1, #8
 8001a36:	4088      	lsls	r0, r1
 8001a38:	0033      	movs	r3, r6
 8001a3a:	4303      	orrs	r3, r0
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	0023      	movs	r3, r4
 8001a40:	408b      	lsls	r3, r1
 8001a42:	4698      	mov	r8, r3
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <__aeabi_ddiv+0x398>)
 8001a46:	2400      	movs	r4, #0
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	469a      	mov	sl, r3
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9303      	str	r3, [sp, #12]
 8001a50:	e682      	b.n	8001758 <__aeabi_ddiv+0x50>
 8001a52:	465a      	mov	r2, fp
 8001a54:	4302      	orrs	r2, r0
 8001a56:	4691      	mov	r9, r2
 8001a58:	d12a      	bne.n	8001ab0 <__aeabi_ddiv+0x3a8>
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	469a      	mov	sl, r3
 8001a5e:	2302      	movs	r3, #2
 8001a60:	4690      	mov	r8, r2
 8001a62:	2408      	movs	r4, #8
 8001a64:	9303      	str	r3, [sp, #12]
 8001a66:	e677      	b.n	8001758 <__aeabi_ddiv+0x50>
 8001a68:	465a      	mov	r2, fp
 8001a6a:	9b00      	ldr	r3, [sp, #0]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <__aeabi_ddiv+0x39c>)
 8001a70:	469c      	mov	ip, r3
 8001a72:	44e2      	add	sl, ip
 8001a74:	2a00      	cmp	r2, #0
 8001a76:	d117      	bne.n	8001aa8 <__aeabi_ddiv+0x3a0>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	431c      	orrs	r4, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	469b      	mov	fp, r3
 8001a80:	3302      	adds	r3, #2
 8001a82:	e689      	b.n	8001798 <__aeabi_ddiv+0x90>
 8001a84:	000007ff 	.word	0x000007ff
 8001a88:	fffffc01 	.word	0xfffffc01
 8001a8c:	0800d654 	.word	0x0800d654
 8001a90:	000003ff 	.word	0x000003ff
 8001a94:	feffffff 	.word	0xfeffffff
 8001a98:	000007fe 	.word	0x000007fe
 8001a9c:	000003f3 	.word	0x000003f3
 8001aa0:	fffffc0d 	.word	0xfffffc0d
 8001aa4:	fffff801 	.word	0xfffff801
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	0032      	movs	r2, r6
 8001aac:	431c      	orrs	r4, r3
 8001aae:	e673      	b.n	8001798 <__aeabi_ddiv+0x90>
 8001ab0:	469a      	mov	sl, r3
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	46d9      	mov	r9, fp
 8001ab6:	240c      	movs	r4, #12
 8001ab8:	9303      	str	r3, [sp, #12]
 8001aba:	e64d      	b.n	8001758 <__aeabi_ddiv+0x50>
 8001abc:	2300      	movs	r3, #0
 8001abe:	4698      	mov	r8, r3
 8001ac0:	469a      	mov	sl, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	2404      	movs	r4, #4
 8001ac6:	9303      	str	r3, [sp, #12]
 8001ac8:	e646      	b.n	8001758 <__aeabi_ddiv+0x50>
 8001aca:	2301      	movs	r3, #1
 8001acc:	431c      	orrs	r4, r3
 8001ace:	2300      	movs	r3, #0
 8001ad0:	469b      	mov	fp, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	e660      	b.n	8001798 <__aeabi_ddiv+0x90>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2480      	movs	r4, #128	@ 0x80
 8001ada:	4698      	mov	r8, r3
 8001adc:	2600      	movs	r6, #0
 8001ade:	4b92      	ldr	r3, [pc, #584]	@ (8001d28 <__aeabi_ddiv+0x620>)
 8001ae0:	0324      	lsls	r4, r4, #12
 8001ae2:	e671      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	2101      	movs	r1, #1
 8001aea:	1ac9      	subs	r1, r1, r3
 8001aec:	2938      	cmp	r1, #56	@ 0x38
 8001aee:	dd00      	ble.n	8001af2 <__aeabi_ddiv+0x3ea>
 8001af0:	e666      	b.n	80017c0 <__aeabi_ddiv+0xb8>
 8001af2:	291f      	cmp	r1, #31
 8001af4:	dc00      	bgt.n	8001af8 <__aeabi_ddiv+0x3f0>
 8001af6:	e0ab      	b.n	8001c50 <__aeabi_ddiv+0x548>
 8001af8:	201f      	movs	r0, #31
 8001afa:	4240      	negs	r0, r0
 8001afc:	1ac3      	subs	r3, r0, r3
 8001afe:	4658      	mov	r0, fp
 8001b00:	40d8      	lsrs	r0, r3
 8001b02:	0003      	movs	r3, r0
 8001b04:	2920      	cmp	r1, #32
 8001b06:	d004      	beq.n	8001b12 <__aeabi_ddiv+0x40a>
 8001b08:	4658      	mov	r0, fp
 8001b0a:	4988      	ldr	r1, [pc, #544]	@ (8001d2c <__aeabi_ddiv+0x624>)
 8001b0c:	4451      	add	r1, sl
 8001b0e:	4088      	lsls	r0, r1
 8001b10:	4302      	orrs	r2, r0
 8001b12:	1e51      	subs	r1, r2, #1
 8001b14:	418a      	sbcs	r2, r1
 8001b16:	431a      	orrs	r2, r3
 8001b18:	2307      	movs	r3, #7
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	4011      	ands	r1, r2
 8001b20:	4213      	tst	r3, r2
 8001b22:	d00c      	beq.n	8001b3e <__aeabi_ddiv+0x436>
 8001b24:	230f      	movs	r3, #15
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_ddiv+0x426>
 8001b2c:	e0f9      	b.n	8001d22 <__aeabi_ddiv+0x61a>
 8001b2e:	1d11      	adds	r1, r2, #4
 8001b30:	4291      	cmp	r1, r2
 8001b32:	419b      	sbcs	r3, r3
 8001b34:	000a      	movs	r2, r1
 8001b36:	425b      	negs	r3, r3
 8001b38:	0759      	lsls	r1, r3, #29
 8001b3a:	025b      	lsls	r3, r3, #9
 8001b3c:	0b1c      	lsrs	r4, r3, #12
 8001b3e:	08d2      	lsrs	r2, r2, #3
 8001b40:	430a      	orrs	r2, r1
 8001b42:	4690      	mov	r8, r2
 8001b44:	2300      	movs	r3, #0
 8001b46:	e63f      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001b48:	2480      	movs	r4, #128	@ 0x80
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	0324      	lsls	r4, r4, #12
 8001b4e:	4223      	tst	r3, r4
 8001b50:	d009      	beq.n	8001b66 <__aeabi_ddiv+0x45e>
 8001b52:	465b      	mov	r3, fp
 8001b54:	4223      	tst	r3, r4
 8001b56:	d106      	bne.n	8001b66 <__aeabi_ddiv+0x45e>
 8001b58:	431c      	orrs	r4, r3
 8001b5a:	0324      	lsls	r4, r4, #12
 8001b5c:	002e      	movs	r6, r5
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4b71      	ldr	r3, [pc, #452]	@ (8001d28 <__aeabi_ddiv+0x620>)
 8001b62:	0b24      	lsrs	r4, r4, #12
 8001b64:	e630      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001b66:	2480      	movs	r4, #128	@ 0x80
 8001b68:	464b      	mov	r3, r9
 8001b6a:	0324      	lsls	r4, r4, #12
 8001b6c:	431c      	orrs	r4, r3
 8001b6e:	0324      	lsls	r4, r4, #12
 8001b70:	9e02      	ldr	r6, [sp, #8]
 8001b72:	4b6d      	ldr	r3, [pc, #436]	@ (8001d28 <__aeabi_ddiv+0x620>)
 8001b74:	0b24      	lsrs	r4, r4, #12
 8001b76:	e627      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x476>
 8001b7c:	e700      	b.n	8001980 <__aeabi_ddiv+0x278>
 8001b7e:	9800      	ldr	r0, [sp, #0]
 8001b80:	1e51      	subs	r1, r2, #1
 8001b82:	4684      	mov	ip, r0
 8001b84:	4464      	add	r4, ip
 8001b86:	4284      	cmp	r4, r0
 8001b88:	d200      	bcs.n	8001b8c <__aeabi_ddiv+0x484>
 8001b8a:	e084      	b.n	8001c96 <__aeabi_ddiv+0x58e>
 8001b8c:	42bc      	cmp	r4, r7
 8001b8e:	d200      	bcs.n	8001b92 <__aeabi_ddiv+0x48a>
 8001b90:	e0ae      	b.n	8001cf0 <__aeabi_ddiv+0x5e8>
 8001b92:	d100      	bne.n	8001b96 <__aeabi_ddiv+0x48e>
 8001b94:	e0c1      	b.n	8001d1a <__aeabi_ddiv+0x612>
 8001b96:	000a      	movs	r2, r1
 8001b98:	e6f0      	b.n	800197c <__aeabi_ddiv+0x274>
 8001b9a:	4542      	cmp	r2, r8
 8001b9c:	d900      	bls.n	8001ba0 <__aeabi_ddiv+0x498>
 8001b9e:	e62c      	b.n	80017fa <__aeabi_ddiv+0xf2>
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	07dc      	lsls	r4, r3, #31
 8001ba4:	0858      	lsrs	r0, r3, #1
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	431c      	orrs	r4, r3
 8001bac:	4643      	mov	r3, r8
 8001bae:	07df      	lsls	r7, r3, #31
 8001bb0:	e62a      	b.n	8001808 <__aeabi_ddiv+0x100>
 8001bb2:	f001 f9ab 	bl	8002f0c <__clzsi2>
 8001bb6:	2315      	movs	r3, #21
 8001bb8:	469c      	mov	ip, r3
 8001bba:	4484      	add	ip, r0
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	4663      	mov	r3, ip
 8001bc0:	3220      	adds	r2, #32
 8001bc2:	2b1c      	cmp	r3, #28
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_ddiv+0x4c0>
 8001bc6:	e72e      	b.n	8001a26 <__aeabi_ddiv+0x31e>
 8001bc8:	0023      	movs	r3, r4
 8001bca:	3808      	subs	r0, #8
 8001bcc:	4083      	lsls	r3, r0
 8001bce:	4699      	mov	r9, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4698      	mov	r8, r3
 8001bd4:	e736      	b.n	8001a44 <__aeabi_ddiv+0x33c>
 8001bd6:	f001 f999 	bl	8002f0c <__clzsi2>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	0003      	movs	r3, r0
 8001bde:	3215      	adds	r2, #21
 8001be0:	3320      	adds	r3, #32
 8001be2:	2a1c      	cmp	r2, #28
 8001be4:	dc00      	bgt.n	8001be8 <__aeabi_ddiv+0x4e0>
 8001be6:	e6fb      	b.n	80019e0 <__aeabi_ddiv+0x2d8>
 8001be8:	9900      	ldr	r1, [sp, #0]
 8001bea:	3808      	subs	r0, #8
 8001bec:	4081      	lsls	r1, r0
 8001bee:	2200      	movs	r2, #0
 8001bf0:	468b      	mov	fp, r1
 8001bf2:	e702      	b.n	80019fa <__aeabi_ddiv+0x2f2>
 8001bf4:	9900      	ldr	r1, [sp, #0]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	468c      	mov	ip, r1
 8001bfa:	4464      	add	r4, ip
 8001bfc:	42a1      	cmp	r1, r4
 8001bfe:	d900      	bls.n	8001c02 <__aeabi_ddiv+0x4fa>
 8001c00:	e69a      	b.n	8001938 <__aeabi_ddiv+0x230>
 8001c02:	42a2      	cmp	r2, r4
 8001c04:	d800      	bhi.n	8001c08 <__aeabi_ddiv+0x500>
 8001c06:	e697      	b.n	8001938 <__aeabi_ddiv+0x230>
 8001c08:	1e83      	subs	r3, r0, #2
 8001c0a:	4464      	add	r4, ip
 8001c0c:	e694      	b.n	8001938 <__aeabi_ddiv+0x230>
 8001c0e:	46ac      	mov	ip, r5
 8001c10:	4461      	add	r1, ip
 8001c12:	3f01      	subs	r7, #1
 8001c14:	428d      	cmp	r5, r1
 8001c16:	d900      	bls.n	8001c1a <__aeabi_ddiv+0x512>
 8001c18:	e680      	b.n	800191c <__aeabi_ddiv+0x214>
 8001c1a:	428a      	cmp	r2, r1
 8001c1c:	d800      	bhi.n	8001c20 <__aeabi_ddiv+0x518>
 8001c1e:	e67d      	b.n	800191c <__aeabi_ddiv+0x214>
 8001c20:	1e87      	subs	r7, r0, #2
 8001c22:	4461      	add	r1, ip
 8001c24:	e67a      	b.n	800191c <__aeabi_ddiv+0x214>
 8001c26:	4285      	cmp	r5, r0
 8001c28:	d000      	beq.n	8001c2c <__aeabi_ddiv+0x524>
 8001c2a:	e65f      	b.n	80018ec <__aeabi_ddiv+0x1e4>
 8001c2c:	45b9      	cmp	r9, r7
 8001c2e:	d900      	bls.n	8001c32 <__aeabi_ddiv+0x52a>
 8001c30:	e65c      	b.n	80018ec <__aeabi_ddiv+0x1e4>
 8001c32:	e656      	b.n	80018e2 <__aeabi_ddiv+0x1da>
 8001c34:	42a2      	cmp	r2, r4
 8001c36:	d800      	bhi.n	8001c3a <__aeabi_ddiv+0x532>
 8001c38:	e61a      	b.n	8001870 <__aeabi_ddiv+0x168>
 8001c3a:	1e83      	subs	r3, r0, #2
 8001c3c:	4464      	add	r4, ip
 8001c3e:	e617      	b.n	8001870 <__aeabi_ddiv+0x168>
 8001c40:	428a      	cmp	r2, r1
 8001c42:	d800      	bhi.n	8001c46 <__aeabi_ddiv+0x53e>
 8001c44:	e600      	b.n	8001848 <__aeabi_ddiv+0x140>
 8001c46:	46ac      	mov	ip, r5
 8001c48:	1e83      	subs	r3, r0, #2
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	4461      	add	r1, ip
 8001c4e:	e5fb      	b.n	8001848 <__aeabi_ddiv+0x140>
 8001c50:	4837      	ldr	r0, [pc, #220]	@ (8001d30 <__aeabi_ddiv+0x628>)
 8001c52:	0014      	movs	r4, r2
 8001c54:	4450      	add	r0, sl
 8001c56:	4082      	lsls	r2, r0
 8001c58:	465b      	mov	r3, fp
 8001c5a:	0017      	movs	r7, r2
 8001c5c:	4083      	lsls	r3, r0
 8001c5e:	40cc      	lsrs	r4, r1
 8001c60:	1e7a      	subs	r2, r7, #1
 8001c62:	4197      	sbcs	r7, r2
 8001c64:	4323      	orrs	r3, r4
 8001c66:	433b      	orrs	r3, r7
 8001c68:	001a      	movs	r2, r3
 8001c6a:	465b      	mov	r3, fp
 8001c6c:	40cb      	lsrs	r3, r1
 8001c6e:	0751      	lsls	r1, r2, #29
 8001c70:	d009      	beq.n	8001c86 <__aeabi_ddiv+0x57e>
 8001c72:	210f      	movs	r1, #15
 8001c74:	4011      	ands	r1, r2
 8001c76:	2904      	cmp	r1, #4
 8001c78:	d005      	beq.n	8001c86 <__aeabi_ddiv+0x57e>
 8001c7a:	1d11      	adds	r1, r2, #4
 8001c7c:	4291      	cmp	r1, r2
 8001c7e:	4192      	sbcs	r2, r2
 8001c80:	4252      	negs	r2, r2
 8001c82:	189b      	adds	r3, r3, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	0219      	lsls	r1, r3, #8
 8001c88:	d400      	bmi.n	8001c8c <__aeabi_ddiv+0x584>
 8001c8a:	e755      	b.n	8001b38 <__aeabi_ddiv+0x430>
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2400      	movs	r4, #0
 8001c92:	4690      	mov	r8, r2
 8001c94:	e598      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001c96:	000a      	movs	r2, r1
 8001c98:	42bc      	cmp	r4, r7
 8001c9a:	d000      	beq.n	8001c9e <__aeabi_ddiv+0x596>
 8001c9c:	e66e      	b.n	800197c <__aeabi_ddiv+0x274>
 8001c9e:	454b      	cmp	r3, r9
 8001ca0:	d000      	beq.n	8001ca4 <__aeabi_ddiv+0x59c>
 8001ca2:	e66b      	b.n	800197c <__aeabi_ddiv+0x274>
 8001ca4:	e66c      	b.n	8001980 <__aeabi_ddiv+0x278>
 8001ca6:	4b23      	ldr	r3, [pc, #140]	@ (8001d34 <__aeabi_ddiv+0x62c>)
 8001ca8:	4a23      	ldr	r2, [pc, #140]	@ (8001d38 <__aeabi_ddiv+0x630>)
 8001caa:	4453      	add	r3, sl
 8001cac:	4592      	cmp	sl, r2
 8001cae:	da00      	bge.n	8001cb2 <__aeabi_ddiv+0x5aa>
 8001cb0:	e718      	b.n	8001ae4 <__aeabi_ddiv+0x3dc>
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4249      	negs	r1, r1
 8001cb6:	1d0a      	adds	r2, r1, #4
 8001cb8:	428a      	cmp	r2, r1
 8001cba:	4189      	sbcs	r1, r1
 8001cbc:	4249      	negs	r1, r1
 8001cbe:	448b      	add	fp, r1
 8001cc0:	e666      	b.n	8001990 <__aeabi_ddiv+0x288>
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	4011      	ands	r1, r2
 8001cc6:	2904      	cmp	r1, #4
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_ddiv+0x5c4>
 8001cca:	e661      	b.n	8001990 <__aeabi_ddiv+0x288>
 8001ccc:	0011      	movs	r1, r2
 8001cce:	e7f2      	b.n	8001cb6 <__aeabi_ddiv+0x5ae>
 8001cd0:	42bc      	cmp	r4, r7
 8001cd2:	d800      	bhi.n	8001cd6 <__aeabi_ddiv+0x5ce>
 8001cd4:	e60a      	b.n	80018ec <__aeabi_ddiv+0x1e4>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	425b      	negs	r3, r3
 8001cda:	469c      	mov	ip, r3
 8001cdc:	9900      	ldr	r1, [sp, #0]
 8001cde:	444f      	add	r7, r9
 8001ce0:	454f      	cmp	r7, r9
 8001ce2:	419b      	sbcs	r3, r3
 8001ce4:	44e3      	add	fp, ip
 8001ce6:	468c      	mov	ip, r1
 8001ce8:	425b      	negs	r3, r3
 8001cea:	4463      	add	r3, ip
 8001cec:	18c0      	adds	r0, r0, r3
 8001cee:	e5ff      	b.n	80018f0 <__aeabi_ddiv+0x1e8>
 8001cf0:	4649      	mov	r1, r9
 8001cf2:	9d00      	ldr	r5, [sp, #0]
 8001cf4:	0048      	lsls	r0, r1, #1
 8001cf6:	4548      	cmp	r0, r9
 8001cf8:	4189      	sbcs	r1, r1
 8001cfa:	46ac      	mov	ip, r5
 8001cfc:	4249      	negs	r1, r1
 8001cfe:	4461      	add	r1, ip
 8001d00:	4681      	mov	r9, r0
 8001d02:	3a02      	subs	r2, #2
 8001d04:	1864      	adds	r4, r4, r1
 8001d06:	e7c7      	b.n	8001c98 <__aeabi_ddiv+0x590>
 8001d08:	2480      	movs	r4, #128	@ 0x80
 8001d0a:	465b      	mov	r3, fp
 8001d0c:	0324      	lsls	r4, r4, #12
 8001d0e:	431c      	orrs	r4, r3
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	4690      	mov	r8, r2
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <__aeabi_ddiv+0x620>)
 8001d16:	0b24      	lsrs	r4, r4, #12
 8001d18:	e556      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001d1a:	4599      	cmp	r9, r3
 8001d1c:	d3e8      	bcc.n	8001cf0 <__aeabi_ddiv+0x5e8>
 8001d1e:	000a      	movs	r2, r1
 8001d20:	e7bd      	b.n	8001c9e <__aeabi_ddiv+0x596>
 8001d22:	2300      	movs	r3, #0
 8001d24:	e708      	b.n	8001b38 <__aeabi_ddiv+0x430>
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	0000043e 	.word	0x0000043e
 8001d30:	0000041e 	.word	0x0000041e
 8001d34:	000003ff 	.word	0x000003ff
 8001d38:	fffffc02 	.word	0xfffffc02

08001d3c <__eqdf2>:
 8001d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3e:	4657      	mov	r7, sl
 8001d40:	46de      	mov	lr, fp
 8001d42:	464e      	mov	r6, r9
 8001d44:	4645      	mov	r5, r8
 8001d46:	b5e0      	push	{r5, r6, r7, lr}
 8001d48:	000d      	movs	r5, r1
 8001d4a:	0004      	movs	r4, r0
 8001d4c:	0fe8      	lsrs	r0, r5, #31
 8001d4e:	4683      	mov	fp, r0
 8001d50:	0309      	lsls	r1, r1, #12
 8001d52:	0fd8      	lsrs	r0, r3, #31
 8001d54:	0b09      	lsrs	r1, r1, #12
 8001d56:	4682      	mov	sl, r0
 8001d58:	4819      	ldr	r0, [pc, #100]	@ (8001dc0 <__eqdf2+0x84>)
 8001d5a:	468c      	mov	ip, r1
 8001d5c:	031f      	lsls	r7, r3, #12
 8001d5e:	0069      	lsls	r1, r5, #1
 8001d60:	005e      	lsls	r6, r3, #1
 8001d62:	0d49      	lsrs	r1, r1, #21
 8001d64:	0b3f      	lsrs	r7, r7, #12
 8001d66:	0d76      	lsrs	r6, r6, #21
 8001d68:	4281      	cmp	r1, r0
 8001d6a:	d018      	beq.n	8001d9e <__eqdf2+0x62>
 8001d6c:	4286      	cmp	r6, r0
 8001d6e:	d00f      	beq.n	8001d90 <__eqdf2+0x54>
 8001d70:	2001      	movs	r0, #1
 8001d72:	42b1      	cmp	r1, r6
 8001d74:	d10d      	bne.n	8001d92 <__eqdf2+0x56>
 8001d76:	45bc      	cmp	ip, r7
 8001d78:	d10b      	bne.n	8001d92 <__eqdf2+0x56>
 8001d7a:	4294      	cmp	r4, r2
 8001d7c:	d109      	bne.n	8001d92 <__eqdf2+0x56>
 8001d7e:	45d3      	cmp	fp, sl
 8001d80:	d01c      	beq.n	8001dbc <__eqdf2+0x80>
 8001d82:	2900      	cmp	r1, #0
 8001d84:	d105      	bne.n	8001d92 <__eqdf2+0x56>
 8001d86:	4660      	mov	r0, ip
 8001d88:	4320      	orrs	r0, r4
 8001d8a:	1e43      	subs	r3, r0, #1
 8001d8c:	4198      	sbcs	r0, r3
 8001d8e:	e000      	b.n	8001d92 <__eqdf2+0x56>
 8001d90:	2001      	movs	r0, #1
 8001d92:	bcf0      	pop	{r4, r5, r6, r7}
 8001d94:	46bb      	mov	fp, r7
 8001d96:	46b2      	mov	sl, r6
 8001d98:	46a9      	mov	r9, r5
 8001d9a:	46a0      	mov	r8, r4
 8001d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9e:	2001      	movs	r0, #1
 8001da0:	428e      	cmp	r6, r1
 8001da2:	d1f6      	bne.n	8001d92 <__eqdf2+0x56>
 8001da4:	4661      	mov	r1, ip
 8001da6:	4339      	orrs	r1, r7
 8001da8:	000f      	movs	r7, r1
 8001daa:	4317      	orrs	r7, r2
 8001dac:	4327      	orrs	r7, r4
 8001dae:	d1f0      	bne.n	8001d92 <__eqdf2+0x56>
 8001db0:	465b      	mov	r3, fp
 8001db2:	4652      	mov	r2, sl
 8001db4:	1a98      	subs	r0, r3, r2
 8001db6:	1e43      	subs	r3, r0, #1
 8001db8:	4198      	sbcs	r0, r3
 8001dba:	e7ea      	b.n	8001d92 <__eqdf2+0x56>
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	e7e8      	b.n	8001d92 <__eqdf2+0x56>
 8001dc0:	000007ff 	.word	0x000007ff

08001dc4 <__gedf2>:
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	4657      	mov	r7, sl
 8001dc8:	464e      	mov	r6, r9
 8001dca:	4645      	mov	r5, r8
 8001dcc:	46de      	mov	lr, fp
 8001dce:	b5e0      	push	{r5, r6, r7, lr}
 8001dd0:	000d      	movs	r5, r1
 8001dd2:	030f      	lsls	r7, r1, #12
 8001dd4:	0b39      	lsrs	r1, r7, #12
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	0004      	movs	r4, r0
 8001dda:	4680      	mov	r8, r0
 8001ddc:	9101      	str	r1, [sp, #4]
 8001dde:	0058      	lsls	r0, r3, #1
 8001de0:	0fe9      	lsrs	r1, r5, #31
 8001de2:	4f31      	ldr	r7, [pc, #196]	@ (8001ea8 <__gedf2+0xe4>)
 8001de4:	0d40      	lsrs	r0, r0, #21
 8001de6:	468c      	mov	ip, r1
 8001de8:	006e      	lsls	r6, r5, #1
 8001dea:	0319      	lsls	r1, r3, #12
 8001dec:	4682      	mov	sl, r0
 8001dee:	4691      	mov	r9, r2
 8001df0:	0d76      	lsrs	r6, r6, #21
 8001df2:	0b09      	lsrs	r1, r1, #12
 8001df4:	0fd8      	lsrs	r0, r3, #31
 8001df6:	42be      	cmp	r6, r7
 8001df8:	d01f      	beq.n	8001e3a <__gedf2+0x76>
 8001dfa:	45ba      	cmp	sl, r7
 8001dfc:	d00f      	beq.n	8001e1e <__gedf2+0x5a>
 8001dfe:	2e00      	cmp	r6, #0
 8001e00:	d12f      	bne.n	8001e62 <__gedf2+0x9e>
 8001e02:	4655      	mov	r5, sl
 8001e04:	9e01      	ldr	r6, [sp, #4]
 8001e06:	4334      	orrs	r4, r6
 8001e08:	2d00      	cmp	r5, #0
 8001e0a:	d127      	bne.n	8001e5c <__gedf2+0x98>
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	d03a      	beq.n	8001e86 <__gedf2+0xc2>
 8001e10:	2c00      	cmp	r4, #0
 8001e12:	d145      	bne.n	8001ea0 <__gedf2+0xdc>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d11a      	bne.n	8001e4e <__gedf2+0x8a>
 8001e18:	2001      	movs	r0, #1
 8001e1a:	4240      	negs	r0, r0
 8001e1c:	e017      	b.n	8001e4e <__gedf2+0x8a>
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	d13b      	bne.n	8001e9a <__gedf2+0xd6>
 8001e22:	2e00      	cmp	r6, #0
 8001e24:	d102      	bne.n	8001e2c <__gedf2+0x68>
 8001e26:	9f01      	ldr	r7, [sp, #4]
 8001e28:	4327      	orrs	r7, r4
 8001e2a:	d0f3      	beq.n	8001e14 <__gedf2+0x50>
 8001e2c:	4584      	cmp	ip, r0
 8001e2e:	d109      	bne.n	8001e44 <__gedf2+0x80>
 8001e30:	4663      	mov	r3, ip
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <__gedf2+0x54>
 8001e36:	4660      	mov	r0, ip
 8001e38:	e009      	b.n	8001e4e <__gedf2+0x8a>
 8001e3a:	9f01      	ldr	r7, [sp, #4]
 8001e3c:	4327      	orrs	r7, r4
 8001e3e:	d12c      	bne.n	8001e9a <__gedf2+0xd6>
 8001e40:	45b2      	cmp	sl, r6
 8001e42:	d024      	beq.n	8001e8e <__gedf2+0xca>
 8001e44:	4663      	mov	r3, ip
 8001e46:	2002      	movs	r0, #2
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	4018      	ands	r0, r3
 8001e4c:	3801      	subs	r0, #1
 8001e4e:	b003      	add	sp, #12
 8001e50:	bcf0      	pop	{r4, r5, r6, r7}
 8001e52:	46bb      	mov	fp, r7
 8001e54:	46b2      	mov	sl, r6
 8001e56:	46a9      	mov	r9, r5
 8001e58:	46a0      	mov	r8, r4
 8001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d0d9      	beq.n	8001e14 <__gedf2+0x50>
 8001e60:	e7e4      	b.n	8001e2c <__gedf2+0x68>
 8001e62:	4654      	mov	r4, sl
 8001e64:	2c00      	cmp	r4, #0
 8001e66:	d0ed      	beq.n	8001e44 <__gedf2+0x80>
 8001e68:	4584      	cmp	ip, r0
 8001e6a:	d1eb      	bne.n	8001e44 <__gedf2+0x80>
 8001e6c:	4556      	cmp	r6, sl
 8001e6e:	dce9      	bgt.n	8001e44 <__gedf2+0x80>
 8001e70:	dbde      	blt.n	8001e30 <__gedf2+0x6c>
 8001e72:	9b01      	ldr	r3, [sp, #4]
 8001e74:	428b      	cmp	r3, r1
 8001e76:	d8e5      	bhi.n	8001e44 <__gedf2+0x80>
 8001e78:	d1da      	bne.n	8001e30 <__gedf2+0x6c>
 8001e7a:	45c8      	cmp	r8, r9
 8001e7c:	d8e2      	bhi.n	8001e44 <__gedf2+0x80>
 8001e7e:	2000      	movs	r0, #0
 8001e80:	45c8      	cmp	r8, r9
 8001e82:	d2e4      	bcs.n	8001e4e <__gedf2+0x8a>
 8001e84:	e7d4      	b.n	8001e30 <__gedf2+0x6c>
 8001e86:	2000      	movs	r0, #0
 8001e88:	2c00      	cmp	r4, #0
 8001e8a:	d0e0      	beq.n	8001e4e <__gedf2+0x8a>
 8001e8c:	e7da      	b.n	8001e44 <__gedf2+0x80>
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	d103      	bne.n	8001e9a <__gedf2+0xd6>
 8001e92:	4584      	cmp	ip, r0
 8001e94:	d1d6      	bne.n	8001e44 <__gedf2+0x80>
 8001e96:	2000      	movs	r0, #0
 8001e98:	e7d9      	b.n	8001e4e <__gedf2+0x8a>
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	4240      	negs	r0, r0
 8001e9e:	e7d6      	b.n	8001e4e <__gedf2+0x8a>
 8001ea0:	4584      	cmp	ip, r0
 8001ea2:	d0e6      	beq.n	8001e72 <__gedf2+0xae>
 8001ea4:	e7ce      	b.n	8001e44 <__gedf2+0x80>
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	000007ff 	.word	0x000007ff

08001eac <__ledf2>:
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	4657      	mov	r7, sl
 8001eb0:	464e      	mov	r6, r9
 8001eb2:	4645      	mov	r5, r8
 8001eb4:	46de      	mov	lr, fp
 8001eb6:	b5e0      	push	{r5, r6, r7, lr}
 8001eb8:	000d      	movs	r5, r1
 8001eba:	030f      	lsls	r7, r1, #12
 8001ebc:	0004      	movs	r4, r0
 8001ebe:	4680      	mov	r8, r0
 8001ec0:	0fe8      	lsrs	r0, r5, #31
 8001ec2:	0b39      	lsrs	r1, r7, #12
 8001ec4:	4684      	mov	ip, r0
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	0058      	lsls	r0, r3, #1
 8001eca:	4f30      	ldr	r7, [pc, #192]	@ (8001f8c <__ledf2+0xe0>)
 8001ecc:	0d40      	lsrs	r0, r0, #21
 8001ece:	9101      	str	r1, [sp, #4]
 8001ed0:	031e      	lsls	r6, r3, #12
 8001ed2:	0069      	lsls	r1, r5, #1
 8001ed4:	4682      	mov	sl, r0
 8001ed6:	4691      	mov	r9, r2
 8001ed8:	0d49      	lsrs	r1, r1, #21
 8001eda:	0b36      	lsrs	r6, r6, #12
 8001edc:	0fd8      	lsrs	r0, r3, #31
 8001ede:	42b9      	cmp	r1, r7
 8001ee0:	d020      	beq.n	8001f24 <__ledf2+0x78>
 8001ee2:	45ba      	cmp	sl, r7
 8001ee4:	d00f      	beq.n	8001f06 <__ledf2+0x5a>
 8001ee6:	2900      	cmp	r1, #0
 8001ee8:	d12b      	bne.n	8001f42 <__ledf2+0x96>
 8001eea:	9901      	ldr	r1, [sp, #4]
 8001eec:	430c      	orrs	r4, r1
 8001eee:	4651      	mov	r1, sl
 8001ef0:	2900      	cmp	r1, #0
 8001ef2:	d137      	bne.n	8001f64 <__ledf2+0xb8>
 8001ef4:	4332      	orrs	r2, r6
 8001ef6:	d038      	beq.n	8001f6a <__ledf2+0xbe>
 8001ef8:	2c00      	cmp	r4, #0
 8001efa:	d144      	bne.n	8001f86 <__ledf2+0xda>
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d119      	bne.n	8001f34 <__ledf2+0x88>
 8001f00:	2001      	movs	r0, #1
 8001f02:	4240      	negs	r0, r0
 8001f04:	e016      	b.n	8001f34 <__ledf2+0x88>
 8001f06:	4316      	orrs	r6, r2
 8001f08:	d113      	bne.n	8001f32 <__ledf2+0x86>
 8001f0a:	2900      	cmp	r1, #0
 8001f0c:	d102      	bne.n	8001f14 <__ledf2+0x68>
 8001f0e:	9f01      	ldr	r7, [sp, #4]
 8001f10:	4327      	orrs	r7, r4
 8001f12:	d0f3      	beq.n	8001efc <__ledf2+0x50>
 8001f14:	4584      	cmp	ip, r0
 8001f16:	d020      	beq.n	8001f5a <__ledf2+0xae>
 8001f18:	4663      	mov	r3, ip
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	4018      	ands	r0, r3
 8001f20:	3801      	subs	r0, #1
 8001f22:	e007      	b.n	8001f34 <__ledf2+0x88>
 8001f24:	9f01      	ldr	r7, [sp, #4]
 8001f26:	4327      	orrs	r7, r4
 8001f28:	d103      	bne.n	8001f32 <__ledf2+0x86>
 8001f2a:	458a      	cmp	sl, r1
 8001f2c:	d1f4      	bne.n	8001f18 <__ledf2+0x6c>
 8001f2e:	4316      	orrs	r6, r2
 8001f30:	d01f      	beq.n	8001f72 <__ledf2+0xc6>
 8001f32:	2002      	movs	r0, #2
 8001f34:	b003      	add	sp, #12
 8001f36:	bcf0      	pop	{r4, r5, r6, r7}
 8001f38:	46bb      	mov	fp, r7
 8001f3a:	46b2      	mov	sl, r6
 8001f3c:	46a9      	mov	r9, r5
 8001f3e:	46a0      	mov	r8, r4
 8001f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f42:	4654      	mov	r4, sl
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	d0e7      	beq.n	8001f18 <__ledf2+0x6c>
 8001f48:	4584      	cmp	ip, r0
 8001f4a:	d1e5      	bne.n	8001f18 <__ledf2+0x6c>
 8001f4c:	4551      	cmp	r1, sl
 8001f4e:	dce3      	bgt.n	8001f18 <__ledf2+0x6c>
 8001f50:	db03      	blt.n	8001f5a <__ledf2+0xae>
 8001f52:	9b01      	ldr	r3, [sp, #4]
 8001f54:	42b3      	cmp	r3, r6
 8001f56:	d8df      	bhi.n	8001f18 <__ledf2+0x6c>
 8001f58:	d00f      	beq.n	8001f7a <__ledf2+0xce>
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0cf      	beq.n	8001f00 <__ledf2+0x54>
 8001f60:	4660      	mov	r0, ip
 8001f62:	e7e7      	b.n	8001f34 <__ledf2+0x88>
 8001f64:	2c00      	cmp	r4, #0
 8001f66:	d0c9      	beq.n	8001efc <__ledf2+0x50>
 8001f68:	e7d4      	b.n	8001f14 <__ledf2+0x68>
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	2c00      	cmp	r4, #0
 8001f6e:	d0e1      	beq.n	8001f34 <__ledf2+0x88>
 8001f70:	e7d2      	b.n	8001f18 <__ledf2+0x6c>
 8001f72:	4584      	cmp	ip, r0
 8001f74:	d1d0      	bne.n	8001f18 <__ledf2+0x6c>
 8001f76:	2000      	movs	r0, #0
 8001f78:	e7dc      	b.n	8001f34 <__ledf2+0x88>
 8001f7a:	45c8      	cmp	r8, r9
 8001f7c:	d8cc      	bhi.n	8001f18 <__ledf2+0x6c>
 8001f7e:	2000      	movs	r0, #0
 8001f80:	45c8      	cmp	r8, r9
 8001f82:	d2d7      	bcs.n	8001f34 <__ledf2+0x88>
 8001f84:	e7e9      	b.n	8001f5a <__ledf2+0xae>
 8001f86:	4584      	cmp	ip, r0
 8001f88:	d0e3      	beq.n	8001f52 <__ledf2+0xa6>
 8001f8a:	e7c5      	b.n	8001f18 <__ledf2+0x6c>
 8001f8c:	000007ff 	.word	0x000007ff

08001f90 <__aeabi_dmul>:
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	4657      	mov	r7, sl
 8001f94:	46de      	mov	lr, fp
 8001f96:	464e      	mov	r6, r9
 8001f98:	4645      	mov	r5, r8
 8001f9a:	b5e0      	push	{r5, r6, r7, lr}
 8001f9c:	001f      	movs	r7, r3
 8001f9e:	030b      	lsls	r3, r1, #12
 8001fa0:	0b1b      	lsrs	r3, r3, #12
 8001fa2:	0016      	movs	r6, r2
 8001fa4:	469a      	mov	sl, r3
 8001fa6:	0fca      	lsrs	r2, r1, #31
 8001fa8:	004b      	lsls	r3, r1, #1
 8001faa:	0004      	movs	r4, r0
 8001fac:	4693      	mov	fp, r2
 8001fae:	b087      	sub	sp, #28
 8001fb0:	0d5b      	lsrs	r3, r3, #21
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dmul+0x26>
 8001fb4:	e0d5      	b.n	8002162 <__aeabi_dmul+0x1d2>
 8001fb6:	4abb      	ldr	r2, [pc, #748]	@ (80022a4 <__aeabi_dmul+0x314>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d100      	bne.n	8001fbe <__aeabi_dmul+0x2e>
 8001fbc:	e0f8      	b.n	80021b0 <__aeabi_dmul+0x220>
 8001fbe:	4651      	mov	r1, sl
 8001fc0:	0f42      	lsrs	r2, r0, #29
 8001fc2:	00c9      	lsls	r1, r1, #3
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	2180      	movs	r1, #128	@ 0x80
 8001fc8:	0409      	lsls	r1, r1, #16
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	00c2      	lsls	r2, r0, #3
 8001fce:	4691      	mov	r9, r2
 8001fd0:	4ab5      	ldr	r2, [pc, #724]	@ (80022a8 <__aeabi_dmul+0x318>)
 8001fd2:	468a      	mov	sl, r1
 8001fd4:	189d      	adds	r5, r3, r2
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	4698      	mov	r8, r3
 8001fda:	9302      	str	r3, [sp, #8]
 8001fdc:	033c      	lsls	r4, r7, #12
 8001fde:	007b      	lsls	r3, r7, #1
 8001fe0:	0ffa      	lsrs	r2, r7, #31
 8001fe2:	0030      	movs	r0, r6
 8001fe4:	0b24      	lsrs	r4, r4, #12
 8001fe6:	0d5b      	lsrs	r3, r3, #21
 8001fe8:	9200      	str	r2, [sp, #0]
 8001fea:	d100      	bne.n	8001fee <__aeabi_dmul+0x5e>
 8001fec:	e096      	b.n	800211c <__aeabi_dmul+0x18c>
 8001fee:	4aad      	ldr	r2, [pc, #692]	@ (80022a4 <__aeabi_dmul+0x314>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d031      	beq.n	8002058 <__aeabi_dmul+0xc8>
 8001ff4:	0f72      	lsrs	r2, r6, #29
 8001ff6:	00e4      	lsls	r4, r4, #3
 8001ff8:	4322      	orrs	r2, r4
 8001ffa:	2480      	movs	r4, #128	@ 0x80
 8001ffc:	0424      	lsls	r4, r4, #16
 8001ffe:	4314      	orrs	r4, r2
 8002000:	4aa9      	ldr	r2, [pc, #676]	@ (80022a8 <__aeabi_dmul+0x318>)
 8002002:	00f0      	lsls	r0, r6, #3
 8002004:	4694      	mov	ip, r2
 8002006:	4463      	add	r3, ip
 8002008:	195b      	adds	r3, r3, r5
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	9201      	str	r2, [sp, #4]
 800200e:	4642      	mov	r2, r8
 8002010:	2600      	movs	r6, #0
 8002012:	2a0a      	cmp	r2, #10
 8002014:	dc42      	bgt.n	800209c <__aeabi_dmul+0x10c>
 8002016:	465a      	mov	r2, fp
 8002018:	9900      	ldr	r1, [sp, #0]
 800201a:	404a      	eors	r2, r1
 800201c:	4693      	mov	fp, r2
 800201e:	4642      	mov	r2, r8
 8002020:	2a02      	cmp	r2, #2
 8002022:	dc32      	bgt.n	800208a <__aeabi_dmul+0xfa>
 8002024:	3a01      	subs	r2, #1
 8002026:	2a01      	cmp	r2, #1
 8002028:	d900      	bls.n	800202c <__aeabi_dmul+0x9c>
 800202a:	e149      	b.n	80022c0 <__aeabi_dmul+0x330>
 800202c:	2e02      	cmp	r6, #2
 800202e:	d100      	bne.n	8002032 <__aeabi_dmul+0xa2>
 8002030:	e0ca      	b.n	80021c8 <__aeabi_dmul+0x238>
 8002032:	2e01      	cmp	r6, #1
 8002034:	d13d      	bne.n	80020b2 <__aeabi_dmul+0x122>
 8002036:	2300      	movs	r3, #0
 8002038:	2400      	movs	r4, #0
 800203a:	2200      	movs	r2, #0
 800203c:	0010      	movs	r0, r2
 800203e:	465a      	mov	r2, fp
 8002040:	051b      	lsls	r3, r3, #20
 8002042:	4323      	orrs	r3, r4
 8002044:	07d2      	lsls	r2, r2, #31
 8002046:	4313      	orrs	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	b007      	add	sp, #28
 800204c:	bcf0      	pop	{r4, r5, r6, r7}
 800204e:	46bb      	mov	fp, r7
 8002050:	46b2      	mov	sl, r6
 8002052:	46a9      	mov	r9, r5
 8002054:	46a0      	mov	r8, r4
 8002056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002058:	4b92      	ldr	r3, [pc, #584]	@ (80022a4 <__aeabi_dmul+0x314>)
 800205a:	4326      	orrs	r6, r4
 800205c:	18eb      	adds	r3, r5, r3
 800205e:	2e00      	cmp	r6, #0
 8002060:	d100      	bne.n	8002064 <__aeabi_dmul+0xd4>
 8002062:	e0bb      	b.n	80021dc <__aeabi_dmul+0x24c>
 8002064:	2203      	movs	r2, #3
 8002066:	4641      	mov	r1, r8
 8002068:	4311      	orrs	r1, r2
 800206a:	465a      	mov	r2, fp
 800206c:	4688      	mov	r8, r1
 800206e:	9900      	ldr	r1, [sp, #0]
 8002070:	404a      	eors	r2, r1
 8002072:	2180      	movs	r1, #128	@ 0x80
 8002074:	0109      	lsls	r1, r1, #4
 8002076:	468c      	mov	ip, r1
 8002078:	0029      	movs	r1, r5
 800207a:	4461      	add	r1, ip
 800207c:	9101      	str	r1, [sp, #4]
 800207e:	4641      	mov	r1, r8
 8002080:	290a      	cmp	r1, #10
 8002082:	dd00      	ble.n	8002086 <__aeabi_dmul+0xf6>
 8002084:	e233      	b.n	80024ee <__aeabi_dmul+0x55e>
 8002086:	4693      	mov	fp, r2
 8002088:	2603      	movs	r6, #3
 800208a:	4642      	mov	r2, r8
 800208c:	2701      	movs	r7, #1
 800208e:	4097      	lsls	r7, r2
 8002090:	21a6      	movs	r1, #166	@ 0xa6
 8002092:	003a      	movs	r2, r7
 8002094:	00c9      	lsls	r1, r1, #3
 8002096:	400a      	ands	r2, r1
 8002098:	420f      	tst	r7, r1
 800209a:	d031      	beq.n	8002100 <__aeabi_dmul+0x170>
 800209c:	9e02      	ldr	r6, [sp, #8]
 800209e:	2e02      	cmp	r6, #2
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dmul+0x114>
 80020a2:	e235      	b.n	8002510 <__aeabi_dmul+0x580>
 80020a4:	2e03      	cmp	r6, #3
 80020a6:	d100      	bne.n	80020aa <__aeabi_dmul+0x11a>
 80020a8:	e1d2      	b.n	8002450 <__aeabi_dmul+0x4c0>
 80020aa:	4654      	mov	r4, sl
 80020ac:	4648      	mov	r0, r9
 80020ae:	2e01      	cmp	r6, #1
 80020b0:	d0c1      	beq.n	8002036 <__aeabi_dmul+0xa6>
 80020b2:	9a01      	ldr	r2, [sp, #4]
 80020b4:	4b7d      	ldr	r3, [pc, #500]	@ (80022ac <__aeabi_dmul+0x31c>)
 80020b6:	4694      	mov	ip, r2
 80020b8:	4463      	add	r3, ip
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	dc00      	bgt.n	80020c0 <__aeabi_dmul+0x130>
 80020be:	e0c0      	b.n	8002242 <__aeabi_dmul+0x2b2>
 80020c0:	0742      	lsls	r2, r0, #29
 80020c2:	d009      	beq.n	80020d8 <__aeabi_dmul+0x148>
 80020c4:	220f      	movs	r2, #15
 80020c6:	4002      	ands	r2, r0
 80020c8:	2a04      	cmp	r2, #4
 80020ca:	d005      	beq.n	80020d8 <__aeabi_dmul+0x148>
 80020cc:	1d02      	adds	r2, r0, #4
 80020ce:	4282      	cmp	r2, r0
 80020d0:	4180      	sbcs	r0, r0
 80020d2:	4240      	negs	r0, r0
 80020d4:	1824      	adds	r4, r4, r0
 80020d6:	0010      	movs	r0, r2
 80020d8:	01e2      	lsls	r2, r4, #7
 80020da:	d506      	bpl.n	80020ea <__aeabi_dmul+0x15a>
 80020dc:	4b74      	ldr	r3, [pc, #464]	@ (80022b0 <__aeabi_dmul+0x320>)
 80020de:	9a01      	ldr	r2, [sp, #4]
 80020e0:	401c      	ands	r4, r3
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	4694      	mov	ip, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4463      	add	r3, ip
 80020ea:	4a72      	ldr	r2, [pc, #456]	@ (80022b4 <__aeabi_dmul+0x324>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	dc6b      	bgt.n	80021c8 <__aeabi_dmul+0x238>
 80020f0:	0762      	lsls	r2, r4, #29
 80020f2:	08c0      	lsrs	r0, r0, #3
 80020f4:	0264      	lsls	r4, r4, #9
 80020f6:	055b      	lsls	r3, r3, #21
 80020f8:	4302      	orrs	r2, r0
 80020fa:	0b24      	lsrs	r4, r4, #12
 80020fc:	0d5b      	lsrs	r3, r3, #21
 80020fe:	e79d      	b.n	800203c <__aeabi_dmul+0xac>
 8002100:	2190      	movs	r1, #144	@ 0x90
 8002102:	0089      	lsls	r1, r1, #2
 8002104:	420f      	tst	r7, r1
 8002106:	d163      	bne.n	80021d0 <__aeabi_dmul+0x240>
 8002108:	2288      	movs	r2, #136	@ 0x88
 800210a:	423a      	tst	r2, r7
 800210c:	d100      	bne.n	8002110 <__aeabi_dmul+0x180>
 800210e:	e0d7      	b.n	80022c0 <__aeabi_dmul+0x330>
 8002110:	9b00      	ldr	r3, [sp, #0]
 8002112:	46a2      	mov	sl, r4
 8002114:	469b      	mov	fp, r3
 8002116:	4681      	mov	r9, r0
 8002118:	9602      	str	r6, [sp, #8]
 800211a:	e7bf      	b.n	800209c <__aeabi_dmul+0x10c>
 800211c:	0023      	movs	r3, r4
 800211e:	4333      	orrs	r3, r6
 8002120:	d100      	bne.n	8002124 <__aeabi_dmul+0x194>
 8002122:	e07f      	b.n	8002224 <__aeabi_dmul+0x294>
 8002124:	2c00      	cmp	r4, #0
 8002126:	d100      	bne.n	800212a <__aeabi_dmul+0x19a>
 8002128:	e1ad      	b.n	8002486 <__aeabi_dmul+0x4f6>
 800212a:	0020      	movs	r0, r4
 800212c:	f000 feee 	bl	8002f0c <__clzsi2>
 8002130:	0002      	movs	r2, r0
 8002132:	0003      	movs	r3, r0
 8002134:	3a0b      	subs	r2, #11
 8002136:	201d      	movs	r0, #29
 8002138:	0019      	movs	r1, r3
 800213a:	1a82      	subs	r2, r0, r2
 800213c:	0030      	movs	r0, r6
 800213e:	3908      	subs	r1, #8
 8002140:	40d0      	lsrs	r0, r2
 8002142:	408c      	lsls	r4, r1
 8002144:	4304      	orrs	r4, r0
 8002146:	0030      	movs	r0, r6
 8002148:	4088      	lsls	r0, r1
 800214a:	4a5b      	ldr	r2, [pc, #364]	@ (80022b8 <__aeabi_dmul+0x328>)
 800214c:	1aeb      	subs	r3, r5, r3
 800214e:	4694      	mov	ip, r2
 8002150:	4463      	add	r3, ip
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	9201      	str	r2, [sp, #4]
 8002156:	4642      	mov	r2, r8
 8002158:	2600      	movs	r6, #0
 800215a:	2a0a      	cmp	r2, #10
 800215c:	dc00      	bgt.n	8002160 <__aeabi_dmul+0x1d0>
 800215e:	e75a      	b.n	8002016 <__aeabi_dmul+0x86>
 8002160:	e79c      	b.n	800209c <__aeabi_dmul+0x10c>
 8002162:	4653      	mov	r3, sl
 8002164:	4303      	orrs	r3, r0
 8002166:	4699      	mov	r9, r3
 8002168:	d054      	beq.n	8002214 <__aeabi_dmul+0x284>
 800216a:	4653      	mov	r3, sl
 800216c:	2b00      	cmp	r3, #0
 800216e:	d100      	bne.n	8002172 <__aeabi_dmul+0x1e2>
 8002170:	e177      	b.n	8002462 <__aeabi_dmul+0x4d2>
 8002172:	4650      	mov	r0, sl
 8002174:	f000 feca 	bl	8002f0c <__clzsi2>
 8002178:	230b      	movs	r3, #11
 800217a:	425b      	negs	r3, r3
 800217c:	469c      	mov	ip, r3
 800217e:	0002      	movs	r2, r0
 8002180:	4484      	add	ip, r0
 8002182:	0011      	movs	r1, r2
 8002184:	4650      	mov	r0, sl
 8002186:	3908      	subs	r1, #8
 8002188:	4088      	lsls	r0, r1
 800218a:	231d      	movs	r3, #29
 800218c:	4680      	mov	r8, r0
 800218e:	4660      	mov	r0, ip
 8002190:	1a1b      	subs	r3, r3, r0
 8002192:	0020      	movs	r0, r4
 8002194:	40d8      	lsrs	r0, r3
 8002196:	0003      	movs	r3, r0
 8002198:	4640      	mov	r0, r8
 800219a:	4303      	orrs	r3, r0
 800219c:	469a      	mov	sl, r3
 800219e:	0023      	movs	r3, r4
 80021a0:	408b      	lsls	r3, r1
 80021a2:	4699      	mov	r9, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	4d44      	ldr	r5, [pc, #272]	@ (80022b8 <__aeabi_dmul+0x328>)
 80021a8:	4698      	mov	r8, r3
 80021aa:	1aad      	subs	r5, r5, r2
 80021ac:	9302      	str	r3, [sp, #8]
 80021ae:	e715      	b.n	8001fdc <__aeabi_dmul+0x4c>
 80021b0:	4652      	mov	r2, sl
 80021b2:	4302      	orrs	r2, r0
 80021b4:	4691      	mov	r9, r2
 80021b6:	d126      	bne.n	8002206 <__aeabi_dmul+0x276>
 80021b8:	2200      	movs	r2, #0
 80021ba:	001d      	movs	r5, r3
 80021bc:	2302      	movs	r3, #2
 80021be:	4692      	mov	sl, r2
 80021c0:	3208      	adds	r2, #8
 80021c2:	4690      	mov	r8, r2
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	e709      	b.n	8001fdc <__aeabi_dmul+0x4c>
 80021c8:	2400      	movs	r4, #0
 80021ca:	2200      	movs	r2, #0
 80021cc:	4b35      	ldr	r3, [pc, #212]	@ (80022a4 <__aeabi_dmul+0x314>)
 80021ce:	e735      	b.n	800203c <__aeabi_dmul+0xac>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2480      	movs	r4, #128	@ 0x80
 80021d4:	469b      	mov	fp, r3
 80021d6:	0324      	lsls	r4, r4, #12
 80021d8:	4b32      	ldr	r3, [pc, #200]	@ (80022a4 <__aeabi_dmul+0x314>)
 80021da:	e72f      	b.n	800203c <__aeabi_dmul+0xac>
 80021dc:	2202      	movs	r2, #2
 80021de:	4641      	mov	r1, r8
 80021e0:	4311      	orrs	r1, r2
 80021e2:	2280      	movs	r2, #128	@ 0x80
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	4694      	mov	ip, r2
 80021e8:	002a      	movs	r2, r5
 80021ea:	4462      	add	r2, ip
 80021ec:	4688      	mov	r8, r1
 80021ee:	9201      	str	r2, [sp, #4]
 80021f0:	290a      	cmp	r1, #10
 80021f2:	dd00      	ble.n	80021f6 <__aeabi_dmul+0x266>
 80021f4:	e752      	b.n	800209c <__aeabi_dmul+0x10c>
 80021f6:	465a      	mov	r2, fp
 80021f8:	2000      	movs	r0, #0
 80021fa:	9900      	ldr	r1, [sp, #0]
 80021fc:	0004      	movs	r4, r0
 80021fe:	404a      	eors	r2, r1
 8002200:	4693      	mov	fp, r2
 8002202:	2602      	movs	r6, #2
 8002204:	e70b      	b.n	800201e <__aeabi_dmul+0x8e>
 8002206:	220c      	movs	r2, #12
 8002208:	001d      	movs	r5, r3
 800220a:	2303      	movs	r3, #3
 800220c:	4681      	mov	r9, r0
 800220e:	4690      	mov	r8, r2
 8002210:	9302      	str	r3, [sp, #8]
 8002212:	e6e3      	b.n	8001fdc <__aeabi_dmul+0x4c>
 8002214:	2300      	movs	r3, #0
 8002216:	469a      	mov	sl, r3
 8002218:	3304      	adds	r3, #4
 800221a:	4698      	mov	r8, r3
 800221c:	3b03      	subs	r3, #3
 800221e:	2500      	movs	r5, #0
 8002220:	9302      	str	r3, [sp, #8]
 8002222:	e6db      	b.n	8001fdc <__aeabi_dmul+0x4c>
 8002224:	4642      	mov	r2, r8
 8002226:	3301      	adds	r3, #1
 8002228:	431a      	orrs	r2, r3
 800222a:	002b      	movs	r3, r5
 800222c:	4690      	mov	r8, r2
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	9201      	str	r2, [sp, #4]
 8002232:	4642      	mov	r2, r8
 8002234:	2400      	movs	r4, #0
 8002236:	2000      	movs	r0, #0
 8002238:	2601      	movs	r6, #1
 800223a:	2a0a      	cmp	r2, #10
 800223c:	dc00      	bgt.n	8002240 <__aeabi_dmul+0x2b0>
 800223e:	e6ea      	b.n	8002016 <__aeabi_dmul+0x86>
 8002240:	e72c      	b.n	800209c <__aeabi_dmul+0x10c>
 8002242:	2201      	movs	r2, #1
 8002244:	1ad2      	subs	r2, r2, r3
 8002246:	2a38      	cmp	r2, #56	@ 0x38
 8002248:	dd00      	ble.n	800224c <__aeabi_dmul+0x2bc>
 800224a:	e6f4      	b.n	8002036 <__aeabi_dmul+0xa6>
 800224c:	2a1f      	cmp	r2, #31
 800224e:	dc00      	bgt.n	8002252 <__aeabi_dmul+0x2c2>
 8002250:	e12a      	b.n	80024a8 <__aeabi_dmul+0x518>
 8002252:	211f      	movs	r1, #31
 8002254:	4249      	negs	r1, r1
 8002256:	1acb      	subs	r3, r1, r3
 8002258:	0021      	movs	r1, r4
 800225a:	40d9      	lsrs	r1, r3
 800225c:	000b      	movs	r3, r1
 800225e:	2a20      	cmp	r2, #32
 8002260:	d005      	beq.n	800226e <__aeabi_dmul+0x2de>
 8002262:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <__aeabi_dmul+0x32c>)
 8002264:	9d01      	ldr	r5, [sp, #4]
 8002266:	4694      	mov	ip, r2
 8002268:	4465      	add	r5, ip
 800226a:	40ac      	lsls	r4, r5
 800226c:	4320      	orrs	r0, r4
 800226e:	1e42      	subs	r2, r0, #1
 8002270:	4190      	sbcs	r0, r2
 8002272:	4318      	orrs	r0, r3
 8002274:	2307      	movs	r3, #7
 8002276:	0019      	movs	r1, r3
 8002278:	2400      	movs	r4, #0
 800227a:	4001      	ands	r1, r0
 800227c:	4203      	tst	r3, r0
 800227e:	d00c      	beq.n	800229a <__aeabi_dmul+0x30a>
 8002280:	230f      	movs	r3, #15
 8002282:	4003      	ands	r3, r0
 8002284:	2b04      	cmp	r3, #4
 8002286:	d100      	bne.n	800228a <__aeabi_dmul+0x2fa>
 8002288:	e140      	b.n	800250c <__aeabi_dmul+0x57c>
 800228a:	1d03      	adds	r3, r0, #4
 800228c:	4283      	cmp	r3, r0
 800228e:	41a4      	sbcs	r4, r4
 8002290:	0018      	movs	r0, r3
 8002292:	4264      	negs	r4, r4
 8002294:	0761      	lsls	r1, r4, #29
 8002296:	0264      	lsls	r4, r4, #9
 8002298:	0b24      	lsrs	r4, r4, #12
 800229a:	08c2      	lsrs	r2, r0, #3
 800229c:	2300      	movs	r3, #0
 800229e:	430a      	orrs	r2, r1
 80022a0:	e6cc      	b.n	800203c <__aeabi_dmul+0xac>
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	000007ff 	.word	0x000007ff
 80022a8:	fffffc01 	.word	0xfffffc01
 80022ac:	000003ff 	.word	0x000003ff
 80022b0:	feffffff 	.word	0xfeffffff
 80022b4:	000007fe 	.word	0x000007fe
 80022b8:	fffffc0d 	.word	0xfffffc0d
 80022bc:	0000043e 	.word	0x0000043e
 80022c0:	4649      	mov	r1, r9
 80022c2:	464a      	mov	r2, r9
 80022c4:	0409      	lsls	r1, r1, #16
 80022c6:	0c09      	lsrs	r1, r1, #16
 80022c8:	000d      	movs	r5, r1
 80022ca:	0c16      	lsrs	r6, r2, #16
 80022cc:	0c02      	lsrs	r2, r0, #16
 80022ce:	0400      	lsls	r0, r0, #16
 80022d0:	0c00      	lsrs	r0, r0, #16
 80022d2:	4345      	muls	r5, r0
 80022d4:	46ac      	mov	ip, r5
 80022d6:	0005      	movs	r5, r0
 80022d8:	4375      	muls	r5, r6
 80022da:	46a8      	mov	r8, r5
 80022dc:	0015      	movs	r5, r2
 80022de:	000f      	movs	r7, r1
 80022e0:	4375      	muls	r5, r6
 80022e2:	9200      	str	r2, [sp, #0]
 80022e4:	9502      	str	r5, [sp, #8]
 80022e6:	002a      	movs	r2, r5
 80022e8:	9d00      	ldr	r5, [sp, #0]
 80022ea:	436f      	muls	r7, r5
 80022ec:	4665      	mov	r5, ip
 80022ee:	0c2d      	lsrs	r5, r5, #16
 80022f0:	46a9      	mov	r9, r5
 80022f2:	4447      	add	r7, r8
 80022f4:	444f      	add	r7, r9
 80022f6:	45b8      	cmp	r8, r7
 80022f8:	d905      	bls.n	8002306 <__aeabi_dmul+0x376>
 80022fa:	0015      	movs	r5, r2
 80022fc:	2280      	movs	r2, #128	@ 0x80
 80022fe:	0252      	lsls	r2, r2, #9
 8002300:	4690      	mov	r8, r2
 8002302:	4445      	add	r5, r8
 8002304:	9502      	str	r5, [sp, #8]
 8002306:	0c3d      	lsrs	r5, r7, #16
 8002308:	9503      	str	r5, [sp, #12]
 800230a:	4665      	mov	r5, ip
 800230c:	042d      	lsls	r5, r5, #16
 800230e:	043f      	lsls	r7, r7, #16
 8002310:	0c2d      	lsrs	r5, r5, #16
 8002312:	46ac      	mov	ip, r5
 8002314:	003d      	movs	r5, r7
 8002316:	4465      	add	r5, ip
 8002318:	9504      	str	r5, [sp, #16]
 800231a:	0c25      	lsrs	r5, r4, #16
 800231c:	0424      	lsls	r4, r4, #16
 800231e:	0c24      	lsrs	r4, r4, #16
 8002320:	46ac      	mov	ip, r5
 8002322:	0025      	movs	r5, r4
 8002324:	4375      	muls	r5, r6
 8002326:	46a8      	mov	r8, r5
 8002328:	4665      	mov	r5, ip
 800232a:	000f      	movs	r7, r1
 800232c:	4369      	muls	r1, r5
 800232e:	4441      	add	r1, r8
 8002330:	4689      	mov	r9, r1
 8002332:	4367      	muls	r7, r4
 8002334:	0c39      	lsrs	r1, r7, #16
 8002336:	4449      	add	r1, r9
 8002338:	436e      	muls	r6, r5
 800233a:	4588      	cmp	r8, r1
 800233c:	d903      	bls.n	8002346 <__aeabi_dmul+0x3b6>
 800233e:	2280      	movs	r2, #128	@ 0x80
 8002340:	0252      	lsls	r2, r2, #9
 8002342:	4690      	mov	r8, r2
 8002344:	4446      	add	r6, r8
 8002346:	0c0d      	lsrs	r5, r1, #16
 8002348:	46a8      	mov	r8, r5
 800234a:	0035      	movs	r5, r6
 800234c:	4445      	add	r5, r8
 800234e:	9505      	str	r5, [sp, #20]
 8002350:	9d03      	ldr	r5, [sp, #12]
 8002352:	043f      	lsls	r7, r7, #16
 8002354:	46a8      	mov	r8, r5
 8002356:	0c3f      	lsrs	r7, r7, #16
 8002358:	0409      	lsls	r1, r1, #16
 800235a:	19c9      	adds	r1, r1, r7
 800235c:	4488      	add	r8, r1
 800235e:	4645      	mov	r5, r8
 8002360:	9503      	str	r5, [sp, #12]
 8002362:	4655      	mov	r5, sl
 8002364:	042e      	lsls	r6, r5, #16
 8002366:	0c36      	lsrs	r6, r6, #16
 8002368:	0c2f      	lsrs	r7, r5, #16
 800236a:	0035      	movs	r5, r6
 800236c:	4345      	muls	r5, r0
 800236e:	4378      	muls	r0, r7
 8002370:	4681      	mov	r9, r0
 8002372:	0038      	movs	r0, r7
 8002374:	46a8      	mov	r8, r5
 8002376:	0c2d      	lsrs	r5, r5, #16
 8002378:	46aa      	mov	sl, r5
 800237a:	9a00      	ldr	r2, [sp, #0]
 800237c:	4350      	muls	r0, r2
 800237e:	4372      	muls	r2, r6
 8002380:	444a      	add	r2, r9
 8002382:	4452      	add	r2, sl
 8002384:	4591      	cmp	r9, r2
 8002386:	d903      	bls.n	8002390 <__aeabi_dmul+0x400>
 8002388:	2580      	movs	r5, #128	@ 0x80
 800238a:	026d      	lsls	r5, r5, #9
 800238c:	46a9      	mov	r9, r5
 800238e:	4448      	add	r0, r9
 8002390:	0c15      	lsrs	r5, r2, #16
 8002392:	46a9      	mov	r9, r5
 8002394:	4645      	mov	r5, r8
 8002396:	042d      	lsls	r5, r5, #16
 8002398:	0c2d      	lsrs	r5, r5, #16
 800239a:	46a8      	mov	r8, r5
 800239c:	4665      	mov	r5, ip
 800239e:	437d      	muls	r5, r7
 80023a0:	0412      	lsls	r2, r2, #16
 80023a2:	4448      	add	r0, r9
 80023a4:	4490      	add	r8, r2
 80023a6:	46a9      	mov	r9, r5
 80023a8:	0032      	movs	r2, r6
 80023aa:	4665      	mov	r5, ip
 80023ac:	4362      	muls	r2, r4
 80023ae:	436e      	muls	r6, r5
 80023b0:	437c      	muls	r4, r7
 80023b2:	0c17      	lsrs	r7, r2, #16
 80023b4:	1936      	adds	r6, r6, r4
 80023b6:	19bf      	adds	r7, r7, r6
 80023b8:	42bc      	cmp	r4, r7
 80023ba:	d903      	bls.n	80023c4 <__aeabi_dmul+0x434>
 80023bc:	2480      	movs	r4, #128	@ 0x80
 80023be:	0264      	lsls	r4, r4, #9
 80023c0:	46a4      	mov	ip, r4
 80023c2:	44e1      	add	r9, ip
 80023c4:	9c02      	ldr	r4, [sp, #8]
 80023c6:	9e03      	ldr	r6, [sp, #12]
 80023c8:	46a4      	mov	ip, r4
 80023ca:	9d05      	ldr	r5, [sp, #20]
 80023cc:	4466      	add	r6, ip
 80023ce:	428e      	cmp	r6, r1
 80023d0:	4189      	sbcs	r1, r1
 80023d2:	46ac      	mov	ip, r5
 80023d4:	0412      	lsls	r2, r2, #16
 80023d6:	043c      	lsls	r4, r7, #16
 80023d8:	0c12      	lsrs	r2, r2, #16
 80023da:	18a2      	adds	r2, r4, r2
 80023dc:	4462      	add	r2, ip
 80023de:	4249      	negs	r1, r1
 80023e0:	1854      	adds	r4, r2, r1
 80023e2:	4446      	add	r6, r8
 80023e4:	46a4      	mov	ip, r4
 80023e6:	4546      	cmp	r6, r8
 80023e8:	41a4      	sbcs	r4, r4
 80023ea:	4682      	mov	sl, r0
 80023ec:	4264      	negs	r4, r4
 80023ee:	46a0      	mov	r8, r4
 80023f0:	42aa      	cmp	r2, r5
 80023f2:	4192      	sbcs	r2, r2
 80023f4:	458c      	cmp	ip, r1
 80023f6:	4189      	sbcs	r1, r1
 80023f8:	44e2      	add	sl, ip
 80023fa:	44d0      	add	r8, sl
 80023fc:	4249      	negs	r1, r1
 80023fe:	4252      	negs	r2, r2
 8002400:	430a      	orrs	r2, r1
 8002402:	45a0      	cmp	r8, r4
 8002404:	41a4      	sbcs	r4, r4
 8002406:	4582      	cmp	sl, r0
 8002408:	4189      	sbcs	r1, r1
 800240a:	4264      	negs	r4, r4
 800240c:	4249      	negs	r1, r1
 800240e:	430c      	orrs	r4, r1
 8002410:	4641      	mov	r1, r8
 8002412:	0c3f      	lsrs	r7, r7, #16
 8002414:	19d2      	adds	r2, r2, r7
 8002416:	1912      	adds	r2, r2, r4
 8002418:	0dcc      	lsrs	r4, r1, #23
 800241a:	9904      	ldr	r1, [sp, #16]
 800241c:	0270      	lsls	r0, r6, #9
 800241e:	4308      	orrs	r0, r1
 8002420:	1e41      	subs	r1, r0, #1
 8002422:	4188      	sbcs	r0, r1
 8002424:	4641      	mov	r1, r8
 8002426:	444a      	add	r2, r9
 8002428:	0df6      	lsrs	r6, r6, #23
 800242a:	0252      	lsls	r2, r2, #9
 800242c:	4330      	orrs	r0, r6
 800242e:	0249      	lsls	r1, r1, #9
 8002430:	4314      	orrs	r4, r2
 8002432:	4308      	orrs	r0, r1
 8002434:	01d2      	lsls	r2, r2, #7
 8002436:	d535      	bpl.n	80024a4 <__aeabi_dmul+0x514>
 8002438:	2201      	movs	r2, #1
 800243a:	0843      	lsrs	r3, r0, #1
 800243c:	4002      	ands	r2, r0
 800243e:	4313      	orrs	r3, r2
 8002440:	07e0      	lsls	r0, r4, #31
 8002442:	4318      	orrs	r0, r3
 8002444:	0864      	lsrs	r4, r4, #1
 8002446:	e634      	b.n	80020b2 <__aeabi_dmul+0x122>
 8002448:	9b00      	ldr	r3, [sp, #0]
 800244a:	46a2      	mov	sl, r4
 800244c:	469b      	mov	fp, r3
 800244e:	4681      	mov	r9, r0
 8002450:	2480      	movs	r4, #128	@ 0x80
 8002452:	4653      	mov	r3, sl
 8002454:	0324      	lsls	r4, r4, #12
 8002456:	431c      	orrs	r4, r3
 8002458:	0324      	lsls	r4, r4, #12
 800245a:	464a      	mov	r2, r9
 800245c:	4b2e      	ldr	r3, [pc, #184]	@ (8002518 <__aeabi_dmul+0x588>)
 800245e:	0b24      	lsrs	r4, r4, #12
 8002460:	e5ec      	b.n	800203c <__aeabi_dmul+0xac>
 8002462:	f000 fd53 	bl	8002f0c <__clzsi2>
 8002466:	2315      	movs	r3, #21
 8002468:	469c      	mov	ip, r3
 800246a:	4484      	add	ip, r0
 800246c:	0002      	movs	r2, r0
 800246e:	4663      	mov	r3, ip
 8002470:	3220      	adds	r2, #32
 8002472:	2b1c      	cmp	r3, #28
 8002474:	dc00      	bgt.n	8002478 <__aeabi_dmul+0x4e8>
 8002476:	e684      	b.n	8002182 <__aeabi_dmul+0x1f2>
 8002478:	2300      	movs	r3, #0
 800247a:	4699      	mov	r9, r3
 800247c:	0023      	movs	r3, r4
 800247e:	3808      	subs	r0, #8
 8002480:	4083      	lsls	r3, r0
 8002482:	469a      	mov	sl, r3
 8002484:	e68e      	b.n	80021a4 <__aeabi_dmul+0x214>
 8002486:	f000 fd41 	bl	8002f0c <__clzsi2>
 800248a:	0002      	movs	r2, r0
 800248c:	0003      	movs	r3, r0
 800248e:	3215      	adds	r2, #21
 8002490:	3320      	adds	r3, #32
 8002492:	2a1c      	cmp	r2, #28
 8002494:	dc00      	bgt.n	8002498 <__aeabi_dmul+0x508>
 8002496:	e64e      	b.n	8002136 <__aeabi_dmul+0x1a6>
 8002498:	0002      	movs	r2, r0
 800249a:	0034      	movs	r4, r6
 800249c:	3a08      	subs	r2, #8
 800249e:	2000      	movs	r0, #0
 80024a0:	4094      	lsls	r4, r2
 80024a2:	e652      	b.n	800214a <__aeabi_dmul+0x1ba>
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	e604      	b.n	80020b2 <__aeabi_dmul+0x122>
 80024a8:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <__aeabi_dmul+0x58c>)
 80024aa:	0021      	movs	r1, r4
 80024ac:	469c      	mov	ip, r3
 80024ae:	0003      	movs	r3, r0
 80024b0:	9d01      	ldr	r5, [sp, #4]
 80024b2:	40d3      	lsrs	r3, r2
 80024b4:	4465      	add	r5, ip
 80024b6:	40a9      	lsls	r1, r5
 80024b8:	4319      	orrs	r1, r3
 80024ba:	0003      	movs	r3, r0
 80024bc:	40ab      	lsls	r3, r5
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	4183      	sbcs	r3, r0
 80024c2:	4319      	orrs	r1, r3
 80024c4:	0008      	movs	r0, r1
 80024c6:	40d4      	lsrs	r4, r2
 80024c8:	074b      	lsls	r3, r1, #29
 80024ca:	d009      	beq.n	80024e0 <__aeabi_dmul+0x550>
 80024cc:	230f      	movs	r3, #15
 80024ce:	400b      	ands	r3, r1
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d005      	beq.n	80024e0 <__aeabi_dmul+0x550>
 80024d4:	1d0b      	adds	r3, r1, #4
 80024d6:	428b      	cmp	r3, r1
 80024d8:	4180      	sbcs	r0, r0
 80024da:	4240      	negs	r0, r0
 80024dc:	1824      	adds	r4, r4, r0
 80024de:	0018      	movs	r0, r3
 80024e0:	0223      	lsls	r3, r4, #8
 80024e2:	d400      	bmi.n	80024e6 <__aeabi_dmul+0x556>
 80024e4:	e6d6      	b.n	8002294 <__aeabi_dmul+0x304>
 80024e6:	2301      	movs	r3, #1
 80024e8:	2400      	movs	r4, #0
 80024ea:	2200      	movs	r2, #0
 80024ec:	e5a6      	b.n	800203c <__aeabi_dmul+0xac>
 80024ee:	290f      	cmp	r1, #15
 80024f0:	d1aa      	bne.n	8002448 <__aeabi_dmul+0x4b8>
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	4652      	mov	r2, sl
 80024f6:	031b      	lsls	r3, r3, #12
 80024f8:	421a      	tst	r2, r3
 80024fa:	d0a9      	beq.n	8002450 <__aeabi_dmul+0x4c0>
 80024fc:	421c      	tst	r4, r3
 80024fe:	d1a7      	bne.n	8002450 <__aeabi_dmul+0x4c0>
 8002500:	431c      	orrs	r4, r3
 8002502:	9b00      	ldr	r3, [sp, #0]
 8002504:	0002      	movs	r2, r0
 8002506:	469b      	mov	fp, r3
 8002508:	4b03      	ldr	r3, [pc, #12]	@ (8002518 <__aeabi_dmul+0x588>)
 800250a:	e597      	b.n	800203c <__aeabi_dmul+0xac>
 800250c:	2400      	movs	r4, #0
 800250e:	e6c1      	b.n	8002294 <__aeabi_dmul+0x304>
 8002510:	2400      	movs	r4, #0
 8002512:	4b01      	ldr	r3, [pc, #4]	@ (8002518 <__aeabi_dmul+0x588>)
 8002514:	0022      	movs	r2, r4
 8002516:	e591      	b.n	800203c <__aeabi_dmul+0xac>
 8002518:	000007ff 	.word	0x000007ff
 800251c:	0000041e 	.word	0x0000041e

08002520 <__aeabi_dsub>:
 8002520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002522:	464e      	mov	r6, r9
 8002524:	4645      	mov	r5, r8
 8002526:	46de      	mov	lr, fp
 8002528:	4657      	mov	r7, sl
 800252a:	b5e0      	push	{r5, r6, r7, lr}
 800252c:	b085      	sub	sp, #20
 800252e:	9000      	str	r0, [sp, #0]
 8002530:	9101      	str	r1, [sp, #4]
 8002532:	030c      	lsls	r4, r1, #12
 8002534:	004f      	lsls	r7, r1, #1
 8002536:	0fce      	lsrs	r6, r1, #31
 8002538:	0a61      	lsrs	r1, r4, #9
 800253a:	9c00      	ldr	r4, [sp, #0]
 800253c:	46b0      	mov	r8, r6
 800253e:	0f64      	lsrs	r4, r4, #29
 8002540:	430c      	orrs	r4, r1
 8002542:	9900      	ldr	r1, [sp, #0]
 8002544:	0d7f      	lsrs	r7, r7, #21
 8002546:	00c8      	lsls	r0, r1, #3
 8002548:	0011      	movs	r1, r2
 800254a:	001a      	movs	r2, r3
 800254c:	031b      	lsls	r3, r3, #12
 800254e:	469c      	mov	ip, r3
 8002550:	9100      	str	r1, [sp, #0]
 8002552:	9201      	str	r2, [sp, #4]
 8002554:	0051      	lsls	r1, r2, #1
 8002556:	0d4b      	lsrs	r3, r1, #21
 8002558:	4699      	mov	r9, r3
 800255a:	9b01      	ldr	r3, [sp, #4]
 800255c:	9d00      	ldr	r5, [sp, #0]
 800255e:	0fd9      	lsrs	r1, r3, #31
 8002560:	4663      	mov	r3, ip
 8002562:	0f6a      	lsrs	r2, r5, #29
 8002564:	0a5b      	lsrs	r3, r3, #9
 8002566:	4313      	orrs	r3, r2
 8002568:	00ea      	lsls	r2, r5, #3
 800256a:	4694      	mov	ip, r2
 800256c:	4693      	mov	fp, r2
 800256e:	4ac1      	ldr	r2, [pc, #772]	@ (8002874 <__aeabi_dsub+0x354>)
 8002570:	9003      	str	r0, [sp, #12]
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	4591      	cmp	r9, r2
 8002576:	d100      	bne.n	800257a <__aeabi_dsub+0x5a>
 8002578:	e0cd      	b.n	8002716 <__aeabi_dsub+0x1f6>
 800257a:	2501      	movs	r5, #1
 800257c:	4069      	eors	r1, r5
 800257e:	464d      	mov	r5, r9
 8002580:	1b7d      	subs	r5, r7, r5
 8002582:	46aa      	mov	sl, r5
 8002584:	428e      	cmp	r6, r1
 8002586:	d100      	bne.n	800258a <__aeabi_dsub+0x6a>
 8002588:	e080      	b.n	800268c <__aeabi_dsub+0x16c>
 800258a:	2d00      	cmp	r5, #0
 800258c:	dc00      	bgt.n	8002590 <__aeabi_dsub+0x70>
 800258e:	e335      	b.n	8002bfc <__aeabi_dsub+0x6dc>
 8002590:	4649      	mov	r1, r9
 8002592:	2900      	cmp	r1, #0
 8002594:	d100      	bne.n	8002598 <__aeabi_dsub+0x78>
 8002596:	e0df      	b.n	8002758 <__aeabi_dsub+0x238>
 8002598:	4297      	cmp	r7, r2
 800259a:	d100      	bne.n	800259e <__aeabi_dsub+0x7e>
 800259c:	e194      	b.n	80028c8 <__aeabi_dsub+0x3a8>
 800259e:	4652      	mov	r2, sl
 80025a0:	2501      	movs	r5, #1
 80025a2:	2a38      	cmp	r2, #56	@ 0x38
 80025a4:	dc19      	bgt.n	80025da <__aeabi_dsub+0xba>
 80025a6:	2280      	movs	r2, #128	@ 0x80
 80025a8:	9b02      	ldr	r3, [sp, #8]
 80025aa:	0412      	lsls	r2, r2, #16
 80025ac:	4313      	orrs	r3, r2
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	4652      	mov	r2, sl
 80025b2:	2a1f      	cmp	r2, #31
 80025b4:	dd00      	ble.n	80025b8 <__aeabi_dsub+0x98>
 80025b6:	e1e3      	b.n	8002980 <__aeabi_dsub+0x460>
 80025b8:	4653      	mov	r3, sl
 80025ba:	2220      	movs	r2, #32
 80025bc:	4661      	mov	r1, ip
 80025be:	9d02      	ldr	r5, [sp, #8]
 80025c0:	1ad2      	subs	r2, r2, r3
 80025c2:	4095      	lsls	r5, r2
 80025c4:	40d9      	lsrs	r1, r3
 80025c6:	430d      	orrs	r5, r1
 80025c8:	4661      	mov	r1, ip
 80025ca:	4091      	lsls	r1, r2
 80025cc:	000a      	movs	r2, r1
 80025ce:	1e51      	subs	r1, r2, #1
 80025d0:	418a      	sbcs	r2, r1
 80025d2:	4315      	orrs	r5, r2
 80025d4:	9a02      	ldr	r2, [sp, #8]
 80025d6:	40da      	lsrs	r2, r3
 80025d8:	1aa4      	subs	r4, r4, r2
 80025da:	1b45      	subs	r5, r0, r5
 80025dc:	42a8      	cmp	r0, r5
 80025de:	4180      	sbcs	r0, r0
 80025e0:	4240      	negs	r0, r0
 80025e2:	1a24      	subs	r4, r4, r0
 80025e4:	0223      	lsls	r3, r4, #8
 80025e6:	d400      	bmi.n	80025ea <__aeabi_dsub+0xca>
 80025e8:	e13d      	b.n	8002866 <__aeabi_dsub+0x346>
 80025ea:	0264      	lsls	r4, r4, #9
 80025ec:	0a64      	lsrs	r4, r4, #9
 80025ee:	2c00      	cmp	r4, #0
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0xd4>
 80025f2:	e147      	b.n	8002884 <__aeabi_dsub+0x364>
 80025f4:	0020      	movs	r0, r4
 80025f6:	f000 fc89 	bl	8002f0c <__clzsi2>
 80025fa:	0003      	movs	r3, r0
 80025fc:	3b08      	subs	r3, #8
 80025fe:	2120      	movs	r1, #32
 8002600:	0028      	movs	r0, r5
 8002602:	1aca      	subs	r2, r1, r3
 8002604:	40d0      	lsrs	r0, r2
 8002606:	409c      	lsls	r4, r3
 8002608:	0002      	movs	r2, r0
 800260a:	409d      	lsls	r5, r3
 800260c:	4322      	orrs	r2, r4
 800260e:	429f      	cmp	r7, r3
 8002610:	dd00      	ble.n	8002614 <__aeabi_dsub+0xf4>
 8002612:	e177      	b.n	8002904 <__aeabi_dsub+0x3e4>
 8002614:	1bd8      	subs	r0, r3, r7
 8002616:	3001      	adds	r0, #1
 8002618:	1a09      	subs	r1, r1, r0
 800261a:	002c      	movs	r4, r5
 800261c:	408d      	lsls	r5, r1
 800261e:	40c4      	lsrs	r4, r0
 8002620:	1e6b      	subs	r3, r5, #1
 8002622:	419d      	sbcs	r5, r3
 8002624:	0013      	movs	r3, r2
 8002626:	40c2      	lsrs	r2, r0
 8002628:	408b      	lsls	r3, r1
 800262a:	4325      	orrs	r5, r4
 800262c:	2700      	movs	r7, #0
 800262e:	0014      	movs	r4, r2
 8002630:	431d      	orrs	r5, r3
 8002632:	076b      	lsls	r3, r5, #29
 8002634:	d009      	beq.n	800264a <__aeabi_dsub+0x12a>
 8002636:	230f      	movs	r3, #15
 8002638:	402b      	ands	r3, r5
 800263a:	2b04      	cmp	r3, #4
 800263c:	d005      	beq.n	800264a <__aeabi_dsub+0x12a>
 800263e:	1d2b      	adds	r3, r5, #4
 8002640:	42ab      	cmp	r3, r5
 8002642:	41ad      	sbcs	r5, r5
 8002644:	426d      	negs	r5, r5
 8002646:	1964      	adds	r4, r4, r5
 8002648:	001d      	movs	r5, r3
 800264a:	0223      	lsls	r3, r4, #8
 800264c:	d400      	bmi.n	8002650 <__aeabi_dsub+0x130>
 800264e:	e140      	b.n	80028d2 <__aeabi_dsub+0x3b2>
 8002650:	4a88      	ldr	r2, [pc, #544]	@ (8002874 <__aeabi_dsub+0x354>)
 8002652:	3701      	adds	r7, #1
 8002654:	4297      	cmp	r7, r2
 8002656:	d100      	bne.n	800265a <__aeabi_dsub+0x13a>
 8002658:	e101      	b.n	800285e <__aeabi_dsub+0x33e>
 800265a:	2601      	movs	r6, #1
 800265c:	4643      	mov	r3, r8
 800265e:	4986      	ldr	r1, [pc, #536]	@ (8002878 <__aeabi_dsub+0x358>)
 8002660:	08ed      	lsrs	r5, r5, #3
 8002662:	4021      	ands	r1, r4
 8002664:	074a      	lsls	r2, r1, #29
 8002666:	432a      	orrs	r2, r5
 8002668:	057c      	lsls	r4, r7, #21
 800266a:	024d      	lsls	r5, r1, #9
 800266c:	0b2d      	lsrs	r5, r5, #12
 800266e:	0d64      	lsrs	r4, r4, #21
 8002670:	401e      	ands	r6, r3
 8002672:	0524      	lsls	r4, r4, #20
 8002674:	432c      	orrs	r4, r5
 8002676:	07f6      	lsls	r6, r6, #31
 8002678:	4334      	orrs	r4, r6
 800267a:	0010      	movs	r0, r2
 800267c:	0021      	movs	r1, r4
 800267e:	b005      	add	sp, #20
 8002680:	bcf0      	pop	{r4, r5, r6, r7}
 8002682:	46bb      	mov	fp, r7
 8002684:	46b2      	mov	sl, r6
 8002686:	46a9      	mov	r9, r5
 8002688:	46a0      	mov	r8, r4
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268c:	2d00      	cmp	r5, #0
 800268e:	dc00      	bgt.n	8002692 <__aeabi_dsub+0x172>
 8002690:	e2d0      	b.n	8002c34 <__aeabi_dsub+0x714>
 8002692:	4649      	mov	r1, r9
 8002694:	2900      	cmp	r1, #0
 8002696:	d000      	beq.n	800269a <__aeabi_dsub+0x17a>
 8002698:	e0d4      	b.n	8002844 <__aeabi_dsub+0x324>
 800269a:	4661      	mov	r1, ip
 800269c:	9b02      	ldr	r3, [sp, #8]
 800269e:	4319      	orrs	r1, r3
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x184>
 80026a2:	e12b      	b.n	80028fc <__aeabi_dsub+0x3dc>
 80026a4:	1e69      	subs	r1, r5, #1
 80026a6:	2d01      	cmp	r5, #1
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x18c>
 80026aa:	e1d9      	b.n	8002a60 <__aeabi_dsub+0x540>
 80026ac:	4295      	cmp	r5, r2
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dsub+0x192>
 80026b0:	e10a      	b.n	80028c8 <__aeabi_dsub+0x3a8>
 80026b2:	2501      	movs	r5, #1
 80026b4:	2938      	cmp	r1, #56	@ 0x38
 80026b6:	dc17      	bgt.n	80026e8 <__aeabi_dsub+0x1c8>
 80026b8:	468a      	mov	sl, r1
 80026ba:	4653      	mov	r3, sl
 80026bc:	2b1f      	cmp	r3, #31
 80026be:	dd00      	ble.n	80026c2 <__aeabi_dsub+0x1a2>
 80026c0:	e1e7      	b.n	8002a92 <__aeabi_dsub+0x572>
 80026c2:	2220      	movs	r2, #32
 80026c4:	1ad2      	subs	r2, r2, r3
 80026c6:	9b02      	ldr	r3, [sp, #8]
 80026c8:	4661      	mov	r1, ip
 80026ca:	4093      	lsls	r3, r2
 80026cc:	001d      	movs	r5, r3
 80026ce:	4653      	mov	r3, sl
 80026d0:	40d9      	lsrs	r1, r3
 80026d2:	4663      	mov	r3, ip
 80026d4:	4093      	lsls	r3, r2
 80026d6:	001a      	movs	r2, r3
 80026d8:	430d      	orrs	r5, r1
 80026da:	1e51      	subs	r1, r2, #1
 80026dc:	418a      	sbcs	r2, r1
 80026de:	4653      	mov	r3, sl
 80026e0:	4315      	orrs	r5, r2
 80026e2:	9a02      	ldr	r2, [sp, #8]
 80026e4:	40da      	lsrs	r2, r3
 80026e6:	18a4      	adds	r4, r4, r2
 80026e8:	182d      	adds	r5, r5, r0
 80026ea:	4285      	cmp	r5, r0
 80026ec:	4180      	sbcs	r0, r0
 80026ee:	4240      	negs	r0, r0
 80026f0:	1824      	adds	r4, r4, r0
 80026f2:	0223      	lsls	r3, r4, #8
 80026f4:	d400      	bmi.n	80026f8 <__aeabi_dsub+0x1d8>
 80026f6:	e0b6      	b.n	8002866 <__aeabi_dsub+0x346>
 80026f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002874 <__aeabi_dsub+0x354>)
 80026fa:	3701      	adds	r7, #1
 80026fc:	429f      	cmp	r7, r3
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x1e2>
 8002700:	e0ad      	b.n	800285e <__aeabi_dsub+0x33e>
 8002702:	2101      	movs	r1, #1
 8002704:	4b5c      	ldr	r3, [pc, #368]	@ (8002878 <__aeabi_dsub+0x358>)
 8002706:	086a      	lsrs	r2, r5, #1
 8002708:	401c      	ands	r4, r3
 800270a:	4029      	ands	r1, r5
 800270c:	430a      	orrs	r2, r1
 800270e:	07e5      	lsls	r5, r4, #31
 8002710:	4315      	orrs	r5, r2
 8002712:	0864      	lsrs	r4, r4, #1
 8002714:	e78d      	b.n	8002632 <__aeabi_dsub+0x112>
 8002716:	4a59      	ldr	r2, [pc, #356]	@ (800287c <__aeabi_dsub+0x35c>)
 8002718:	9b02      	ldr	r3, [sp, #8]
 800271a:	4692      	mov	sl, r2
 800271c:	4662      	mov	r2, ip
 800271e:	44ba      	add	sl, r7
 8002720:	431a      	orrs	r2, r3
 8002722:	d02c      	beq.n	800277e <__aeabi_dsub+0x25e>
 8002724:	428e      	cmp	r6, r1
 8002726:	d02e      	beq.n	8002786 <__aeabi_dsub+0x266>
 8002728:	4652      	mov	r2, sl
 800272a:	2a00      	cmp	r2, #0
 800272c:	d060      	beq.n	80027f0 <__aeabi_dsub+0x2d0>
 800272e:	2f00      	cmp	r7, #0
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x214>
 8002732:	e0db      	b.n	80028ec <__aeabi_dsub+0x3cc>
 8002734:	4663      	mov	r3, ip
 8002736:	000e      	movs	r6, r1
 8002738:	9c02      	ldr	r4, [sp, #8]
 800273a:	08d8      	lsrs	r0, r3, #3
 800273c:	0762      	lsls	r2, r4, #29
 800273e:	4302      	orrs	r2, r0
 8002740:	08e4      	lsrs	r4, r4, #3
 8002742:	0013      	movs	r3, r2
 8002744:	4323      	orrs	r3, r4
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0x22a>
 8002748:	e254      	b.n	8002bf4 <__aeabi_dsub+0x6d4>
 800274a:	2580      	movs	r5, #128	@ 0x80
 800274c:	032d      	lsls	r5, r5, #12
 800274e:	4325      	orrs	r5, r4
 8002750:	032d      	lsls	r5, r5, #12
 8002752:	4c48      	ldr	r4, [pc, #288]	@ (8002874 <__aeabi_dsub+0x354>)
 8002754:	0b2d      	lsrs	r5, r5, #12
 8002756:	e78c      	b.n	8002672 <__aeabi_dsub+0x152>
 8002758:	4661      	mov	r1, ip
 800275a:	9b02      	ldr	r3, [sp, #8]
 800275c:	4319      	orrs	r1, r3
 800275e:	d100      	bne.n	8002762 <__aeabi_dsub+0x242>
 8002760:	e0cc      	b.n	80028fc <__aeabi_dsub+0x3dc>
 8002762:	0029      	movs	r1, r5
 8002764:	3901      	subs	r1, #1
 8002766:	2d01      	cmp	r5, #1
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x24c>
 800276a:	e188      	b.n	8002a7e <__aeabi_dsub+0x55e>
 800276c:	4295      	cmp	r5, r2
 800276e:	d100      	bne.n	8002772 <__aeabi_dsub+0x252>
 8002770:	e0aa      	b.n	80028c8 <__aeabi_dsub+0x3a8>
 8002772:	2501      	movs	r5, #1
 8002774:	2938      	cmp	r1, #56	@ 0x38
 8002776:	dd00      	ble.n	800277a <__aeabi_dsub+0x25a>
 8002778:	e72f      	b.n	80025da <__aeabi_dsub+0xba>
 800277a:	468a      	mov	sl, r1
 800277c:	e718      	b.n	80025b0 <__aeabi_dsub+0x90>
 800277e:	2201      	movs	r2, #1
 8002780:	4051      	eors	r1, r2
 8002782:	428e      	cmp	r6, r1
 8002784:	d1d0      	bne.n	8002728 <__aeabi_dsub+0x208>
 8002786:	4653      	mov	r3, sl
 8002788:	2b00      	cmp	r3, #0
 800278a:	d100      	bne.n	800278e <__aeabi_dsub+0x26e>
 800278c:	e0be      	b.n	800290c <__aeabi_dsub+0x3ec>
 800278e:	2f00      	cmp	r7, #0
 8002790:	d000      	beq.n	8002794 <__aeabi_dsub+0x274>
 8002792:	e138      	b.n	8002a06 <__aeabi_dsub+0x4e6>
 8002794:	46ca      	mov	sl, r9
 8002796:	0022      	movs	r2, r4
 8002798:	4302      	orrs	r2, r0
 800279a:	d100      	bne.n	800279e <__aeabi_dsub+0x27e>
 800279c:	e1e2      	b.n	8002b64 <__aeabi_dsub+0x644>
 800279e:	4653      	mov	r3, sl
 80027a0:	1e59      	subs	r1, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x288>
 80027a6:	e20d      	b.n	8002bc4 <__aeabi_dsub+0x6a4>
 80027a8:	4a32      	ldr	r2, [pc, #200]	@ (8002874 <__aeabi_dsub+0x354>)
 80027aa:	4592      	cmp	sl, r2
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x290>
 80027ae:	e1d2      	b.n	8002b56 <__aeabi_dsub+0x636>
 80027b0:	2701      	movs	r7, #1
 80027b2:	2938      	cmp	r1, #56	@ 0x38
 80027b4:	dc13      	bgt.n	80027de <__aeabi_dsub+0x2be>
 80027b6:	291f      	cmp	r1, #31
 80027b8:	dd00      	ble.n	80027bc <__aeabi_dsub+0x29c>
 80027ba:	e1ee      	b.n	8002b9a <__aeabi_dsub+0x67a>
 80027bc:	2220      	movs	r2, #32
 80027be:	9b02      	ldr	r3, [sp, #8]
 80027c0:	1a52      	subs	r2, r2, r1
 80027c2:	0025      	movs	r5, r4
 80027c4:	0007      	movs	r7, r0
 80027c6:	469a      	mov	sl, r3
 80027c8:	40cc      	lsrs	r4, r1
 80027ca:	4090      	lsls	r0, r2
 80027cc:	4095      	lsls	r5, r2
 80027ce:	40cf      	lsrs	r7, r1
 80027d0:	44a2      	add	sl, r4
 80027d2:	1e42      	subs	r2, r0, #1
 80027d4:	4190      	sbcs	r0, r2
 80027d6:	4653      	mov	r3, sl
 80027d8:	432f      	orrs	r7, r5
 80027da:	4307      	orrs	r7, r0
 80027dc:	9302      	str	r3, [sp, #8]
 80027de:	003d      	movs	r5, r7
 80027e0:	4465      	add	r5, ip
 80027e2:	4565      	cmp	r5, ip
 80027e4:	4192      	sbcs	r2, r2
 80027e6:	9b02      	ldr	r3, [sp, #8]
 80027e8:	4252      	negs	r2, r2
 80027ea:	464f      	mov	r7, r9
 80027ec:	18d4      	adds	r4, r2, r3
 80027ee:	e780      	b.n	80026f2 <__aeabi_dsub+0x1d2>
 80027f0:	4a23      	ldr	r2, [pc, #140]	@ (8002880 <__aeabi_dsub+0x360>)
 80027f2:	1c7d      	adds	r5, r7, #1
 80027f4:	4215      	tst	r5, r2
 80027f6:	d000      	beq.n	80027fa <__aeabi_dsub+0x2da>
 80027f8:	e0aa      	b.n	8002950 <__aeabi_dsub+0x430>
 80027fa:	4662      	mov	r2, ip
 80027fc:	0025      	movs	r5, r4
 80027fe:	9b02      	ldr	r3, [sp, #8]
 8002800:	4305      	orrs	r5, r0
 8002802:	431a      	orrs	r2, r3
 8002804:	2f00      	cmp	r7, #0
 8002806:	d000      	beq.n	800280a <__aeabi_dsub+0x2ea>
 8002808:	e0f5      	b.n	80029f6 <__aeabi_dsub+0x4d6>
 800280a:	2d00      	cmp	r5, #0
 800280c:	d100      	bne.n	8002810 <__aeabi_dsub+0x2f0>
 800280e:	e16b      	b.n	8002ae8 <__aeabi_dsub+0x5c8>
 8002810:	2a00      	cmp	r2, #0
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x2f6>
 8002814:	e152      	b.n	8002abc <__aeabi_dsub+0x59c>
 8002816:	4663      	mov	r3, ip
 8002818:	1ac5      	subs	r5, r0, r3
 800281a:	9b02      	ldr	r3, [sp, #8]
 800281c:	1ae2      	subs	r2, r4, r3
 800281e:	42a8      	cmp	r0, r5
 8002820:	419b      	sbcs	r3, r3
 8002822:	425b      	negs	r3, r3
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	021a      	lsls	r2, r3, #8
 8002828:	d400      	bmi.n	800282c <__aeabi_dsub+0x30c>
 800282a:	e1d5      	b.n	8002bd8 <__aeabi_dsub+0x6b8>
 800282c:	4663      	mov	r3, ip
 800282e:	1a1d      	subs	r5, r3, r0
 8002830:	45ac      	cmp	ip, r5
 8002832:	4192      	sbcs	r2, r2
 8002834:	2601      	movs	r6, #1
 8002836:	9b02      	ldr	r3, [sp, #8]
 8002838:	4252      	negs	r2, r2
 800283a:	1b1c      	subs	r4, r3, r4
 800283c:	4688      	mov	r8, r1
 800283e:	1aa4      	subs	r4, r4, r2
 8002840:	400e      	ands	r6, r1
 8002842:	e6f6      	b.n	8002632 <__aeabi_dsub+0x112>
 8002844:	4297      	cmp	r7, r2
 8002846:	d03f      	beq.n	80028c8 <__aeabi_dsub+0x3a8>
 8002848:	4652      	mov	r2, sl
 800284a:	2501      	movs	r5, #1
 800284c:	2a38      	cmp	r2, #56	@ 0x38
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0x332>
 8002850:	e74a      	b.n	80026e8 <__aeabi_dsub+0x1c8>
 8002852:	2280      	movs	r2, #128	@ 0x80
 8002854:	9b02      	ldr	r3, [sp, #8]
 8002856:	0412      	lsls	r2, r2, #16
 8002858:	4313      	orrs	r3, r2
 800285a:	9302      	str	r3, [sp, #8]
 800285c:	e72d      	b.n	80026ba <__aeabi_dsub+0x19a>
 800285e:	003c      	movs	r4, r7
 8002860:	2500      	movs	r5, #0
 8002862:	2200      	movs	r2, #0
 8002864:	e705      	b.n	8002672 <__aeabi_dsub+0x152>
 8002866:	2307      	movs	r3, #7
 8002868:	402b      	ands	r3, r5
 800286a:	2b00      	cmp	r3, #0
 800286c:	d000      	beq.n	8002870 <__aeabi_dsub+0x350>
 800286e:	e6e2      	b.n	8002636 <__aeabi_dsub+0x116>
 8002870:	e06b      	b.n	800294a <__aeabi_dsub+0x42a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff
 8002878:	ff7fffff 	.word	0xff7fffff
 800287c:	fffff801 	.word	0xfffff801
 8002880:	000007fe 	.word	0x000007fe
 8002884:	0028      	movs	r0, r5
 8002886:	f000 fb41 	bl	8002f0c <__clzsi2>
 800288a:	0003      	movs	r3, r0
 800288c:	3318      	adds	r3, #24
 800288e:	2b1f      	cmp	r3, #31
 8002890:	dc00      	bgt.n	8002894 <__aeabi_dsub+0x374>
 8002892:	e6b4      	b.n	80025fe <__aeabi_dsub+0xde>
 8002894:	002a      	movs	r2, r5
 8002896:	3808      	subs	r0, #8
 8002898:	4082      	lsls	r2, r0
 800289a:	429f      	cmp	r7, r3
 800289c:	dd00      	ble.n	80028a0 <__aeabi_dsub+0x380>
 800289e:	e0b9      	b.n	8002a14 <__aeabi_dsub+0x4f4>
 80028a0:	1bdb      	subs	r3, r3, r7
 80028a2:	1c58      	adds	r0, r3, #1
 80028a4:	281f      	cmp	r0, #31
 80028a6:	dc00      	bgt.n	80028aa <__aeabi_dsub+0x38a>
 80028a8:	e1a0      	b.n	8002bec <__aeabi_dsub+0x6cc>
 80028aa:	0015      	movs	r5, r2
 80028ac:	3b1f      	subs	r3, #31
 80028ae:	40dd      	lsrs	r5, r3
 80028b0:	2820      	cmp	r0, #32
 80028b2:	d005      	beq.n	80028c0 <__aeabi_dsub+0x3a0>
 80028b4:	2340      	movs	r3, #64	@ 0x40
 80028b6:	1a1b      	subs	r3, r3, r0
 80028b8:	409a      	lsls	r2, r3
 80028ba:	1e53      	subs	r3, r2, #1
 80028bc:	419a      	sbcs	r2, r3
 80028be:	4315      	orrs	r5, r2
 80028c0:	2307      	movs	r3, #7
 80028c2:	2700      	movs	r7, #0
 80028c4:	402b      	ands	r3, r5
 80028c6:	e7d0      	b.n	800286a <__aeabi_dsub+0x34a>
 80028c8:	08c0      	lsrs	r0, r0, #3
 80028ca:	0762      	lsls	r2, r4, #29
 80028cc:	4302      	orrs	r2, r0
 80028ce:	08e4      	lsrs	r4, r4, #3
 80028d0:	e737      	b.n	8002742 <__aeabi_dsub+0x222>
 80028d2:	08ea      	lsrs	r2, r5, #3
 80028d4:	0763      	lsls	r3, r4, #29
 80028d6:	431a      	orrs	r2, r3
 80028d8:	4bd3      	ldr	r3, [pc, #844]	@ (8002c28 <__aeabi_dsub+0x708>)
 80028da:	08e4      	lsrs	r4, r4, #3
 80028dc:	429f      	cmp	r7, r3
 80028de:	d100      	bne.n	80028e2 <__aeabi_dsub+0x3c2>
 80028e0:	e72f      	b.n	8002742 <__aeabi_dsub+0x222>
 80028e2:	0324      	lsls	r4, r4, #12
 80028e4:	0b25      	lsrs	r5, r4, #12
 80028e6:	057c      	lsls	r4, r7, #21
 80028e8:	0d64      	lsrs	r4, r4, #21
 80028ea:	e6c2      	b.n	8002672 <__aeabi_dsub+0x152>
 80028ec:	46ca      	mov	sl, r9
 80028ee:	0022      	movs	r2, r4
 80028f0:	4302      	orrs	r2, r0
 80028f2:	d158      	bne.n	80029a6 <__aeabi_dsub+0x486>
 80028f4:	4663      	mov	r3, ip
 80028f6:	000e      	movs	r6, r1
 80028f8:	9c02      	ldr	r4, [sp, #8]
 80028fa:	9303      	str	r3, [sp, #12]
 80028fc:	9b03      	ldr	r3, [sp, #12]
 80028fe:	4657      	mov	r7, sl
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	e7e7      	b.n	80028d4 <__aeabi_dsub+0x3b4>
 8002904:	4cc9      	ldr	r4, [pc, #804]	@ (8002c2c <__aeabi_dsub+0x70c>)
 8002906:	1aff      	subs	r7, r7, r3
 8002908:	4014      	ands	r4, r2
 800290a:	e692      	b.n	8002632 <__aeabi_dsub+0x112>
 800290c:	4dc8      	ldr	r5, [pc, #800]	@ (8002c30 <__aeabi_dsub+0x710>)
 800290e:	1c7a      	adds	r2, r7, #1
 8002910:	422a      	tst	r2, r5
 8002912:	d000      	beq.n	8002916 <__aeabi_dsub+0x3f6>
 8002914:	e084      	b.n	8002a20 <__aeabi_dsub+0x500>
 8002916:	0022      	movs	r2, r4
 8002918:	4302      	orrs	r2, r0
 800291a:	2f00      	cmp	r7, #0
 800291c:	d000      	beq.n	8002920 <__aeabi_dsub+0x400>
 800291e:	e0ef      	b.n	8002b00 <__aeabi_dsub+0x5e0>
 8002920:	2a00      	cmp	r2, #0
 8002922:	d100      	bne.n	8002926 <__aeabi_dsub+0x406>
 8002924:	e0e5      	b.n	8002af2 <__aeabi_dsub+0x5d2>
 8002926:	4662      	mov	r2, ip
 8002928:	9902      	ldr	r1, [sp, #8]
 800292a:	430a      	orrs	r2, r1
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x410>
 800292e:	e0c5      	b.n	8002abc <__aeabi_dsub+0x59c>
 8002930:	4663      	mov	r3, ip
 8002932:	18c5      	adds	r5, r0, r3
 8002934:	468c      	mov	ip, r1
 8002936:	4285      	cmp	r5, r0
 8002938:	4180      	sbcs	r0, r0
 800293a:	4464      	add	r4, ip
 800293c:	4240      	negs	r0, r0
 800293e:	1824      	adds	r4, r4, r0
 8002940:	0223      	lsls	r3, r4, #8
 8002942:	d502      	bpl.n	800294a <__aeabi_dsub+0x42a>
 8002944:	4bb9      	ldr	r3, [pc, #740]	@ (8002c2c <__aeabi_dsub+0x70c>)
 8002946:	3701      	adds	r7, #1
 8002948:	401c      	ands	r4, r3
 800294a:	46ba      	mov	sl, r7
 800294c:	9503      	str	r5, [sp, #12]
 800294e:	e7d5      	b.n	80028fc <__aeabi_dsub+0x3dc>
 8002950:	4662      	mov	r2, ip
 8002952:	1a85      	subs	r5, r0, r2
 8002954:	42a8      	cmp	r0, r5
 8002956:	4192      	sbcs	r2, r2
 8002958:	4252      	negs	r2, r2
 800295a:	4691      	mov	r9, r2
 800295c:	9b02      	ldr	r3, [sp, #8]
 800295e:	1ae3      	subs	r3, r4, r3
 8002960:	001a      	movs	r2, r3
 8002962:	464b      	mov	r3, r9
 8002964:	1ad2      	subs	r2, r2, r3
 8002966:	0013      	movs	r3, r2
 8002968:	4691      	mov	r9, r2
 800296a:	021a      	lsls	r2, r3, #8
 800296c:	d46c      	bmi.n	8002a48 <__aeabi_dsub+0x528>
 800296e:	464a      	mov	r2, r9
 8002970:	464c      	mov	r4, r9
 8002972:	432a      	orrs	r2, r5
 8002974:	d000      	beq.n	8002978 <__aeabi_dsub+0x458>
 8002976:	e63a      	b.n	80025ee <__aeabi_dsub+0xce>
 8002978:	2600      	movs	r6, #0
 800297a:	2400      	movs	r4, #0
 800297c:	2500      	movs	r5, #0
 800297e:	e678      	b.n	8002672 <__aeabi_dsub+0x152>
 8002980:	9902      	ldr	r1, [sp, #8]
 8002982:	4653      	mov	r3, sl
 8002984:	000d      	movs	r5, r1
 8002986:	3a20      	subs	r2, #32
 8002988:	40d5      	lsrs	r5, r2
 800298a:	2b20      	cmp	r3, #32
 800298c:	d006      	beq.n	800299c <__aeabi_dsub+0x47c>
 800298e:	2240      	movs	r2, #64	@ 0x40
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	000b      	movs	r3, r1
 8002994:	4093      	lsls	r3, r2
 8002996:	4662      	mov	r2, ip
 8002998:	431a      	orrs	r2, r3
 800299a:	4693      	mov	fp, r2
 800299c:	465b      	mov	r3, fp
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	4193      	sbcs	r3, r2
 80029a2:	431d      	orrs	r5, r3
 80029a4:	e619      	b.n	80025da <__aeabi_dsub+0xba>
 80029a6:	4653      	mov	r3, sl
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dsub+0x490>
 80029ae:	e0c6      	b.n	8002b3e <__aeabi_dsub+0x61e>
 80029b0:	4e9d      	ldr	r6, [pc, #628]	@ (8002c28 <__aeabi_dsub+0x708>)
 80029b2:	45b2      	cmp	sl, r6
 80029b4:	d100      	bne.n	80029b8 <__aeabi_dsub+0x498>
 80029b6:	e6bd      	b.n	8002734 <__aeabi_dsub+0x214>
 80029b8:	4688      	mov	r8, r1
 80029ba:	000e      	movs	r6, r1
 80029bc:	2501      	movs	r5, #1
 80029be:	2a38      	cmp	r2, #56	@ 0x38
 80029c0:	dc10      	bgt.n	80029e4 <__aeabi_dsub+0x4c4>
 80029c2:	2a1f      	cmp	r2, #31
 80029c4:	dc7f      	bgt.n	8002ac6 <__aeabi_dsub+0x5a6>
 80029c6:	2120      	movs	r1, #32
 80029c8:	0025      	movs	r5, r4
 80029ca:	1a89      	subs	r1, r1, r2
 80029cc:	0007      	movs	r7, r0
 80029ce:	4088      	lsls	r0, r1
 80029d0:	408d      	lsls	r5, r1
 80029d2:	40d7      	lsrs	r7, r2
 80029d4:	40d4      	lsrs	r4, r2
 80029d6:	1e41      	subs	r1, r0, #1
 80029d8:	4188      	sbcs	r0, r1
 80029da:	9b02      	ldr	r3, [sp, #8]
 80029dc:	433d      	orrs	r5, r7
 80029de:	1b1b      	subs	r3, r3, r4
 80029e0:	4305      	orrs	r5, r0
 80029e2:	9302      	str	r3, [sp, #8]
 80029e4:	4662      	mov	r2, ip
 80029e6:	1b55      	subs	r5, r2, r5
 80029e8:	45ac      	cmp	ip, r5
 80029ea:	4192      	sbcs	r2, r2
 80029ec:	9b02      	ldr	r3, [sp, #8]
 80029ee:	4252      	negs	r2, r2
 80029f0:	464f      	mov	r7, r9
 80029f2:	1a9c      	subs	r4, r3, r2
 80029f4:	e5f6      	b.n	80025e4 <__aeabi_dsub+0xc4>
 80029f6:	2d00      	cmp	r5, #0
 80029f8:	d000      	beq.n	80029fc <__aeabi_dsub+0x4dc>
 80029fa:	e0b7      	b.n	8002b6c <__aeabi_dsub+0x64c>
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d100      	bne.n	8002a02 <__aeabi_dsub+0x4e2>
 8002a00:	e0f0      	b.n	8002be4 <__aeabi_dsub+0x6c4>
 8002a02:	2601      	movs	r6, #1
 8002a04:	400e      	ands	r6, r1
 8002a06:	4663      	mov	r3, ip
 8002a08:	9802      	ldr	r0, [sp, #8]
 8002a0a:	08d9      	lsrs	r1, r3, #3
 8002a0c:	0742      	lsls	r2, r0, #29
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	08c4      	lsrs	r4, r0, #3
 8002a12:	e696      	b.n	8002742 <__aeabi_dsub+0x222>
 8002a14:	4c85      	ldr	r4, [pc, #532]	@ (8002c2c <__aeabi_dsub+0x70c>)
 8002a16:	1aff      	subs	r7, r7, r3
 8002a18:	4014      	ands	r4, r2
 8002a1a:	0762      	lsls	r2, r4, #29
 8002a1c:	08e4      	lsrs	r4, r4, #3
 8002a1e:	e760      	b.n	80028e2 <__aeabi_dsub+0x3c2>
 8002a20:	4981      	ldr	r1, [pc, #516]	@ (8002c28 <__aeabi_dsub+0x708>)
 8002a22:	428a      	cmp	r2, r1
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x508>
 8002a26:	e0c9      	b.n	8002bbc <__aeabi_dsub+0x69c>
 8002a28:	4663      	mov	r3, ip
 8002a2a:	18c1      	adds	r1, r0, r3
 8002a2c:	4281      	cmp	r1, r0
 8002a2e:	4180      	sbcs	r0, r0
 8002a30:	9b02      	ldr	r3, [sp, #8]
 8002a32:	4240      	negs	r0, r0
 8002a34:	18e3      	adds	r3, r4, r3
 8002a36:	181b      	adds	r3, r3, r0
 8002a38:	07dd      	lsls	r5, r3, #31
 8002a3a:	085c      	lsrs	r4, r3, #1
 8002a3c:	2307      	movs	r3, #7
 8002a3e:	0849      	lsrs	r1, r1, #1
 8002a40:	430d      	orrs	r5, r1
 8002a42:	0017      	movs	r7, r2
 8002a44:	402b      	ands	r3, r5
 8002a46:	e710      	b.n	800286a <__aeabi_dsub+0x34a>
 8002a48:	4663      	mov	r3, ip
 8002a4a:	1a1d      	subs	r5, r3, r0
 8002a4c:	45ac      	cmp	ip, r5
 8002a4e:	4192      	sbcs	r2, r2
 8002a50:	2601      	movs	r6, #1
 8002a52:	9b02      	ldr	r3, [sp, #8]
 8002a54:	4252      	negs	r2, r2
 8002a56:	1b1c      	subs	r4, r3, r4
 8002a58:	4688      	mov	r8, r1
 8002a5a:	1aa4      	subs	r4, r4, r2
 8002a5c:	400e      	ands	r6, r1
 8002a5e:	e5c6      	b.n	80025ee <__aeabi_dsub+0xce>
 8002a60:	4663      	mov	r3, ip
 8002a62:	18c5      	adds	r5, r0, r3
 8002a64:	9b02      	ldr	r3, [sp, #8]
 8002a66:	4285      	cmp	r5, r0
 8002a68:	4180      	sbcs	r0, r0
 8002a6a:	469c      	mov	ip, r3
 8002a6c:	4240      	negs	r0, r0
 8002a6e:	4464      	add	r4, ip
 8002a70:	1824      	adds	r4, r4, r0
 8002a72:	2701      	movs	r7, #1
 8002a74:	0223      	lsls	r3, r4, #8
 8002a76:	d400      	bmi.n	8002a7a <__aeabi_dsub+0x55a>
 8002a78:	e6f5      	b.n	8002866 <__aeabi_dsub+0x346>
 8002a7a:	2702      	movs	r7, #2
 8002a7c:	e641      	b.n	8002702 <__aeabi_dsub+0x1e2>
 8002a7e:	4663      	mov	r3, ip
 8002a80:	1ac5      	subs	r5, r0, r3
 8002a82:	42a8      	cmp	r0, r5
 8002a84:	4180      	sbcs	r0, r0
 8002a86:	9b02      	ldr	r3, [sp, #8]
 8002a88:	4240      	negs	r0, r0
 8002a8a:	1ae4      	subs	r4, r4, r3
 8002a8c:	2701      	movs	r7, #1
 8002a8e:	1a24      	subs	r4, r4, r0
 8002a90:	e5a8      	b.n	80025e4 <__aeabi_dsub+0xc4>
 8002a92:	9d02      	ldr	r5, [sp, #8]
 8002a94:	4652      	mov	r2, sl
 8002a96:	002b      	movs	r3, r5
 8002a98:	3a20      	subs	r2, #32
 8002a9a:	40d3      	lsrs	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	4653      	mov	r3, sl
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d006      	beq.n	8002ab2 <__aeabi_dsub+0x592>
 8002aa4:	2240      	movs	r2, #64	@ 0x40
 8002aa6:	1ad2      	subs	r2, r2, r3
 8002aa8:	002b      	movs	r3, r5
 8002aaa:	4093      	lsls	r3, r2
 8002aac:	4662      	mov	r2, ip
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	4693      	mov	fp, r2
 8002ab2:	465d      	mov	r5, fp
 8002ab4:	1e6b      	subs	r3, r5, #1
 8002ab6:	419d      	sbcs	r5, r3
 8002ab8:	430d      	orrs	r5, r1
 8002aba:	e615      	b.n	80026e8 <__aeabi_dsub+0x1c8>
 8002abc:	0762      	lsls	r2, r4, #29
 8002abe:	08c0      	lsrs	r0, r0, #3
 8002ac0:	4302      	orrs	r2, r0
 8002ac2:	08e4      	lsrs	r4, r4, #3
 8002ac4:	e70d      	b.n	80028e2 <__aeabi_dsub+0x3c2>
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	0027      	movs	r7, r4
 8002aca:	3920      	subs	r1, #32
 8002acc:	40cf      	lsrs	r7, r1
 8002ace:	2a20      	cmp	r2, #32
 8002ad0:	d005      	beq.n	8002ade <__aeabi_dsub+0x5be>
 8002ad2:	2140      	movs	r1, #64	@ 0x40
 8002ad4:	1a8a      	subs	r2, r1, r2
 8002ad6:	4094      	lsls	r4, r2
 8002ad8:	0025      	movs	r5, r4
 8002ada:	4305      	orrs	r5, r0
 8002adc:	9503      	str	r5, [sp, #12]
 8002ade:	9d03      	ldr	r5, [sp, #12]
 8002ae0:	1e6a      	subs	r2, r5, #1
 8002ae2:	4195      	sbcs	r5, r2
 8002ae4:	433d      	orrs	r5, r7
 8002ae6:	e77d      	b.n	80029e4 <__aeabi_dsub+0x4c4>
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dsub+0x5ce>
 8002aec:	e744      	b.n	8002978 <__aeabi_dsub+0x458>
 8002aee:	2601      	movs	r6, #1
 8002af0:	400e      	ands	r6, r1
 8002af2:	4663      	mov	r3, ip
 8002af4:	08d9      	lsrs	r1, r3, #3
 8002af6:	9b02      	ldr	r3, [sp, #8]
 8002af8:	075a      	lsls	r2, r3, #29
 8002afa:	430a      	orrs	r2, r1
 8002afc:	08dc      	lsrs	r4, r3, #3
 8002afe:	e6f0      	b.n	80028e2 <__aeabi_dsub+0x3c2>
 8002b00:	2a00      	cmp	r2, #0
 8002b02:	d028      	beq.n	8002b56 <__aeabi_dsub+0x636>
 8002b04:	4662      	mov	r2, ip
 8002b06:	9f02      	ldr	r7, [sp, #8]
 8002b08:	08c0      	lsrs	r0, r0, #3
 8002b0a:	433a      	orrs	r2, r7
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x5f0>
 8002b0e:	e6dc      	b.n	80028ca <__aeabi_dsub+0x3aa>
 8002b10:	0762      	lsls	r2, r4, #29
 8002b12:	4310      	orrs	r0, r2
 8002b14:	2280      	movs	r2, #128	@ 0x80
 8002b16:	08e4      	lsrs	r4, r4, #3
 8002b18:	0312      	lsls	r2, r2, #12
 8002b1a:	4214      	tst	r4, r2
 8002b1c:	d009      	beq.n	8002b32 <__aeabi_dsub+0x612>
 8002b1e:	08fd      	lsrs	r5, r7, #3
 8002b20:	4215      	tst	r5, r2
 8002b22:	d106      	bne.n	8002b32 <__aeabi_dsub+0x612>
 8002b24:	4663      	mov	r3, ip
 8002b26:	2601      	movs	r6, #1
 8002b28:	002c      	movs	r4, r5
 8002b2a:	08d8      	lsrs	r0, r3, #3
 8002b2c:	077b      	lsls	r3, r7, #29
 8002b2e:	4318      	orrs	r0, r3
 8002b30:	400e      	ands	r6, r1
 8002b32:	0f42      	lsrs	r2, r0, #29
 8002b34:	00c0      	lsls	r0, r0, #3
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	0752      	lsls	r2, r2, #29
 8002b3a:	4302      	orrs	r2, r0
 8002b3c:	e601      	b.n	8002742 <__aeabi_dsub+0x222>
 8002b3e:	4663      	mov	r3, ip
 8002b40:	1a1d      	subs	r5, r3, r0
 8002b42:	45ac      	cmp	ip, r5
 8002b44:	4192      	sbcs	r2, r2
 8002b46:	9b02      	ldr	r3, [sp, #8]
 8002b48:	4252      	negs	r2, r2
 8002b4a:	1b1c      	subs	r4, r3, r4
 8002b4c:	000e      	movs	r6, r1
 8002b4e:	4688      	mov	r8, r1
 8002b50:	2701      	movs	r7, #1
 8002b52:	1aa4      	subs	r4, r4, r2
 8002b54:	e546      	b.n	80025e4 <__aeabi_dsub+0xc4>
 8002b56:	4663      	mov	r3, ip
 8002b58:	08d9      	lsrs	r1, r3, #3
 8002b5a:	9b02      	ldr	r3, [sp, #8]
 8002b5c:	075a      	lsls	r2, r3, #29
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	08dc      	lsrs	r4, r3, #3
 8002b62:	e5ee      	b.n	8002742 <__aeabi_dsub+0x222>
 8002b64:	4663      	mov	r3, ip
 8002b66:	9c02      	ldr	r4, [sp, #8]
 8002b68:	9303      	str	r3, [sp, #12]
 8002b6a:	e6c7      	b.n	80028fc <__aeabi_dsub+0x3dc>
 8002b6c:	08c0      	lsrs	r0, r0, #3
 8002b6e:	2a00      	cmp	r2, #0
 8002b70:	d100      	bne.n	8002b74 <__aeabi_dsub+0x654>
 8002b72:	e6aa      	b.n	80028ca <__aeabi_dsub+0x3aa>
 8002b74:	0762      	lsls	r2, r4, #29
 8002b76:	4310      	orrs	r0, r2
 8002b78:	2280      	movs	r2, #128	@ 0x80
 8002b7a:	08e4      	lsrs	r4, r4, #3
 8002b7c:	0312      	lsls	r2, r2, #12
 8002b7e:	4214      	tst	r4, r2
 8002b80:	d0d7      	beq.n	8002b32 <__aeabi_dsub+0x612>
 8002b82:	9f02      	ldr	r7, [sp, #8]
 8002b84:	08fd      	lsrs	r5, r7, #3
 8002b86:	4215      	tst	r5, r2
 8002b88:	d1d3      	bne.n	8002b32 <__aeabi_dsub+0x612>
 8002b8a:	4663      	mov	r3, ip
 8002b8c:	2601      	movs	r6, #1
 8002b8e:	08d8      	lsrs	r0, r3, #3
 8002b90:	077b      	lsls	r3, r7, #29
 8002b92:	002c      	movs	r4, r5
 8002b94:	4318      	orrs	r0, r3
 8002b96:	400e      	ands	r6, r1
 8002b98:	e7cb      	b.n	8002b32 <__aeabi_dsub+0x612>
 8002b9a:	000a      	movs	r2, r1
 8002b9c:	0027      	movs	r7, r4
 8002b9e:	3a20      	subs	r2, #32
 8002ba0:	40d7      	lsrs	r7, r2
 8002ba2:	2920      	cmp	r1, #32
 8002ba4:	d005      	beq.n	8002bb2 <__aeabi_dsub+0x692>
 8002ba6:	2240      	movs	r2, #64	@ 0x40
 8002ba8:	1a52      	subs	r2, r2, r1
 8002baa:	4094      	lsls	r4, r2
 8002bac:	0025      	movs	r5, r4
 8002bae:	4305      	orrs	r5, r0
 8002bb0:	9503      	str	r5, [sp, #12]
 8002bb2:	9d03      	ldr	r5, [sp, #12]
 8002bb4:	1e6a      	subs	r2, r5, #1
 8002bb6:	4195      	sbcs	r5, r2
 8002bb8:	432f      	orrs	r7, r5
 8002bba:	e610      	b.n	80027de <__aeabi_dsub+0x2be>
 8002bbc:	0014      	movs	r4, r2
 8002bbe:	2500      	movs	r5, #0
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	e556      	b.n	8002672 <__aeabi_dsub+0x152>
 8002bc4:	9b02      	ldr	r3, [sp, #8]
 8002bc6:	4460      	add	r0, ip
 8002bc8:	4699      	mov	r9, r3
 8002bca:	4560      	cmp	r0, ip
 8002bcc:	4192      	sbcs	r2, r2
 8002bce:	444c      	add	r4, r9
 8002bd0:	4252      	negs	r2, r2
 8002bd2:	0005      	movs	r5, r0
 8002bd4:	18a4      	adds	r4, r4, r2
 8002bd6:	e74c      	b.n	8002a72 <__aeabi_dsub+0x552>
 8002bd8:	001a      	movs	r2, r3
 8002bda:	001c      	movs	r4, r3
 8002bdc:	432a      	orrs	r2, r5
 8002bde:	d000      	beq.n	8002be2 <__aeabi_dsub+0x6c2>
 8002be0:	e6b3      	b.n	800294a <__aeabi_dsub+0x42a>
 8002be2:	e6c9      	b.n	8002978 <__aeabi_dsub+0x458>
 8002be4:	2480      	movs	r4, #128	@ 0x80
 8002be6:	2600      	movs	r6, #0
 8002be8:	0324      	lsls	r4, r4, #12
 8002bea:	e5ae      	b.n	800274a <__aeabi_dsub+0x22a>
 8002bec:	2120      	movs	r1, #32
 8002bee:	2500      	movs	r5, #0
 8002bf0:	1a09      	subs	r1, r1, r0
 8002bf2:	e517      	b.n	8002624 <__aeabi_dsub+0x104>
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2500      	movs	r5, #0
 8002bf8:	4c0b      	ldr	r4, [pc, #44]	@ (8002c28 <__aeabi_dsub+0x708>)
 8002bfa:	e53a      	b.n	8002672 <__aeabi_dsub+0x152>
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x6e2>
 8002c00:	e5f6      	b.n	80027f0 <__aeabi_dsub+0x2d0>
 8002c02:	464b      	mov	r3, r9
 8002c04:	1bda      	subs	r2, r3, r7
 8002c06:	4692      	mov	sl, r2
 8002c08:	2f00      	cmp	r7, #0
 8002c0a:	d100      	bne.n	8002c0e <__aeabi_dsub+0x6ee>
 8002c0c:	e66f      	b.n	80028ee <__aeabi_dsub+0x3ce>
 8002c0e:	2a38      	cmp	r2, #56	@ 0x38
 8002c10:	dc05      	bgt.n	8002c1e <__aeabi_dsub+0x6fe>
 8002c12:	2680      	movs	r6, #128	@ 0x80
 8002c14:	0436      	lsls	r6, r6, #16
 8002c16:	4334      	orrs	r4, r6
 8002c18:	4688      	mov	r8, r1
 8002c1a:	000e      	movs	r6, r1
 8002c1c:	e6d1      	b.n	80029c2 <__aeabi_dsub+0x4a2>
 8002c1e:	4688      	mov	r8, r1
 8002c20:	000e      	movs	r6, r1
 8002c22:	2501      	movs	r5, #1
 8002c24:	e6de      	b.n	80029e4 <__aeabi_dsub+0x4c4>
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	000007ff 	.word	0x000007ff
 8002c2c:	ff7fffff 	.word	0xff7fffff
 8002c30:	000007fe 	.word	0x000007fe
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	d100      	bne.n	8002c3a <__aeabi_dsub+0x71a>
 8002c38:	e668      	b.n	800290c <__aeabi_dsub+0x3ec>
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1bd9      	subs	r1, r3, r7
 8002c3e:	2f00      	cmp	r7, #0
 8002c40:	d101      	bne.n	8002c46 <__aeabi_dsub+0x726>
 8002c42:	468a      	mov	sl, r1
 8002c44:	e5a7      	b.n	8002796 <__aeabi_dsub+0x276>
 8002c46:	2701      	movs	r7, #1
 8002c48:	2938      	cmp	r1, #56	@ 0x38
 8002c4a:	dd00      	ble.n	8002c4e <__aeabi_dsub+0x72e>
 8002c4c:	e5c7      	b.n	80027de <__aeabi_dsub+0x2be>
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	0412      	lsls	r2, r2, #16
 8002c52:	4314      	orrs	r4, r2
 8002c54:	e5af      	b.n	80027b6 <__aeabi_dsub+0x296>
 8002c56:	46c0      	nop			@ (mov r8, r8)

08002c58 <__aeabi_d2iz>:
 8002c58:	000b      	movs	r3, r1
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4d16      	ldr	r5, [pc, #88]	@ (8002cb8 <__aeabi_d2iz+0x60>)
 8002c60:	030c      	lsls	r4, r1, #12
 8002c62:	b082      	sub	sp, #8
 8002c64:	0049      	lsls	r1, r1, #1
 8002c66:	2000      	movs	r0, #0
 8002c68:	9200      	str	r2, [sp, #0]
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	0b24      	lsrs	r4, r4, #12
 8002c6e:	0d49      	lsrs	r1, r1, #21
 8002c70:	0fde      	lsrs	r6, r3, #31
 8002c72:	42a9      	cmp	r1, r5
 8002c74:	dd04      	ble.n	8002c80 <__aeabi_d2iz+0x28>
 8002c76:	4811      	ldr	r0, [pc, #68]	@ (8002cbc <__aeabi_d2iz+0x64>)
 8002c78:	4281      	cmp	r1, r0
 8002c7a:	dd03      	ble.n	8002c84 <__aeabi_d2iz+0x2c>
 8002c7c:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <__aeabi_d2iz+0x68>)
 8002c7e:	18f0      	adds	r0, r6, r3
 8002c80:	b002      	add	sp, #8
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	2080      	movs	r0, #128	@ 0x80
 8002c86:	0340      	lsls	r0, r0, #13
 8002c88:	4320      	orrs	r0, r4
 8002c8a:	4c0e      	ldr	r4, [pc, #56]	@ (8002cc4 <__aeabi_d2iz+0x6c>)
 8002c8c:	1a64      	subs	r4, r4, r1
 8002c8e:	2c1f      	cmp	r4, #31
 8002c90:	dd08      	ble.n	8002ca4 <__aeabi_d2iz+0x4c>
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <__aeabi_d2iz+0x70>)
 8002c94:	1a5b      	subs	r3, r3, r1
 8002c96:	40d8      	lsrs	r0, r3
 8002c98:	0003      	movs	r3, r0
 8002c9a:	4258      	negs	r0, r3
 8002c9c:	2e00      	cmp	r6, #0
 8002c9e:	d1ef      	bne.n	8002c80 <__aeabi_d2iz+0x28>
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	e7ed      	b.n	8002c80 <__aeabi_d2iz+0x28>
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <__aeabi_d2iz+0x74>)
 8002ca6:	9a00      	ldr	r2, [sp, #0]
 8002ca8:	469c      	mov	ip, r3
 8002caa:	0003      	movs	r3, r0
 8002cac:	4461      	add	r1, ip
 8002cae:	408b      	lsls	r3, r1
 8002cb0:	40e2      	lsrs	r2, r4
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	e7f1      	b.n	8002c9a <__aeabi_d2iz+0x42>
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	000003fe 	.word	0x000003fe
 8002cbc:	0000041d 	.word	0x0000041d
 8002cc0:	7fffffff 	.word	0x7fffffff
 8002cc4:	00000433 	.word	0x00000433
 8002cc8:	00000413 	.word	0x00000413
 8002ccc:	fffffbed 	.word	0xfffffbed

08002cd0 <__aeabi_i2d>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d016      	beq.n	8002d04 <__aeabi_i2d+0x34>
 8002cd6:	17c3      	asrs	r3, r0, #31
 8002cd8:	18c5      	adds	r5, r0, r3
 8002cda:	405d      	eors	r5, r3
 8002cdc:	0fc4      	lsrs	r4, r0, #31
 8002cde:	0028      	movs	r0, r5
 8002ce0:	f000 f914 	bl	8002f0c <__clzsi2>
 8002ce4:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <__aeabi_i2d+0x58>)
 8002ce6:	1a1b      	subs	r3, r3, r0
 8002ce8:	055b      	lsls	r3, r3, #21
 8002cea:	0d5b      	lsrs	r3, r3, #21
 8002cec:	280a      	cmp	r0, #10
 8002cee:	dc14      	bgt.n	8002d1a <__aeabi_i2d+0x4a>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	002e      	movs	r6, r5
 8002cf4:	3215      	adds	r2, #21
 8002cf6:	4096      	lsls	r6, r2
 8002cf8:	220b      	movs	r2, #11
 8002cfa:	1a12      	subs	r2, r2, r0
 8002cfc:	40d5      	lsrs	r5, r2
 8002cfe:	032d      	lsls	r5, r5, #12
 8002d00:	0b2d      	lsrs	r5, r5, #12
 8002d02:	e003      	b.n	8002d0c <__aeabi_i2d+0x3c>
 8002d04:	2400      	movs	r4, #0
 8002d06:	2300      	movs	r3, #0
 8002d08:	2500      	movs	r5, #0
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	432b      	orrs	r3, r5
 8002d10:	07e4      	lsls	r4, r4, #31
 8002d12:	4323      	orrs	r3, r4
 8002d14:	0030      	movs	r0, r6
 8002d16:	0019      	movs	r1, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	380b      	subs	r0, #11
 8002d1c:	4085      	lsls	r5, r0
 8002d1e:	032d      	lsls	r5, r5, #12
 8002d20:	2600      	movs	r6, #0
 8002d22:	0b2d      	lsrs	r5, r5, #12
 8002d24:	e7f2      	b.n	8002d0c <__aeabi_i2d+0x3c>
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	0000041e 	.word	0x0000041e

08002d2c <__aeabi_ui2d>:
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	1e04      	subs	r4, r0, #0
 8002d30:	d010      	beq.n	8002d54 <__aeabi_ui2d+0x28>
 8002d32:	f000 f8eb 	bl	8002f0c <__clzsi2>
 8002d36:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <__aeabi_ui2d+0x44>)
 8002d38:	1a1b      	subs	r3, r3, r0
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	0d5b      	lsrs	r3, r3, #21
 8002d3e:	280a      	cmp	r0, #10
 8002d40:	dc0f      	bgt.n	8002d62 <__aeabi_ui2d+0x36>
 8002d42:	220b      	movs	r2, #11
 8002d44:	0021      	movs	r1, r4
 8002d46:	1a12      	subs	r2, r2, r0
 8002d48:	40d1      	lsrs	r1, r2
 8002d4a:	3015      	adds	r0, #21
 8002d4c:	030a      	lsls	r2, r1, #12
 8002d4e:	4084      	lsls	r4, r0
 8002d50:	0b12      	lsrs	r2, r2, #12
 8002d52:	e001      	b.n	8002d58 <__aeabi_ui2d+0x2c>
 8002d54:	2300      	movs	r3, #0
 8002d56:	2200      	movs	r2, #0
 8002d58:	051b      	lsls	r3, r3, #20
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	0020      	movs	r0, r4
 8002d5e:	0019      	movs	r1, r3
 8002d60:	bd10      	pop	{r4, pc}
 8002d62:	0022      	movs	r2, r4
 8002d64:	380b      	subs	r0, #11
 8002d66:	4082      	lsls	r2, r0
 8002d68:	0312      	lsls	r2, r2, #12
 8002d6a:	2400      	movs	r4, #0
 8002d6c:	0b12      	lsrs	r2, r2, #12
 8002d6e:	e7f3      	b.n	8002d58 <__aeabi_ui2d+0x2c>
 8002d70:	0000041e 	.word	0x0000041e

08002d74 <__aeabi_f2d>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	0242      	lsls	r2, r0, #9
 8002d78:	0043      	lsls	r3, r0, #1
 8002d7a:	0fc4      	lsrs	r4, r0, #31
 8002d7c:	20fe      	movs	r0, #254	@ 0xfe
 8002d7e:	0e1b      	lsrs	r3, r3, #24
 8002d80:	1c59      	adds	r1, r3, #1
 8002d82:	0a55      	lsrs	r5, r2, #9
 8002d84:	4208      	tst	r0, r1
 8002d86:	d00c      	beq.n	8002da2 <__aeabi_f2d+0x2e>
 8002d88:	21e0      	movs	r1, #224	@ 0xe0
 8002d8a:	0089      	lsls	r1, r1, #2
 8002d8c:	468c      	mov	ip, r1
 8002d8e:	076d      	lsls	r5, r5, #29
 8002d90:	0b12      	lsrs	r2, r2, #12
 8002d92:	4463      	add	r3, ip
 8002d94:	051b      	lsls	r3, r3, #20
 8002d96:	4313      	orrs	r3, r2
 8002d98:	07e4      	lsls	r4, r4, #31
 8002d9a:	4323      	orrs	r3, r4
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	0019      	movs	r1, r3
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d114      	bne.n	8002dd0 <__aeabi_f2d+0x5c>
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	d01b      	beq.n	8002de2 <__aeabi_f2d+0x6e>
 8002daa:	0028      	movs	r0, r5
 8002dac:	f000 f8ae 	bl	8002f0c <__clzsi2>
 8002db0:	280a      	cmp	r0, #10
 8002db2:	dc1c      	bgt.n	8002dee <__aeabi_f2d+0x7a>
 8002db4:	230b      	movs	r3, #11
 8002db6:	002a      	movs	r2, r5
 8002db8:	1a1b      	subs	r3, r3, r0
 8002dba:	40da      	lsrs	r2, r3
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	3315      	adds	r3, #21
 8002dc0:	409d      	lsls	r5, r3
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <__aeabi_f2d+0x88>)
 8002dc4:	0312      	lsls	r2, r2, #12
 8002dc6:	1a1b      	subs	r3, r3, r0
 8002dc8:	055b      	lsls	r3, r3, #21
 8002dca:	0b12      	lsrs	r2, r2, #12
 8002dcc:	0d5b      	lsrs	r3, r3, #21
 8002dce:	e7e1      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002dd0:	2d00      	cmp	r5, #0
 8002dd2:	d009      	beq.n	8002de8 <__aeabi_f2d+0x74>
 8002dd4:	0b13      	lsrs	r3, r2, #12
 8002dd6:	2280      	movs	r2, #128	@ 0x80
 8002dd8:	0312      	lsls	r2, r2, #12
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	076d      	lsls	r5, r5, #29
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <__aeabi_f2d+0x8c>)
 8002de0:	e7d8      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2200      	movs	r2, #0
 8002de6:	e7d5      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002de8:	2200      	movs	r2, #0
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <__aeabi_f2d+0x8c>)
 8002dec:	e7d2      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002dee:	0003      	movs	r3, r0
 8002df0:	002a      	movs	r2, r5
 8002df2:	3b0b      	subs	r3, #11
 8002df4:	409a      	lsls	r2, r3
 8002df6:	2500      	movs	r5, #0
 8002df8:	e7e3      	b.n	8002dc2 <__aeabi_f2d+0x4e>
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	00000389 	.word	0x00000389
 8002e00:	000007ff 	.word	0x000007ff

08002e04 <__aeabi_d2f>:
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e06:	004b      	lsls	r3, r1, #1
 8002e08:	030f      	lsls	r7, r1, #12
 8002e0a:	0d5b      	lsrs	r3, r3, #21
 8002e0c:	4c3b      	ldr	r4, [pc, #236]	@ (8002efc <__aeabi_d2f+0xf8>)
 8002e0e:	0f45      	lsrs	r5, r0, #29
 8002e10:	b083      	sub	sp, #12
 8002e12:	0a7f      	lsrs	r7, r7, #9
 8002e14:	1c5e      	adds	r6, r3, #1
 8002e16:	432f      	orrs	r7, r5
 8002e18:	9000      	str	r0, [sp, #0]
 8002e1a:	9101      	str	r1, [sp, #4]
 8002e1c:	0fca      	lsrs	r2, r1, #31
 8002e1e:	00c5      	lsls	r5, r0, #3
 8002e20:	4226      	tst	r6, r4
 8002e22:	d00b      	beq.n	8002e3c <__aeabi_d2f+0x38>
 8002e24:	4936      	ldr	r1, [pc, #216]	@ (8002f00 <__aeabi_d2f+0xfc>)
 8002e26:	185c      	adds	r4, r3, r1
 8002e28:	2cfe      	cmp	r4, #254	@ 0xfe
 8002e2a:	dd13      	ble.n	8002e54 <__aeabi_d2f+0x50>
 8002e2c:	20ff      	movs	r0, #255	@ 0xff
 8002e2e:	2300      	movs	r3, #0
 8002e30:	05c0      	lsls	r0, r0, #23
 8002e32:	4318      	orrs	r0, r3
 8002e34:	07d2      	lsls	r2, r2, #31
 8002e36:	4310      	orrs	r0, r2
 8002e38:	b003      	add	sp, #12
 8002e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <__aeabi_d2f+0x42>
 8002e40:	2000      	movs	r0, #0
 8002e42:	2300      	movs	r3, #0
 8002e44:	e7f4      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002e46:	433d      	orrs	r5, r7
 8002e48:	d0f0      	beq.n	8002e2c <__aeabi_d2f+0x28>
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	03db      	lsls	r3, r3, #15
 8002e4e:	20ff      	movs	r0, #255	@ 0xff
 8002e50:	433b      	orrs	r3, r7
 8002e52:	e7ed      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002e54:	2c00      	cmp	r4, #0
 8002e56:	dd14      	ble.n	8002e82 <__aeabi_d2f+0x7e>
 8002e58:	9b00      	ldr	r3, [sp, #0]
 8002e5a:	00ff      	lsls	r7, r7, #3
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	4183      	sbcs	r3, r0
 8002e62:	0f69      	lsrs	r1, r5, #29
 8002e64:	433b      	orrs	r3, r7
 8002e66:	430b      	orrs	r3, r1
 8002e68:	0759      	lsls	r1, r3, #29
 8002e6a:	d041      	beq.n	8002ef0 <__aeabi_d2f+0xec>
 8002e6c:	210f      	movs	r1, #15
 8002e6e:	4019      	ands	r1, r3
 8002e70:	2904      	cmp	r1, #4
 8002e72:	d028      	beq.n	8002ec6 <__aeabi_d2f+0xc2>
 8002e74:	3304      	adds	r3, #4
 8002e76:	0159      	lsls	r1, r3, #5
 8002e78:	d525      	bpl.n	8002ec6 <__aeabi_d2f+0xc2>
 8002e7a:	3401      	adds	r4, #1
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	b2e0      	uxtb	r0, r4
 8002e80:	e7d6      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002e82:	0021      	movs	r1, r4
 8002e84:	3117      	adds	r1, #23
 8002e86:	dbdb      	blt.n	8002e40 <__aeabi_d2f+0x3c>
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	201e      	movs	r0, #30
 8002e8c:	0409      	lsls	r1, r1, #16
 8002e8e:	4339      	orrs	r1, r7
 8002e90:	1b00      	subs	r0, r0, r4
 8002e92:	281f      	cmp	r0, #31
 8002e94:	dd1b      	ble.n	8002ece <__aeabi_d2f+0xca>
 8002e96:	2602      	movs	r6, #2
 8002e98:	4276      	negs	r6, r6
 8002e9a:	1b34      	subs	r4, r6, r4
 8002e9c:	000e      	movs	r6, r1
 8002e9e:	40e6      	lsrs	r6, r4
 8002ea0:	0034      	movs	r4, r6
 8002ea2:	2820      	cmp	r0, #32
 8002ea4:	d004      	beq.n	8002eb0 <__aeabi_d2f+0xac>
 8002ea6:	4817      	ldr	r0, [pc, #92]	@ (8002f04 <__aeabi_d2f+0x100>)
 8002ea8:	4684      	mov	ip, r0
 8002eaa:	4463      	add	r3, ip
 8002eac:	4099      	lsls	r1, r3
 8002eae:	430d      	orrs	r5, r1
 8002eb0:	002b      	movs	r3, r5
 8002eb2:	1e59      	subs	r1, r3, #1
 8002eb4:	418b      	sbcs	r3, r1
 8002eb6:	4323      	orrs	r3, r4
 8002eb8:	0759      	lsls	r1, r3, #29
 8002eba:	d015      	beq.n	8002ee8 <__aeabi_d2f+0xe4>
 8002ebc:	210f      	movs	r1, #15
 8002ebe:	2400      	movs	r4, #0
 8002ec0:	4019      	ands	r1, r3
 8002ec2:	2904      	cmp	r1, #4
 8002ec4:	d117      	bne.n	8002ef6 <__aeabi_d2f+0xf2>
 8002ec6:	019b      	lsls	r3, r3, #6
 8002ec8:	0a5b      	lsrs	r3, r3, #9
 8002eca:	b2e0      	uxtb	r0, r4
 8002ecc:	e7b0      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002ece:	4c0e      	ldr	r4, [pc, #56]	@ (8002f08 <__aeabi_d2f+0x104>)
 8002ed0:	191c      	adds	r4, r3, r4
 8002ed2:	002b      	movs	r3, r5
 8002ed4:	40a5      	lsls	r5, r4
 8002ed6:	40c3      	lsrs	r3, r0
 8002ed8:	40a1      	lsls	r1, r4
 8002eda:	1e68      	subs	r0, r5, #1
 8002edc:	4185      	sbcs	r5, r0
 8002ede:	4329      	orrs	r1, r5
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	2400      	movs	r4, #0
 8002ee4:	0759      	lsls	r1, r3, #29
 8002ee6:	d1c1      	bne.n	8002e6c <__aeabi_d2f+0x68>
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	2000      	movs	r0, #0
 8002eec:	0a5b      	lsrs	r3, r3, #9
 8002eee:	e79f      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	b2e0      	uxtb	r0, r4
 8002ef4:	e79c      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	e7e5      	b.n	8002ec6 <__aeabi_d2f+0xc2>
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	000007fe 	.word	0x000007fe
 8002f00:	fffffc80 	.word	0xfffffc80
 8002f04:	fffffca2 	.word	0xfffffca2
 8002f08:	fffffc82 	.word	0xfffffc82

08002f0c <__clzsi2>:
 8002f0c:	211c      	movs	r1, #28
 8002f0e:	2301      	movs	r3, #1
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d301      	bcc.n	8002f1a <__clzsi2+0xe>
 8002f16:	0c00      	lsrs	r0, r0, #16
 8002f18:	3910      	subs	r1, #16
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	d301      	bcc.n	8002f24 <__clzsi2+0x18>
 8002f20:	0a00      	lsrs	r0, r0, #8
 8002f22:	3908      	subs	r1, #8
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	4298      	cmp	r0, r3
 8002f28:	d301      	bcc.n	8002f2e <__clzsi2+0x22>
 8002f2a:	0900      	lsrs	r0, r0, #4
 8002f2c:	3904      	subs	r1, #4
 8002f2e:	a202      	add	r2, pc, #8	@ (adr r2, 8002f38 <__clzsi2+0x2c>)
 8002f30:	5c10      	ldrb	r0, [r2, r0]
 8002f32:	1840      	adds	r0, r0, r1
 8002f34:	4770      	bx	lr
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	02020304 	.word	0x02020304
 8002f3c:	01010101 	.word	0x01010101
	...

08002f48 <MX_CAN_Init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void MX_CAN_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	@ 0x28
 8002f4c:	af00      	add	r7, sp, #0
    hcan.Instance = CAN;
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f50:	4a3b      	ldr	r2, [pc, #236]	@ (8003040 <MX_CAN_Init+0xf8>)
 8002f52:	601a      	str	r2, [r3, #0]
    hcan.Init.Prescaler = 6;
 8002f54:	4b39      	ldr	r3, [pc, #228]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f56:	2206      	movs	r2, #6
 8002f58:	605a      	str	r2, [r3, #4]
    hcan.Init.Mode = CAN_MODE_NORMAL;
 8002f5a:	4b38      	ldr	r3, [pc, #224]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
    hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f60:	4b36      	ldr	r3, [pc, #216]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	60da      	str	r2, [r3, #12]
    hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002f66:	4b35      	ldr	r3, [pc, #212]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f68:	22c0      	movs	r2, #192	@ 0xc0
 8002f6a:	0312      	lsls	r2, r2, #12
 8002f6c:	611a      	str	r2, [r3, #16]
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002f6e:	4b33      	ldr	r3, [pc, #204]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f70:	2280      	movs	r2, #128	@ 0x80
 8002f72:	0352      	lsls	r2, r2, #13
 8002f74:	615a      	str	r2, [r3, #20]
    hcan.Init.TimeTriggeredMode = DISABLE;
 8002f76:	4b31      	ldr	r3, [pc, #196]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	761a      	strb	r2, [r3, #24]
    hcan.Init.AutoBusOff = DISABLE;
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	765a      	strb	r2, [r3, #25]
    hcan.Init.AutoWakeUp = DISABLE;
 8002f82:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	769a      	strb	r2, [r3, #26]
    hcan.Init.AutoRetransmission = ENABLE;
 8002f88:	4b2c      	ldr	r3, [pc, #176]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	76da      	strb	r2, [r3, #27]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 8002f94:	4b29      	ldr	r3, [pc, #164]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	775a      	strb	r2, [r3, #29]

    // Ensure the CAN peripheral is properly reset
    if (HAL_CAN_DeInit(&hcan) != HAL_OK) {
 8002f9a:	4b28      	ldr	r3, [pc, #160]	@ (800303c <MX_CAN_Init+0xf4>)
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f002 fe2b 	bl	8005bf8 <HAL_CAN_DeInit>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d001      	beq.n	8002faa <MX_CAN_Init+0x62>
        Error_Handler();
 8002fa6:	f001 fadd 	bl	8004564 <Error_Handler>
    }

    if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8002faa:	4b24      	ldr	r3, [pc, #144]	@ (800303c <MX_CAN_Init+0xf4>)
 8002fac:	0018      	movs	r0, r3
 8002fae:	f002 fd25 	bl	80059fc <HAL_CAN_Init>
 8002fb2:	1e03      	subs	r3, r0, #0
 8002fb4:	d001      	beq.n	8002fba <MX_CAN_Init+0x72>
        Error_Handler();
 8002fb6:	f001 fad5 	bl	8004564 <Error_Handler>
    }

    // Configure CAN Filter to accept all messages
    CAN_FilterTypeDef canfilterconfig = {0};
 8002fba:	003b      	movs	r3, r7
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	2328      	movs	r3, #40	@ 0x28
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	f008 f892 	bl	800b0ec <memset>
    canfilterconfig.FilterActivation = ENABLE;
 8002fc8:	003b      	movs	r3, r7
 8002fca:	2201      	movs	r2, #1
 8002fcc:	621a      	str	r2, [r3, #32]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002fce:	003b      	movs	r3, r7
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8002fd4:	003b      	movs	r3, r7
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
    canfilterconfig.FilterBank = 0;
 8002fda:	003b      	movs	r3, r7
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002fe0:	003b      	movs	r3, r7
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
    canfilterconfig.FilterIdHigh = 0x0000;
 8002fe6:	003b      	movs	r3, r7
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 8002fec:	003b      	movs	r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	605a      	str	r2, [r3, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0000;
 8002ff2:	003b      	movs	r3, r7
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 8002ff8:	003b      	movs	r3, r7
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]

    if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK) {
 8002ffe:	003a      	movs	r2, r7
 8003000:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <MX_CAN_Init+0xf4>)
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f002 fe1d 	bl	8005c44 <HAL_CAN_ConfigFilter>
 800300a:	1e03      	subs	r3, r0, #0
 800300c:	d001      	beq.n	8003012 <MX_CAN_Init+0xca>
        Error_Handler();
 800300e:	f001 faa9 	bl	8004564 <Error_Handler>
    }

    // Activate CAN RX interrupt notification for FIFO0 message pending
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8003012:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <MX_CAN_Init+0xf4>)
 8003014:	2102      	movs	r1, #2
 8003016:	0018      	movs	r0, r3
 8003018:	f003 f9f3 	bl	8006402 <HAL_CAN_ActivateNotification>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d001      	beq.n	8003024 <MX_CAN_Init+0xdc>
        Error_Handler();
 8003020:	f001 faa0 	bl	8004564 <Error_Handler>
    }

    // Start CAN
    if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <MX_CAN_Init+0xf4>)
 8003026:	0018      	movs	r0, r3
 8003028:	f002 fefe 	bl	8005e28 <HAL_CAN_Start>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <MX_CAN_Init+0xec>
        Error_Handler();
 8003030:	f001 fa98 	bl	8004564 <Error_Handler>
    }
}
 8003034:	46c0      	nop			@ (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b00a      	add	sp, #40	@ 0x28
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000238 	.word	0x20000238
 8003040:	40006400 	.word	0x40006400

08003044 <HAL_CAN_RxFifo0MsgPendingCallback>:
// In the CAN interrupt callback or handler function:
// Global variables to hold received CAN message information


// Callback function called when a CAN message is received in FIFO 0
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
    // Receive the CAN message and store it in global variables
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &g_rx_header, g_rx_data) != HAL_OK) {
 800304c:	4b07      	ldr	r3, [pc, #28]	@ (800306c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800304e:	4a08      	ldr	r2, [pc, #32]	@ (8003070 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	2100      	movs	r1, #0
 8003054:	f003 f8aa 	bl	80061ac <HAL_CAN_GetRxMessage>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d001      	beq.n	8003060 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
        Error_Handler();  // Error handling
 800305c:	f001 fa82 	bl	8004564 <Error_Handler>
    HAL_Delay(200);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
    HAL_Delay(500);
    */
    // Call the function to process the received CAN message
    processCANMessage();
 8003060:	f000 f85e 	bl	8003120 <processCANMessage>
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}
 800306c:	2000027c 	.word	0x2000027c
 8003070:	20000260 	.word	0x20000260

08003074 <sendCANMessage>:

void sendCANMessage(uint32_t id, bool extended, uint8_t data[], uint8_t len) {
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b08d      	sub	sp, #52	@ 0x34
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	0008      	movs	r0, r1
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	0019      	movs	r1, r3
 8003082:	240b      	movs	r4, #11
 8003084:	193b      	adds	r3, r7, r4
 8003086:	1c02      	adds	r2, r0, #0
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	200a      	movs	r0, #10
 800308c:	183b      	adds	r3, r7, r0
 800308e:	1c0a      	adds	r2, r1, #0
 8003090:	701a      	strb	r2, [r3, #0]
    CAN_TxHeaderTypeDef tx_header;
    uint32_t tx_mailbox;

    // Set the properties for the CAN header
    tx_header.DLC = len;  // Length of the data to send
 8003092:	183b      	adds	r3, r7, r0
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	2118      	movs	r1, #24
 8003098:	187b      	adds	r3, r7, r1
 800309a:	611a      	str	r2, [r3, #16]
    tx_header.StdId = id;  // Standard ID (or use ExtId if extended)
 800309c:	187b      	adds	r3, r7, r1
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]
    tx_header.ExtId = id;  // Extended ID if needed
 80030a2:	187b      	adds	r3, r7, r1
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	605a      	str	r2, [r3, #4]
    tx_header.RTR = CAN_RTR_DATA;  // Data frame type
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	2200      	movs	r2, #0
 80030ac:	60da      	str	r2, [r3, #12]
    tx_header.IDE = extended ? CAN_ID_EXT : CAN_ID_STD;  // Standard or Extended frame
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <sendCANMessage+0x46>
 80030b6:	2204      	movs	r2, #4
 80030b8:	e000      	b.n	80030bc <sendCANMessage+0x48>
 80030ba:	2200      	movs	r2, #0
 80030bc:	2118      	movs	r1, #24
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	609a      	str	r2, [r3, #8]
    tx_header.TransmitGlobalTime = DISABLE;  // Disable global time
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	2200      	movs	r2, #0
 80030c6:	751a      	strb	r2, [r3, #20]

    // Wait for a free mailbox to send the message
    while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {
 80030c8:	e002      	b.n	80030d0 <sendCANMessage+0x5c>
        HAL_Delay(1);  // Wait until a mailbox is free
 80030ca:	2001      	movs	r0, #1
 80030cc:	f002 fc72 	bl	80059b4 <HAL_Delay>
    while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {
 80030d0:	4b12      	ldr	r3, [pc, #72]	@ (800311c <sendCANMessage+0xa8>)
 80030d2:	0018      	movs	r0, r3
 80030d4:	f003 f80b 	bl	80060ee <HAL_CAN_GetTxMailboxesFreeLevel>
 80030d8:	1e03      	subs	r3, r0, #0
 80030da:	d0f6      	beq.n	80030ca <sendCANMessage+0x56>
    }

    // Send the CAN message
    if (HAL_CAN_AddTxMessage(&hcan, &tx_header, data, &tx_mailbox) != HAL_OK) {
 80030dc:	2314      	movs	r3, #20
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	2118      	movs	r1, #24
 80030e4:	1879      	adds	r1, r7, r1
 80030e6:	480d      	ldr	r0, [pc, #52]	@ (800311c <sendCANMessage+0xa8>)
 80030e8:	f002 ff2f 	bl	8005f4a <HAL_CAN_AddTxMessage>
 80030ec:	1e03      	subs	r3, r0, #0
 80030ee:	d005      	beq.n	80030fc <sendCANMessage+0x88>
        Error_Handler();  // Call error handler in case of failure
 80030f0:	f001 fa38 	bl	8004564 <Error_Handler>
    }

    // Wait for the message to be transmitted (make sure it's done)
    while (HAL_CAN_IsTxMessagePending(&hcan, tx_mailbox)) {
 80030f4:	e002      	b.n	80030fc <sendCANMessage+0x88>
        HAL_Delay(1);  // Wait for transmission to complete
 80030f6:	2001      	movs	r0, #1
 80030f8:	f002 fc5c 	bl	80059b4 <HAL_Delay>
    while (HAL_CAN_IsTxMessagePending(&hcan, tx_mailbox)) {
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4b07      	ldr	r3, [pc, #28]	@ (800311c <sendCANMessage+0xa8>)
 8003100:	0011      	movs	r1, r2
 8003102:	0018      	movs	r0, r3
 8003104:	f003 f82b 	bl	800615e <HAL_CAN_IsTxMessagePending>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d1f4      	bne.n	80030f6 <sendCANMessage+0x82>
    }

    HAL_Delay(100);  // Small delay before the next operation
 800310c:	2064      	movs	r0, #100	@ 0x64
 800310e:	f002 fc51 	bl	80059b4 <HAL_Delay>
}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b00d      	add	sp, #52	@ 0x34
 8003118:	bd90      	pop	{r4, r7, pc}
 800311a:	46c0      	nop			@ (mov r8, r8)
 800311c:	20000238 	.word	0x20000238

08003120 <processCANMessage>:

// Function to process the CAN message based on message ID and data
void processCANMessage() {
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
    switch (g_rx_header.StdId) {
 8003124:	4b46      	ldr	r3, [pc, #280]	@ (8003240 <processCANMessage+0x120>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b05      	cmp	r3, #5
 800312a:	d900      	bls.n	800312e <processCANMessage+0xe>
 800312c:	e079      	b.n	8003222 <processCANMessage+0x102>
 800312e:	009a      	lsls	r2, r3, #2
 8003130:	4b44      	ldr	r3, [pc, #272]	@ (8003244 <processCANMessage+0x124>)
 8003132:	18d3      	adds	r3, r2, r3
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	469f      	mov	pc, r3
        case 0x001:  // Motor 1
            if (g_rx_data[0] == 0x91 && g_rx_data[1] == 2) {
 8003138:	4b43      	ldr	r3, [pc, #268]	@ (8003248 <processCANMessage+0x128>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b91      	cmp	r3, #145	@ 0x91
 800313e:	d106      	bne.n	800314e <processCANMessage+0x2e>
 8003140:	4b41      	ldr	r3, [pc, #260]	@ (8003248 <processCANMessage+0x128>)
 8003142:	785b      	ldrb	r3, [r3, #1]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d102      	bne.n	800314e <processCANMessage+0x2e>
                motor1Homed = true;
 8003148:	4b40      	ldr	r3, [pc, #256]	@ (800324c <processCANMessage+0x12c>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
                //printf("Motor 1 homing successful.\n");
            }
            if (g_rx_data[0] == 0xF5 && g_rx_data[1] == 2) {  // Motion complete
 800314e:	4b3e      	ldr	r3, [pc, #248]	@ (8003248 <processCANMessage+0x128>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2bf5      	cmp	r3, #245	@ 0xf5
 8003154:	d000      	beq.n	8003158 <processCANMessage+0x38>
 8003156:	e066      	b.n	8003226 <processCANMessage+0x106>
 8003158:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <processCANMessage+0x128>)
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d000      	beq.n	8003162 <processCANMessage+0x42>
 8003160:	e061      	b.n	8003226 <processCANMessage+0x106>
                motor1MotionComplete = true;
 8003162:	4b3b      	ldr	r3, [pc, #236]	@ (8003250 <processCANMessage+0x130>)
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
                //printf("Motor 1 motion complete.\n");
            }
            break;
 8003168:	e05d      	b.n	8003226 <processCANMessage+0x106>

        case 0x002:  // Motor 2
            if (g_rx_data[0] == 0x91 && g_rx_data[1] == 2) {
 800316a:	4b37      	ldr	r3, [pc, #220]	@ (8003248 <processCANMessage+0x128>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b91      	cmp	r3, #145	@ 0x91
 8003170:	d106      	bne.n	8003180 <processCANMessage+0x60>
 8003172:	4b35      	ldr	r3, [pc, #212]	@ (8003248 <processCANMessage+0x128>)
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d102      	bne.n	8003180 <processCANMessage+0x60>
                motor2Homed = true;
 800317a:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <processCANMessage+0x134>)
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
                //printf("Motor 2 homing successful.\n");
            }
            if (g_rx_data[0] == 0xF5 && g_rx_data[1] == 2) {  // Motion complete
 8003180:	4b31      	ldr	r3, [pc, #196]	@ (8003248 <processCANMessage+0x128>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2bf5      	cmp	r3, #245	@ 0xf5
 8003186:	d150      	bne.n	800322a <processCANMessage+0x10a>
 8003188:	4b2f      	ldr	r3, [pc, #188]	@ (8003248 <processCANMessage+0x128>)
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d14c      	bne.n	800322a <processCANMessage+0x10a>
                motor2MotionComplete = true;
 8003190:	4b31      	ldr	r3, [pc, #196]	@ (8003258 <processCANMessage+0x138>)
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]
                //printf("Motor 2 motion complete.\n");
            }
            break;
 8003196:	e048      	b.n	800322a <processCANMessage+0x10a>

        case 0x003:  // Phone Rotation Motor
            if (g_rx_data[0] == 0x91 && g_rx_data[1] == 2) {
 8003198:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <processCANMessage+0x128>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b91      	cmp	r3, #145	@ 0x91
 800319e:	d106      	bne.n	80031ae <processCANMessage+0x8e>
 80031a0:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <processCANMessage+0x128>)
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d102      	bne.n	80031ae <processCANMessage+0x8e>
                phoneRotationMotorHomed = true;
 80031a8:	4b2c      	ldr	r3, [pc, #176]	@ (800325c <processCANMessage+0x13c>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
                //printf("Phone Rotation Motor homing successful.\n");
            }
            if (g_rx_data[0] == 0xF5 && g_rx_data[1] == 2) {  // Motion complete
 80031ae:	4b26      	ldr	r3, [pc, #152]	@ (8003248 <processCANMessage+0x128>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2bf5      	cmp	r3, #245	@ 0xf5
 80031b4:	d13b      	bne.n	800322e <processCANMessage+0x10e>
 80031b6:	4b24      	ldr	r3, [pc, #144]	@ (8003248 <processCANMessage+0x128>)
 80031b8:	785b      	ldrb	r3, [r3, #1]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d137      	bne.n	800322e <processCANMessage+0x10e>
                phoneRotationMotorComplete = true;
 80031be:	4b28      	ldr	r3, [pc, #160]	@ (8003260 <processCANMessage+0x140>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
                //printf("Phone Rotation Motor motion complete.\n");
            }
            break;
 80031c4:	e033      	b.n	800322e <processCANMessage+0x10e>

        case 0x004:  // Image Mount Motor
            if (g_rx_data[0] == 0x91 && g_rx_data[1] == 2) {
 80031c6:	4b20      	ldr	r3, [pc, #128]	@ (8003248 <processCANMessage+0x128>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b91      	cmp	r3, #145	@ 0x91
 80031cc:	d106      	bne.n	80031dc <processCANMessage+0xbc>
 80031ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003248 <processCANMessage+0x128>)
 80031d0:	785b      	ldrb	r3, [r3, #1]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d102      	bne.n	80031dc <processCANMessage+0xbc>
                imageMountMotorHomed = true;
 80031d6:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <processCANMessage+0x144>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
                //printf("Image Mount Motor homing successful.\n");
            }
            if (g_rx_data[0] == 0xF5 && g_rx_data[1] == 2) {  // Motion complete
 80031dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003248 <processCANMessage+0x128>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2bf5      	cmp	r3, #245	@ 0xf5
 80031e2:	d126      	bne.n	8003232 <processCANMessage+0x112>
 80031e4:	4b18      	ldr	r3, [pc, #96]	@ (8003248 <processCANMessage+0x128>)
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d122      	bne.n	8003232 <processCANMessage+0x112>
                imageMountMotorComplete = true;
 80031ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003268 <processCANMessage+0x148>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
                //printf("Image Mount Motor motion complete.\n");
            }
            break;
 80031f2:	e01e      	b.n	8003232 <processCANMessage+0x112>

        case 0x005:  // Drawer Motor
            if (g_rx_data[0] == 0x91 && g_rx_data[1] == 2) {
 80031f4:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <processCANMessage+0x128>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b91      	cmp	r3, #145	@ 0x91
 80031fa:	d106      	bne.n	800320a <processCANMessage+0xea>
 80031fc:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <processCANMessage+0x128>)
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d102      	bne.n	800320a <processCANMessage+0xea>
                drawerMotorHomed = true;
 8003204:	4b19      	ldr	r3, [pc, #100]	@ (800326c <processCANMessage+0x14c>)
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
                //printf("Drawer Motor homing successful.\n");
            }
            if (g_rx_data[0] == 0xF5 && g_rx_data[1] == 2) {  // Motion complete
 800320a:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <processCANMessage+0x128>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2bf5      	cmp	r3, #245	@ 0xf5
 8003210:	d111      	bne.n	8003236 <processCANMessage+0x116>
 8003212:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <processCANMessage+0x128>)
 8003214:	785b      	ldrb	r3, [r3, #1]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d10d      	bne.n	8003236 <processCANMessage+0x116>
                drawerMotorComplete = true;
 800321a:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <processCANMessage+0x150>)
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
                //printf("Drawer Motor motion complete.\n");
            }
            break;
 8003220:	e009      	b.n	8003236 <processCANMessage+0x116>

        default:
            //printf("Unknown CAN ID received.\n");
            break;
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	e008      	b.n	8003238 <processCANMessage+0x118>
            break;
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	e006      	b.n	8003238 <processCANMessage+0x118>
            break;
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	e004      	b.n	8003238 <processCANMessage+0x118>
            break;
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	e002      	b.n	8003238 <processCANMessage+0x118>
            break;
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	e000      	b.n	8003238 <processCANMessage+0x118>
            break;
 8003236:	46c0      	nop			@ (mov r8, r8)
    }
}
 8003238:	46c0      	nop			@ (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	20000260 	.word	0x20000260
 8003244:	0800d694 	.word	0x0800d694
 8003248:	2000027c 	.word	0x2000027c
 800324c:	20000284 	.word	0x20000284
 8003250:	20000289 	.word	0x20000289
 8003254:	20000285 	.word	0x20000285
 8003258:	2000028a 	.word	0x2000028a
 800325c:	20000286 	.word	0x20000286
 8003260:	2000028b 	.word	0x2000028b
 8003264:	20000287 	.word	0x20000287
 8003268:	2000028c 	.word	0x2000028c
 800326c:	20000288 	.word	0x20000288
 8003270:	2000028d 	.word	0x2000028d

08003274 <parseCommand>:
#include "functions.h"
#include "tests.h"
#include <string.h>
#include <stdlib.h>

void parseCommand(char *command) {
 8003274:	b5b0      	push	{r4, r5, r7, lr}
 8003276:	b0a4      	sub	sp, #144	@ 0x90
 8003278:	af02      	add	r7, sp, #8
 800327a:	6078      	str	r0, [r7, #4]
	// Variables to hold keys and values
	char key[20], value[20];
	int functionNumber = -1;
 800327c:	2301      	movs	r3, #1
 800327e:	425b      	negs	r3, r3
 8003280:	2284      	movs	r2, #132	@ 0x84
 8003282:	18ba      	adds	r2, r7, r2
 8003284:	6013      	str	r3, [r2, #0]

	// Pointer to traverse the string
	char *current = command;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2280      	movs	r2, #128	@ 0x80
 800328a:	18ba      	adds	r2, r7, r2
 800328c:	6013      	str	r3, [r2, #0]

	// Parse the command
	while (*current != '\0') {
 800328e:	f000 fccd 	bl	8003c2c <parseCommand+0x9b8>
		// Extract key
		char *keyStart = current;
 8003292:	2380      	movs	r3, #128	@ 0x80
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	673b      	str	r3, [r7, #112]	@ 0x70
		while (*current != ',' && *current != '\0') {
 800329a:	e005      	b.n	80032a8 <parseCommand+0x34>
			current++;
 800329c:	2280      	movs	r2, #128	@ 0x80
 800329e:	18bb      	adds	r3, r7, r2
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	18ba      	adds	r2, r7, r2
 80032a6:	6013      	str	r3, [r2, #0]
		while (*current != ',' && *current != '\0') {
 80032a8:	2280      	movs	r2, #128	@ 0x80
 80032aa:	18bb      	adds	r3, r7, r2
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b2c      	cmp	r3, #44	@ 0x2c
 80032b2:	d004      	beq.n	80032be <parseCommand+0x4a>
 80032b4:	18bb      	adds	r3, r7, r2
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ee      	bne.n	800329c <parseCommand+0x28>
		}
		if (*current == ',') {
 80032be:	2180      	movs	r1, #128	@ 0x80
 80032c0:	187b      	adds	r3, r7, r1
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b2c      	cmp	r3, #44	@ 0x2c
 80032c8:	d109      	bne.n	80032de <parseCommand+0x6a>
			*current = '\0';  // Null-terminate the key
 80032ca:	187b      	adds	r3, r7, r1
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
			current++;        // Move past ','
 80032d2:	000a      	movs	r2, r1
 80032d4:	18bb      	adds	r3, r7, r2
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	18ba      	adds	r2, r7, r2
 80032dc:	6013      	str	r3, [r2, #0]
		}
		strncpy(key, keyStart, sizeof(key) - 1);
 80032de:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80032e0:	2450      	movs	r4, #80	@ 0x50
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2213      	movs	r2, #19
 80032e6:	0018      	movs	r0, r3
 80032e8:	f007 ff27 	bl	800b13a <strncpy>
		key[sizeof(key) - 1] = '\0';  // Ensure null-termination
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	2200      	movs	r2, #0
 80032f0:	74da      	strb	r2, [r3, #19]

		// Extract value
		char *valueStart = current;
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
		while (*current != ';' && *current != '\0') {
 80032fa:	e005      	b.n	8003308 <parseCommand+0x94>
			current++;
 80032fc:	2280      	movs	r2, #128	@ 0x80
 80032fe:	18bb      	adds	r3, r7, r2
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3301      	adds	r3, #1
 8003304:	18ba      	adds	r2, r7, r2
 8003306:	6013      	str	r3, [r2, #0]
		while (*current != ';' && *current != '\0') {
 8003308:	2280      	movs	r2, #128	@ 0x80
 800330a:	18bb      	adds	r3, r7, r2
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b3b      	cmp	r3, #59	@ 0x3b
 8003312:	d004      	beq.n	800331e <parseCommand+0xaa>
 8003314:	18bb      	adds	r3, r7, r2
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ee      	bne.n	80032fc <parseCommand+0x88>
		}
		if (*current == ';') {
 800331e:	2180      	movs	r1, #128	@ 0x80
 8003320:	187b      	adds	r3, r7, r1
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b3b      	cmp	r3, #59	@ 0x3b
 8003328:	d109      	bne.n	800333e <parseCommand+0xca>
			*current = '\0';  // Null-terminate the value
 800332a:	187b      	adds	r3, r7, r1
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
			current++;        // Move past ';'
 8003332:	000a      	movs	r2, r1
 8003334:	18bb      	adds	r3, r7, r2
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	18ba      	adds	r2, r7, r2
 800333c:	6013      	str	r3, [r2, #0]
		}
		strncpy(value, valueStart, sizeof(value) - 1);
 800333e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003340:	243c      	movs	r4, #60	@ 0x3c
 8003342:	193b      	adds	r3, r7, r4
 8003344:	2213      	movs	r2, #19
 8003346:	0018      	movs	r0, r3
 8003348:	f007 fef7 	bl	800b13a <strncpy>
		value[sizeof(value) - 1] = '\0';  // Ensure null-termination
 800334c:	193b      	adds	r3, r7, r4
 800334e:	2200      	movs	r2, #0
 8003350:	74da      	strb	r2, [r3, #19]

		// Process the key-value pair
		if (strcmp(key, "Funtion") == 0) {
 8003352:	4ac4      	ldr	r2, [pc, #784]	@ (8003664 <parseCommand+0x3f0>)
 8003354:	2350      	movs	r3, #80	@ 0x50
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	0011      	movs	r1, r2
 800335a:	0018      	movs	r0, r3
 800335c:	f7fc fed4 	bl	8000108 <strcmp>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d107      	bne.n	8003374 <parseCommand+0x100>
			functionNumber = atoi(value);
 8003364:	193b      	adds	r3, r7, r4
 8003366:	0018      	movs	r0, r3
 8003368:	f006 fec7 	bl	800a0fa <atoi>
 800336c:	0003      	movs	r3, r0
 800336e:	2284      	movs	r2, #132	@ 0x84
 8003370:	18ba      	adds	r2, r7, r2
 8003372:	6013      	str	r3, [r2, #0]
		}

		// Switch processing based on `functionNumber`
		switch (functionNumber) {
 8003374:	2284      	movs	r2, #132	@ 0x84
 8003376:	18bb      	adds	r3, r7, r2
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	d901      	bls.n	8003382 <parseCommand+0x10e>
 800337e:	f000 fc38 	bl	8003bf2 <parseCommand+0x97e>
 8003382:	18bb      	adds	r3, r7, r2
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	009a      	lsls	r2, r3, #2
 8003388:	4bb7      	ldr	r3, [pc, #732]	@ (8003668 <parseCommand+0x3f4>)
 800338a:	18d3      	adds	r3, r2, r3
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	469f      	mov	pc, r3
		case 1:  // System initialization (homing of all motors)
			if (strcmp(key, "Sysinit") == 0) {
 8003390:	4ab6      	ldr	r2, [pc, #728]	@ (800366c <parseCommand+0x3f8>)
 8003392:	2350      	movs	r3, #80	@ 0x50
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	0011      	movs	r1, r2
 8003398:	0018      	movs	r0, r3
 800339a:	f7fc feb5 	bl	8000108 <strcmp>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d001      	beq.n	80033a6 <parseCommand+0x132>
 80033a2:	f000 fc30 	bl	8003c06 <parseCommand+0x992>
				if (atoi(value) == 1) {
 80033a6:	233c      	movs	r3, #60	@ 0x3c
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	0018      	movs	r0, r3
 80033ac:	f006 fea5 	bl	800a0fa <atoi>
 80033b0:	0003      	movs	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <parseCommand+0x146>
 80033b6:	f000 fc26 	bl	8003c06 <parseCommand+0x992>
					system_initialisation();  // Call system initialization
 80033ba:	f000 fc79 	bl	8003cb0 <system_initialisation>
					sendUARTMessage("ok\n"); // Acknowledge successful completion
 80033be:	4bac      	ldr	r3, [pc, #688]	@ (8003670 <parseCommand+0x3fc>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 fc5f 	bl	8003c84 <sendUARTMessage>
				}
			}
			break;
 80033c6:	f000 fc1e 	bl	8003c06 <parseCommand+0x992>

		case 2:  // Control Motor 5 for "door"
			if (strcmp(key, "Door") == 0) {
 80033ca:	4aaa      	ldr	r2, [pc, #680]	@ (8003674 <parseCommand+0x400>)
 80033cc:	2350      	movs	r3, #80	@ 0x50
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	0011      	movs	r1, r2
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7fc fe98 	bl	8000108 <strcmp>
 80033d8:	1e03      	subs	r3, r0, #0
 80033da:	d001      	beq.n	80033e0 <parseCommand+0x16c>
 80033dc:	f000 fc15 	bl	8003c0a <parseCommand+0x996>
				if (atoi(value) == 1) {
 80033e0:	233c      	movs	r3, #60	@ 0x3c
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	0018      	movs	r0, r3
 80033e6:	f006 fe88 	bl	800a0fa <atoi>
 80033ea:	0003      	movs	r3, r0
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d109      	bne.n	8003404 <parseCommand+0x190>
					controlMotor5("open");  // Open the door
 80033f0:	4ba1      	ldr	r3, [pc, #644]	@ (8003678 <parseCommand+0x404>)
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 fec6 	bl	8004184 <controlMotor5>
					sendUARTMessage("ok\n");
 80033f8:	4b9d      	ldr	r3, [pc, #628]	@ (8003670 <parseCommand+0x3fc>)
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 fc42 	bl	8003c84 <sendUARTMessage>
					sendUARTMessage("ok\n");
				} else {
					sendUARTMessage("Invalid door value\n");
				}
			}
			break;
 8003400:	f000 fc03 	bl	8003c0a <parseCommand+0x996>
				} else if (atoi(value) == 0) {
 8003404:	233c      	movs	r3, #60	@ 0x3c
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	0018      	movs	r0, r3
 800340a:	f006 fe76 	bl	800a0fa <atoi>
 800340e:	1e03      	subs	r3, r0, #0
 8003410:	d109      	bne.n	8003426 <parseCommand+0x1b2>
					controlMotor5("close");  // Close the door
 8003412:	4b9a      	ldr	r3, [pc, #616]	@ (800367c <parseCommand+0x408>)
 8003414:	0018      	movs	r0, r3
 8003416:	f000 feb5 	bl	8004184 <controlMotor5>
					sendUARTMessage("ok\n");
 800341a:	4b95      	ldr	r3, [pc, #596]	@ (8003670 <parseCommand+0x3fc>)
 800341c:	0018      	movs	r0, r3
 800341e:	f000 fc31 	bl	8003c84 <sendUARTMessage>
			break;
 8003422:	f000 fbf2 	bl	8003c0a <parseCommand+0x996>
					sendUARTMessage("Invalid door value\n");
 8003426:	4b96      	ldr	r3, [pc, #600]	@ (8003680 <parseCommand+0x40c>)
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fc2b 	bl	8003c84 <sendUARTMessage>
			break;
 800342e:	f000 fbec 	bl	8003c0a <parseCommand+0x996>

		case 3:  // Rotate phone using "Revolve"
			if (strcmp(key, "Revolve") == 0) {
 8003432:	4a94      	ldr	r2, [pc, #592]	@ (8003684 <parseCommand+0x410>)
 8003434:	2350      	movs	r3, #80	@ 0x50
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	0011      	movs	r1, r2
 800343a:	0018      	movs	r0, r3
 800343c:	f7fc fe64 	bl	8000108 <strcmp>
 8003440:	1e03      	subs	r3, r0, #0
 8003442:	d001      	beq.n	8003448 <parseCommand+0x1d4>
 8003444:	f000 fbe3 	bl	8003c0e <parseCommand+0x99a>
				int degree = atoi(value); // Convert the value to an integer (e.g., 0, 90, 180)
 8003448:	233c      	movs	r3, #60	@ 0x3c
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	0018      	movs	r0, r3
 800344e:	f006 fe54 	bl	800a0fa <atoi>
 8003452:	0003      	movs	r3, r0
 8003454:	667b      	str	r3, [r7, #100]	@ 0x64
				rotatePhone(degree);     // Rotate phone by the specified degree
 8003456:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003458:	f7fd fda6 	bl	8000fa8 <__aeabi_i2f>
 800345c:	1c03      	adds	r3, r0, #0
 800345e:	1c18      	adds	r0, r3, #0
 8003460:	f000 fef6 	bl	8004250 <rotatePhone>
				sendUARTMessage("ok\n");  // Acknowledge successful rotation
 8003464:	4b82      	ldr	r3, [pc, #520]	@ (8003670 <parseCommand+0x3fc>)
 8003466:	0018      	movs	r0, r3
 8003468:	f000 fc0c 	bl	8003c84 <sendUARTMessage>
			}
			break;
 800346c:	f000 fbcf 	bl	8003c0e <parseCommand+0x99a>
		case 4:  // Light brightness control
			if (strcmp(key, "MultipleBri") == 0) {
 8003470:	4a85      	ldr	r2, [pc, #532]	@ (8003688 <parseCommand+0x414>)
 8003472:	2350      	movs	r3, #80	@ 0x50
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	0011      	movs	r1, r2
 8003478:	0018      	movs	r0, r3
 800347a:	f7fc fe45 	bl	8000108 <strcmp>
 800347e:	1e03      	subs	r3, r0, #0
 8003480:	d001      	beq.n	8003486 <parseCommand+0x212>
 8003482:	f000 fbc6 	bl	8003c12 <parseCommand+0x99e>
				// Debug: Show the received value
				sendUARTMessage("Parsing Light value: ");
 8003486:	4b81      	ldr	r3, [pc, #516]	@ (800368c <parseCommand+0x418>)
 8003488:	0018      	movs	r0, r3
 800348a:	f000 fbfb 	bl	8003c84 <sendUARTMessage>
				sendUARTMessage(value);
 800348e:	243c      	movs	r4, #60	@ 0x3c
 8003490:	193b      	adds	r3, r7, r4
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fbf6 	bl	8003c84 <sendUARTMessage>
				sendUARTMessage("\n");
 8003498:	4b7d      	ldr	r3, [pc, #500]	@ (8003690 <parseCommand+0x41c>)
 800349a:	0018      	movs	r0, r3
 800349c:	f000 fbf2 	bl	8003c84 <sendUARTMessage>

				// Split the values by `,`
				char *token = strtok(value, ",");
 80034a0:	4a7c      	ldr	r2, [pc, #496]	@ (8003694 <parseCommand+0x420>)
 80034a2:	193b      	adds	r3, r7, r4
 80034a4:	0011      	movs	r1, r2
 80034a6:	0018      	movs	r0, r3
 80034a8:	f007 fe70 	bl	800b18c <strtok>
 80034ac:	0003      	movs	r3, r0
 80034ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
				uint8_t lightIndex = 0;
 80034b0:	237b      	movs	r3, #123	@ 0x7b
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]

				while (token != NULL && lightIndex < 4) {
 80034b8:	e04e      	b.n	8003558 <parseCommand+0x2e4>
					// Convert value from string to float (percentage between 0.0 and 1.0)
					float brightnessFloat = atof(token);
 80034ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034bc:	0018      	movs	r0, r3
 80034be:	f006 fe17 	bl	800a0f0 <atof>
 80034c2:	0002      	movs	r2, r0
 80034c4:	000b      	movs	r3, r1
 80034c6:	0010      	movs	r0, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	f7ff fc9b 	bl	8002e04 <__aeabi_d2f>
 80034ce:	1c03      	adds	r3, r0, #0
 80034d0:	677b      	str	r3, [r7, #116]	@ 0x74

					// Ensure the brightness is within the range 0 to 1
					if (brightnessFloat < 0)
 80034d2:	2100      	movs	r1, #0
 80034d4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80034d6:	f7fd f803 	bl	80004e0 <__aeabi_fcmplt>
 80034da:	1e03      	subs	r3, r0, #0
 80034dc:	d001      	beq.n	80034e2 <parseCommand+0x26e>
						brightnessFloat = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	677b      	str	r3, [r7, #116]	@ 0x74
					if (brightnessFloat > 1)
 80034e2:	21fe      	movs	r1, #254	@ 0xfe
 80034e4:	0589      	lsls	r1, r1, #22
 80034e6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80034e8:	f7fd f80e 	bl	8000508 <__aeabi_fcmpgt>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d002      	beq.n	80034f6 <parseCommand+0x282>
						brightnessFloat = 1;
 80034f0:	23fe      	movs	r3, #254	@ 0xfe
 80034f2:	059b      	lsls	r3, r3, #22
 80034f4:	677b      	str	r3, [r7, #116]	@ 0x74

					// Convert to 0-100 range for SetLightBrightness
					int brightnessPercent = (int) (brightnessFloat * 100);
 80034f6:	4968      	ldr	r1, [pc, #416]	@ (8003698 <parseCommand+0x424>)
 80034f8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80034fa:	f7fd fbf7 	bl	8000cec <__aeabi_fmul>
 80034fe:	1c03      	adds	r3, r0, #0
 8003500:	1c18      	adds	r0, r3, #0
 8003502:	f7fd fd31 	bl	8000f68 <__aeabi_f2iz>
 8003506:	0003      	movs	r3, r0
 8003508:	66bb      	str	r3, [r7, #104]	@ 0x68

					// Debug: Show parsed brightness for the current light
					char debugMessage[50];
					snprintf(debugMessage, sizeof(debugMessage),
 800350a:	247b      	movs	r4, #123	@ 0x7b
 800350c:	193b      	adds	r3, r7, r4
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	1c59      	adds	r1, r3, #1
 8003512:	4a62      	ldr	r2, [pc, #392]	@ (800369c <parseCommand+0x428>)
 8003514:	2508      	movs	r5, #8
 8003516:	1978      	adds	r0, r7, r5
 8003518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	000b      	movs	r3, r1
 800351e:	2132      	movs	r1, #50	@ 0x32
 8003520:	f007 fd64 	bl	800afec <sniprintf>
							"Light %d Brightness: %d%%\n", lightIndex + 1,
							brightnessPercent);  // +1 to match LED numbering
					sendUARTMessage(debugMessage);
 8003524:	197b      	adds	r3, r7, r5
 8003526:	0018      	movs	r0, r3
 8003528:	f000 fbac 	bl	8003c84 <sendUARTMessage>

					// Set brightness for the current light (lightIndex + 1 to match LED numbering)
					SetLightBrightness(lightIndex + 1, brightnessPercent);
 800352c:	193b      	adds	r3, r7, r4
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	0011      	movs	r1, r2
 800353a:	0018      	movs	r0, r3
 800353c:	f002 f840 	bl	80055c0 <SetLightBrightness>

					// Move to the next value
					token = strtok(NULL, ",");
 8003540:	4b54      	ldr	r3, [pc, #336]	@ (8003694 <parseCommand+0x420>)
 8003542:	0019      	movs	r1, r3
 8003544:	2000      	movs	r0, #0
 8003546:	f007 fe21 	bl	800b18c <strtok>
 800354a:	0003      	movs	r3, r0
 800354c:	67fb      	str	r3, [r7, #124]	@ 0x7c
					lightIndex++;
 800354e:	193b      	adds	r3, r7, r4
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	193b      	adds	r3, r7, r4
 8003554:	3201      	adds	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
				while (token != NULL && lightIndex < 4) {
 8003558:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <parseCommand+0x2f4>
 800355e:	237b      	movs	r3, #123	@ 0x7b
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d9a8      	bls.n	80034ba <parseCommand+0x246>
				}

				// Ensure all 4 lights have been processed
				if (lightIndex == 4) {
 8003568:	237b      	movs	r3, #123	@ 0x7b
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d000      	beq.n	8003574 <parseCommand+0x300>
 8003572:	e34e      	b.n	8003c12 <parseCommand+0x99e>
					sendUARTMessage("Light brightness set successfully\n");
 8003574:	4b4a      	ldr	r3, [pc, #296]	@ (80036a0 <parseCommand+0x42c>)
 8003576:	0018      	movs	r0, r3
 8003578:	f000 fb84 	bl	8003c84 <sendUARTMessage>
				} else {
					// sendUARTMessage("Error: Not enough brightness values provided\n");
				}
			}
			break;
 800357c:	e349      	b.n	8003c12 <parseCommand+0x99e>

		case 7:
		    if (strcmp(key, "P1_X") == 0 || strcmp(key, "P1_Y") == 0 ||
 800357e:	4a49      	ldr	r2, [pc, #292]	@ (80036a4 <parseCommand+0x430>)
 8003580:	2450      	movs	r4, #80	@ 0x50
 8003582:	193b      	adds	r3, r7, r4
 8003584:	0011      	movs	r1, r2
 8003586:	0018      	movs	r0, r3
 8003588:	f7fc fdbe 	bl	8000108 <strcmp>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d020      	beq.n	80035d2 <parseCommand+0x35e>
 8003590:	4a45      	ldr	r2, [pc, #276]	@ (80036a8 <parseCommand+0x434>)
 8003592:	193b      	adds	r3, r7, r4
 8003594:	0011      	movs	r1, r2
 8003596:	0018      	movs	r0, r3
 8003598:	f7fc fdb6 	bl	8000108 <strcmp>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d018      	beq.n	80035d2 <parseCommand+0x35e>
		        strcmp(key, "P2_X") == 0 || strcmp(key, "P2_Y") == 0 || strcmp(key, "Speed") == 0) {
 80035a0:	4a42      	ldr	r2, [pc, #264]	@ (80036ac <parseCommand+0x438>)
 80035a2:	193b      	adds	r3, r7, r4
 80035a4:	0011      	movs	r1, r2
 80035a6:	0018      	movs	r0, r3
 80035a8:	f7fc fdae 	bl	8000108 <strcmp>
 80035ac:	1e03      	subs	r3, r0, #0
		    if (strcmp(key, "P1_X") == 0 || strcmp(key, "P1_Y") == 0 ||
 80035ae:	d010      	beq.n	80035d2 <parseCommand+0x35e>
		        strcmp(key, "P2_X") == 0 || strcmp(key, "P2_Y") == 0 || strcmp(key, "Speed") == 0) {
 80035b0:	4a3f      	ldr	r2, [pc, #252]	@ (80036b0 <parseCommand+0x43c>)
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	0011      	movs	r1, r2
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fc fda6 	bl	8000108 <strcmp>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d008      	beq.n	80035d2 <parseCommand+0x35e>
 80035c0:	4a3c      	ldr	r2, [pc, #240]	@ (80036b4 <parseCommand+0x440>)
 80035c2:	193b      	adds	r3, r7, r4
 80035c4:	0011      	movs	r1, r2
 80035c6:	0018      	movs	r0, r3
 80035c8:	f7fc fd9e 	bl	8000108 <strcmp>
 80035cc:	1e03      	subs	r3, r0, #0
 80035ce:	d000      	beq.n	80035d2 <parseCommand+0x35e>
 80035d0:	e321      	b.n	8003c16 <parseCommand+0x9a2>
		        static int px1 = -1, py1 = -1, px2 = -1, py2 = -1, speed = -1;

		        if (strcmp(key, "P1_X") == 0) px1 = atoi(value);
 80035d2:	4a34      	ldr	r2, [pc, #208]	@ (80036a4 <parseCommand+0x430>)
 80035d4:	2350      	movs	r3, #80	@ 0x50
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	0011      	movs	r1, r2
 80035da:	0018      	movs	r0, r3
 80035dc:	f7fc fd94 	bl	8000108 <strcmp>
 80035e0:	1e03      	subs	r3, r0, #0
 80035e2:	d108      	bne.n	80035f6 <parseCommand+0x382>
 80035e4:	233c      	movs	r3, #60	@ 0x3c
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	0018      	movs	r0, r3
 80035ea:	f006 fd86 	bl	800a0fa <atoi>
 80035ee:	0002      	movs	r2, r0
 80035f0:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <parseCommand+0x444>)
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e079      	b.n	80036ea <parseCommand+0x476>
		        else if (strcmp(key, "P1_Y") == 0) py1 = atoi(value);
 80035f6:	4a2c      	ldr	r2, [pc, #176]	@ (80036a8 <parseCommand+0x434>)
 80035f8:	2350      	movs	r3, #80	@ 0x50
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	0011      	movs	r1, r2
 80035fe:	0018      	movs	r0, r3
 8003600:	f7fc fd82 	bl	8000108 <strcmp>
 8003604:	1e03      	subs	r3, r0, #0
 8003606:	d108      	bne.n	800361a <parseCommand+0x3a6>
 8003608:	233c      	movs	r3, #60	@ 0x3c
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	0018      	movs	r0, r3
 800360e:	f006 fd74 	bl	800a0fa <atoi>
 8003612:	0002      	movs	r2, r0
 8003614:	4b29      	ldr	r3, [pc, #164]	@ (80036bc <parseCommand+0x448>)
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e067      	b.n	80036ea <parseCommand+0x476>
		        else if (strcmp(key, "P2_X") == 0) px2 = atoi(value);
 800361a:	4a24      	ldr	r2, [pc, #144]	@ (80036ac <parseCommand+0x438>)
 800361c:	2350      	movs	r3, #80	@ 0x50
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	0011      	movs	r1, r2
 8003622:	0018      	movs	r0, r3
 8003624:	f7fc fd70 	bl	8000108 <strcmp>
 8003628:	1e03      	subs	r3, r0, #0
 800362a:	d108      	bne.n	800363e <parseCommand+0x3ca>
 800362c:	233c      	movs	r3, #60	@ 0x3c
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	0018      	movs	r0, r3
 8003632:	f006 fd62 	bl	800a0fa <atoi>
 8003636:	0002      	movs	r2, r0
 8003638:	4b21      	ldr	r3, [pc, #132]	@ (80036c0 <parseCommand+0x44c>)
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e055      	b.n	80036ea <parseCommand+0x476>
		        else if (strcmp(key, "P2_Y") == 0) py2 = atoi(value);
 800363e:	4a1c      	ldr	r2, [pc, #112]	@ (80036b0 <parseCommand+0x43c>)
 8003640:	2350      	movs	r3, #80	@ 0x50
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	0011      	movs	r1, r2
 8003646:	0018      	movs	r0, r3
 8003648:	f7fc fd5e 	bl	8000108 <strcmp>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d13b      	bne.n	80036c8 <parseCommand+0x454>
 8003650:	233c      	movs	r3, #60	@ 0x3c
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	0018      	movs	r0, r3
 8003656:	f006 fd50 	bl	800a0fa <atoi>
 800365a:	0002      	movs	r2, r0
 800365c:	4b19      	ldr	r3, [pc, #100]	@ (80036c4 <parseCommand+0x450>)
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e043      	b.n	80036ea <parseCommand+0x476>
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	0800d438 	.word	0x0800d438
 8003668:	0800d6ac 	.word	0x0800d6ac
 800366c:	0800d440 	.word	0x0800d440
 8003670:	0800d448 	.word	0x0800d448
 8003674:	0800d44c 	.word	0x0800d44c
 8003678:	0800d454 	.word	0x0800d454
 800367c:	0800d45c 	.word	0x0800d45c
 8003680:	0800d464 	.word	0x0800d464
 8003684:	0800d478 	.word	0x0800d478
 8003688:	0800d480 	.word	0x0800d480
 800368c:	0800d48c 	.word	0x0800d48c
 8003690:	0800d4a4 	.word	0x0800d4a4
 8003694:	0800d4a8 	.word	0x0800d4a8
 8003698:	42c80000 	.word	0x42c80000
 800369c:	0800d4ac 	.word	0x0800d4ac
 80036a0:	0800d4c8 	.word	0x0800d4c8
 80036a4:	0800d4ec 	.word	0x0800d4ec
 80036a8:	0800d4f4 	.word	0x0800d4f4
 80036ac:	0800d4fc 	.word	0x0800d4fc
 80036b0:	0800d504 	.word	0x0800d504
 80036b4:	0800d50c 	.word	0x0800d50c
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20000004 	.word	0x20000004
 80036c0:	20000008 	.word	0x20000008
 80036c4:	2000000c 	.word	0x2000000c
		        else if (strcmp(key, "Speed") == 0) speed = atoi(value);
 80036c8:	4acd      	ldr	r2, [pc, #820]	@ (8003a00 <parseCommand+0x78c>)
 80036ca:	2350      	movs	r3, #80	@ 0x50
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	0011      	movs	r1, r2
 80036d0:	0018      	movs	r0, r3
 80036d2:	f7fc fd19 	bl	8000108 <strcmp>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d107      	bne.n	80036ea <parseCommand+0x476>
 80036da:	233c      	movs	r3, #60	@ 0x3c
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	0018      	movs	r0, r3
 80036e0:	f006 fd0b 	bl	800a0fa <atoi>
 80036e4:	0002      	movs	r2, r0
 80036e6:	4bc7      	ldr	r3, [pc, #796]	@ (8003a04 <parseCommand+0x790>)
 80036e8:	601a      	str	r2, [r3, #0]

		        if (px1 >= 0 && py1 >= 0 && px2 >= 0 && py2 >= 0 && speed >= 0) {
 80036ea:	4bc7      	ldr	r3, [pc, #796]	@ (8003a08 <parseCommand+0x794>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da00      	bge.n	80036f4 <parseCommand+0x480>
 80036f2:	e290      	b.n	8003c16 <parseCommand+0x9a2>
 80036f4:	4bc5      	ldr	r3, [pc, #788]	@ (8003a0c <parseCommand+0x798>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	da00      	bge.n	80036fe <parseCommand+0x48a>
 80036fc:	e28b      	b.n	8003c16 <parseCommand+0x9a2>
 80036fe:	4bc4      	ldr	r3, [pc, #784]	@ (8003a10 <parseCommand+0x79c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	da00      	bge.n	8003708 <parseCommand+0x494>
 8003706:	e286      	b.n	8003c16 <parseCommand+0x9a2>
 8003708:	4bc2      	ldr	r3, [pc, #776]	@ (8003a14 <parseCommand+0x7a0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	da00      	bge.n	8003712 <parseCommand+0x49e>
 8003710:	e281      	b.n	8003c16 <parseCommand+0x9a2>
 8003712:	4bbc      	ldr	r3, [pc, #752]	@ (8003a04 <parseCommand+0x790>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	da00      	bge.n	800371c <parseCommand+0x4a8>
 800371a:	e27c      	b.n	8003c16 <parseCommand+0x9a2>
		            multitouch_screen_test(px1, py1, px2, py2, speed);
 800371c:	4bba      	ldr	r3, [pc, #744]	@ (8003a08 <parseCommand+0x794>)
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	4bba      	ldr	r3, [pc, #744]	@ (8003a0c <parseCommand+0x798>)
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	4bba      	ldr	r3, [pc, #744]	@ (8003a10 <parseCommand+0x79c>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4bba      	ldr	r3, [pc, #744]	@ (8003a14 <parseCommand+0x7a0>)
 800372a:	681c      	ldr	r4, [r3, #0]
 800372c:	4bb5      	ldr	r3, [pc, #724]	@ (8003a04 <parseCommand+0x790>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	0023      	movs	r3, r4
 8003734:	f001 fc44 	bl	8004fc0 <multitouch_screen_test>
		            sendUARTMessage("Multi-touch screen test ok\n");
 8003738:	4bb7      	ldr	r3, [pc, #732]	@ (8003a18 <parseCommand+0x7a4>)
 800373a:	0018      	movs	r0, r3
 800373c:	f000 faa2 	bl	8003c84 <sendUARTMessage>

		            px1 = py1 = px2 = py2 = speed = -1;
 8003740:	4bb0      	ldr	r3, [pc, #704]	@ (8003a04 <parseCommand+0x790>)
 8003742:	2201      	movs	r2, #1
 8003744:	4252      	negs	r2, r2
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	4bae      	ldr	r3, [pc, #696]	@ (8003a04 <parseCommand+0x790>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4bb1      	ldr	r3, [pc, #708]	@ (8003a14 <parseCommand+0x7a0>)
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	4bb0      	ldr	r3, [pc, #704]	@ (8003a14 <parseCommand+0x7a0>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4bae      	ldr	r3, [pc, #696]	@ (8003a10 <parseCommand+0x79c>)
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	4bad      	ldr	r3, [pc, #692]	@ (8003a10 <parseCommand+0x79c>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4bab      	ldr	r3, [pc, #684]	@ (8003a0c <parseCommand+0x798>)
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	4baa      	ldr	r3, [pc, #680]	@ (8003a0c <parseCommand+0x798>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4ba8      	ldr	r3, [pc, #672]	@ (8003a08 <parseCommand+0x794>)
 8003766:	601a      	str	r2, [r3, #0]
		        }
		    }
		    break;
 8003768:	e255      	b.n	8003c16 <parseCommand+0x9a2>


		case 8:
		    if (strcmp(key, "P1_X") == 0 || strcmp(key, "P1_Y") == 0 ||
 800376a:	4aac      	ldr	r2, [pc, #688]	@ (8003a1c <parseCommand+0x7a8>)
 800376c:	2450      	movs	r4, #80	@ 0x50
 800376e:	193b      	adds	r3, r7, r4
 8003770:	0011      	movs	r1, r2
 8003772:	0018      	movs	r0, r3
 8003774:	f7fc fcc8 	bl	8000108 <strcmp>
 8003778:	1e03      	subs	r3, r0, #0
 800377a:	d028      	beq.n	80037ce <parseCommand+0x55a>
 800377c:	4aa8      	ldr	r2, [pc, #672]	@ (8003a20 <parseCommand+0x7ac>)
 800377e:	193b      	adds	r3, r7, r4
 8003780:	0011      	movs	r1, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f7fc fcc0 	bl	8000108 <strcmp>
 8003788:	1e03      	subs	r3, r0, #0
 800378a:	d020      	beq.n	80037ce <parseCommand+0x55a>
		        strcmp(key, "P2_X") == 0 || strcmp(key, "P2_Y") == 0 ||
 800378c:	4aa5      	ldr	r2, [pc, #660]	@ (8003a24 <parseCommand+0x7b0>)
 800378e:	193b      	adds	r3, r7, r4
 8003790:	0011      	movs	r1, r2
 8003792:	0018      	movs	r0, r3
 8003794:	f7fc fcb8 	bl	8000108 <strcmp>
 8003798:	1e03      	subs	r3, r0, #0
		    if (strcmp(key, "P1_X") == 0 || strcmp(key, "P1_Y") == 0 ||
 800379a:	d018      	beq.n	80037ce <parseCommand+0x55a>
		        strcmp(key, "P2_X") == 0 || strcmp(key, "P2_Y") == 0 ||
 800379c:	4aa2      	ldr	r2, [pc, #648]	@ (8003a28 <parseCommand+0x7b4>)
 800379e:	193b      	adds	r3, r7, r4
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7fc fcb0 	bl	8000108 <strcmp>
 80037a8:	1e03      	subs	r3, r0, #0
 80037aa:	d010      	beq.n	80037ce <parseCommand+0x55a>
		        strcmp(key, "Swipe") == 0 || strcmp(key, "Speed") == 0) {
 80037ac:	4a9f      	ldr	r2, [pc, #636]	@ (8003a2c <parseCommand+0x7b8>)
 80037ae:	193b      	adds	r3, r7, r4
 80037b0:	0011      	movs	r1, r2
 80037b2:	0018      	movs	r0, r3
 80037b4:	f7fc fca8 	bl	8000108 <strcmp>
 80037b8:	1e03      	subs	r3, r0, #0
		        strcmp(key, "P2_X") == 0 || strcmp(key, "P2_Y") == 0 ||
 80037ba:	d008      	beq.n	80037ce <parseCommand+0x55a>
		        strcmp(key, "Swipe") == 0 || strcmp(key, "Speed") == 0) {
 80037bc:	4a90      	ldr	r2, [pc, #576]	@ (8003a00 <parseCommand+0x78c>)
 80037be:	193b      	adds	r3, r7, r4
 80037c0:	0011      	movs	r1, r2
 80037c2:	0018      	movs	r0, r3
 80037c4:	f7fc fca0 	bl	8000108 <strcmp>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d000      	beq.n	80037ce <parseCommand+0x55a>
 80037cc:	e225      	b.n	8003c1a <parseCommand+0x9a6>
		        static int px1 = -1, py1 = -1, px2 = -1, py2 = -1, numSteps = -1, speed = -1;

		        if (strcmp(key, "P1_X") == 0) px1 = atoi(value);
 80037ce:	4a93      	ldr	r2, [pc, #588]	@ (8003a1c <parseCommand+0x7a8>)
 80037d0:	2350      	movs	r3, #80	@ 0x50
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	0011      	movs	r1, r2
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7fc fc96 	bl	8000108 <strcmp>
 80037dc:	1e03      	subs	r3, r0, #0
 80037de:	d108      	bne.n	80037f2 <parseCommand+0x57e>
 80037e0:	233c      	movs	r3, #60	@ 0x3c
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	0018      	movs	r0, r3
 80037e6:	f006 fc88 	bl	800a0fa <atoi>
 80037ea:	0002      	movs	r2, r0
 80037ec:	4b90      	ldr	r3, [pc, #576]	@ (8003a30 <parseCommand+0x7bc>)
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e058      	b.n	80038a4 <parseCommand+0x630>
		        else if (strcmp(key, "P1_Y") == 0) py1 = atoi(value);
 80037f2:	4a8b      	ldr	r2, [pc, #556]	@ (8003a20 <parseCommand+0x7ac>)
 80037f4:	2350      	movs	r3, #80	@ 0x50
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	0011      	movs	r1, r2
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fc fc84 	bl	8000108 <strcmp>
 8003800:	1e03      	subs	r3, r0, #0
 8003802:	d108      	bne.n	8003816 <parseCommand+0x5a2>
 8003804:	233c      	movs	r3, #60	@ 0x3c
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	0018      	movs	r0, r3
 800380a:	f006 fc76 	bl	800a0fa <atoi>
 800380e:	0002      	movs	r2, r0
 8003810:	4b88      	ldr	r3, [pc, #544]	@ (8003a34 <parseCommand+0x7c0>)
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e046      	b.n	80038a4 <parseCommand+0x630>
		        else if (strcmp(key, "P2_X") == 0) px2 = atoi(value);
 8003816:	4a83      	ldr	r2, [pc, #524]	@ (8003a24 <parseCommand+0x7b0>)
 8003818:	2350      	movs	r3, #80	@ 0x50
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	0011      	movs	r1, r2
 800381e:	0018      	movs	r0, r3
 8003820:	f7fc fc72 	bl	8000108 <strcmp>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d108      	bne.n	800383a <parseCommand+0x5c6>
 8003828:	233c      	movs	r3, #60	@ 0x3c
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	0018      	movs	r0, r3
 800382e:	f006 fc64 	bl	800a0fa <atoi>
 8003832:	0002      	movs	r2, r0
 8003834:	4b80      	ldr	r3, [pc, #512]	@ (8003a38 <parseCommand+0x7c4>)
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e034      	b.n	80038a4 <parseCommand+0x630>
		        else if (strcmp(key, "P2_Y") == 0) py2 = atoi(value);
 800383a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a28 <parseCommand+0x7b4>)
 800383c:	2350      	movs	r3, #80	@ 0x50
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	0011      	movs	r1, r2
 8003842:	0018      	movs	r0, r3
 8003844:	f7fc fc60 	bl	8000108 <strcmp>
 8003848:	1e03      	subs	r3, r0, #0
 800384a:	d108      	bne.n	800385e <parseCommand+0x5ea>
 800384c:	233c      	movs	r3, #60	@ 0x3c
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	0018      	movs	r0, r3
 8003852:	f006 fc52 	bl	800a0fa <atoi>
 8003856:	0002      	movs	r2, r0
 8003858:	4b78      	ldr	r3, [pc, #480]	@ (8003a3c <parseCommand+0x7c8>)
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e022      	b.n	80038a4 <parseCommand+0x630>
		        else if (strcmp(key, "Swipe") == 0) numSteps = atoi(value);
 800385e:	4a73      	ldr	r2, [pc, #460]	@ (8003a2c <parseCommand+0x7b8>)
 8003860:	2350      	movs	r3, #80	@ 0x50
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	0011      	movs	r1, r2
 8003866:	0018      	movs	r0, r3
 8003868:	f7fc fc4e 	bl	8000108 <strcmp>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d108      	bne.n	8003882 <parseCommand+0x60e>
 8003870:	233c      	movs	r3, #60	@ 0x3c
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	0018      	movs	r0, r3
 8003876:	f006 fc40 	bl	800a0fa <atoi>
 800387a:	0002      	movs	r2, r0
 800387c:	4b70      	ldr	r3, [pc, #448]	@ (8003a40 <parseCommand+0x7cc>)
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e010      	b.n	80038a4 <parseCommand+0x630>
		        else if (strcmp(key, "Speed") == 0) speed = atoi(value);
 8003882:	4a5f      	ldr	r2, [pc, #380]	@ (8003a00 <parseCommand+0x78c>)
 8003884:	2350      	movs	r3, #80	@ 0x50
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	0011      	movs	r1, r2
 800388a:	0018      	movs	r0, r3
 800388c:	f7fc fc3c 	bl	8000108 <strcmp>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d107      	bne.n	80038a4 <parseCommand+0x630>
 8003894:	233c      	movs	r3, #60	@ 0x3c
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	0018      	movs	r0, r3
 800389a:	f006 fc2e 	bl	800a0fa <atoi>
 800389e:	0002      	movs	r2, r0
 80038a0:	4b68      	ldr	r3, [pc, #416]	@ (8003a44 <parseCommand+0x7d0>)
 80038a2:	601a      	str	r2, [r3, #0]

		        if (px1 >= 0 && py1 >= 0 && px2 >= 0 && py2 >= 0 && numSteps >= 0 && speed >= 0) {
 80038a4:	4b62      	ldr	r3, [pc, #392]	@ (8003a30 <parseCommand+0x7bc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	da00      	bge.n	80038ae <parseCommand+0x63a>
 80038ac:	e1b5      	b.n	8003c1a <parseCommand+0x9a6>
 80038ae:	4b61      	ldr	r3, [pc, #388]	@ (8003a34 <parseCommand+0x7c0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	da00      	bge.n	80038b8 <parseCommand+0x644>
 80038b6:	e1b0      	b.n	8003c1a <parseCommand+0x9a6>
 80038b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003a38 <parseCommand+0x7c4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da00      	bge.n	80038c2 <parseCommand+0x64e>
 80038c0:	e1ab      	b.n	8003c1a <parseCommand+0x9a6>
 80038c2:	4b5e      	ldr	r3, [pc, #376]	@ (8003a3c <parseCommand+0x7c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da00      	bge.n	80038cc <parseCommand+0x658>
 80038ca:	e1a6      	b.n	8003c1a <parseCommand+0x9a6>
 80038cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003a40 <parseCommand+0x7cc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da00      	bge.n	80038d6 <parseCommand+0x662>
 80038d4:	e1a1      	b.n	8003c1a <parseCommand+0x9a6>
 80038d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a44 <parseCommand+0x7d0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	da00      	bge.n	80038e0 <parseCommand+0x66c>
 80038de:	e19c      	b.n	8003c1a <parseCommand+0x9a6>
		            screen_test(px1, py1, px2, py2, numSteps, speed);
 80038e0:	4b53      	ldr	r3, [pc, #332]	@ (8003a30 <parseCommand+0x7bc>)
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	4b53      	ldr	r3, [pc, #332]	@ (8003a34 <parseCommand+0x7c0>)
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	4b53      	ldr	r3, [pc, #332]	@ (8003a38 <parseCommand+0x7c4>)
 80038ea:	681c      	ldr	r4, [r3, #0]
 80038ec:	4b53      	ldr	r3, [pc, #332]	@ (8003a3c <parseCommand+0x7c8>)
 80038ee:	681d      	ldr	r5, [r3, #0]
 80038f0:	4b53      	ldr	r3, [pc, #332]	@ (8003a40 <parseCommand+0x7cc>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b53      	ldr	r3, [pc, #332]	@ (8003a44 <parseCommand+0x7d0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	9200      	str	r2, [sp, #0]
 80038fc:	002b      	movs	r3, r5
 80038fe:	0022      	movs	r2, r4
 8003900:	f001 f9ee 	bl	8004ce0 <screen_test>
		            sendUARTMessage("Screen test with swipe ok\n");
 8003904:	4b50      	ldr	r3, [pc, #320]	@ (8003a48 <parseCommand+0x7d4>)
 8003906:	0018      	movs	r0, r3
 8003908:	f000 f9bc 	bl	8003c84 <sendUARTMessage>

		            px1 = py1 = px2 = py2 = numSteps = speed = -1;
 800390c:	4b4d      	ldr	r3, [pc, #308]	@ (8003a44 <parseCommand+0x7d0>)
 800390e:	2201      	movs	r2, #1
 8003910:	4252      	negs	r2, r2
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	4b4b      	ldr	r3, [pc, #300]	@ (8003a44 <parseCommand+0x7d0>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b49      	ldr	r3, [pc, #292]	@ (8003a40 <parseCommand+0x7cc>)
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	4b48      	ldr	r3, [pc, #288]	@ (8003a40 <parseCommand+0x7cc>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b46      	ldr	r3, [pc, #280]	@ (8003a3c <parseCommand+0x7c8>)
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	4b45      	ldr	r3, [pc, #276]	@ (8003a3c <parseCommand+0x7c8>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b43      	ldr	r3, [pc, #268]	@ (8003a38 <parseCommand+0x7c4>)
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	4b42      	ldr	r3, [pc, #264]	@ (8003a38 <parseCommand+0x7c4>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b40      	ldr	r3, [pc, #256]	@ (8003a34 <parseCommand+0x7c0>)
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	4b3f      	ldr	r3, [pc, #252]	@ (8003a34 <parseCommand+0x7c0>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b3d      	ldr	r3, [pc, #244]	@ (8003a30 <parseCommand+0x7bc>)
 800393a:	601a      	str	r2, [r3, #0]
		        }
		    }
		    break;
 800393c:	e16d      	b.n	8003c1a <parseCommand+0x9a6>

		case 13:
		    if (strcmp(key, "P1_X") == 0 || strcmp(key, "P1_Y") == 0 ||
 800393e:	4a37      	ldr	r2, [pc, #220]	@ (8003a1c <parseCommand+0x7a8>)
 8003940:	2450      	movs	r4, #80	@ 0x50
 8003942:	193b      	adds	r3, r7, r4
 8003944:	0011      	movs	r1, r2
 8003946:	0018      	movs	r0, r3
 8003948:	f7fc fbde 	bl	8000108 <strcmp>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d020      	beq.n	8003992 <parseCommand+0x71e>
 8003950:	4a33      	ldr	r2, [pc, #204]	@ (8003a20 <parseCommand+0x7ac>)
 8003952:	193b      	adds	r3, r7, r4
 8003954:	0011      	movs	r1, r2
 8003956:	0018      	movs	r0, r3
 8003958:	f7fc fbd6 	bl	8000108 <strcmp>
 800395c:	1e03      	subs	r3, r0, #0
 800395e:	d018      	beq.n	8003992 <parseCommand+0x71e>
		        strcmp(key, "P2_X") == 0 || strcmp(key, "P2_Y") == 0 || strcmp(key, "Speed") == 0) {
 8003960:	4a30      	ldr	r2, [pc, #192]	@ (8003a24 <parseCommand+0x7b0>)
 8003962:	193b      	adds	r3, r7, r4
 8003964:	0011      	movs	r1, r2
 8003966:	0018      	movs	r0, r3
 8003968:	f7fc fbce 	bl	8000108 <strcmp>
 800396c:	1e03      	subs	r3, r0, #0
		    if (strcmp(key, "P1_X") == 0 || strcmp(key, "P1_Y") == 0 ||
 800396e:	d010      	beq.n	8003992 <parseCommand+0x71e>
		        strcmp(key, "P2_X") == 0 || strcmp(key, "P2_Y") == 0 || strcmp(key, "Speed") == 0) {
 8003970:	4a2d      	ldr	r2, [pc, #180]	@ (8003a28 <parseCommand+0x7b4>)
 8003972:	193b      	adds	r3, r7, r4
 8003974:	0011      	movs	r1, r2
 8003976:	0018      	movs	r0, r3
 8003978:	f7fc fbc6 	bl	8000108 <strcmp>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	d008      	beq.n	8003992 <parseCommand+0x71e>
 8003980:	4a1f      	ldr	r2, [pc, #124]	@ (8003a00 <parseCommand+0x78c>)
 8003982:	193b      	adds	r3, r7, r4
 8003984:	0011      	movs	r1, r2
 8003986:	0018      	movs	r0, r3
 8003988:	f7fc fbbe 	bl	8000108 <strcmp>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d000      	beq.n	8003992 <parseCommand+0x71e>
 8003990:	e145      	b.n	8003c1e <parseCommand+0x9aa>
		        static int px1 = -1, py1 = -1, px2 = -1, py2 = -1, speed = -1;

		        if (strcmp(key, "P1_X") == 0) px1 = atoi(value);
 8003992:	4a22      	ldr	r2, [pc, #136]	@ (8003a1c <parseCommand+0x7a8>)
 8003994:	2350      	movs	r3, #80	@ 0x50
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	0011      	movs	r1, r2
 800399a:	0018      	movs	r0, r3
 800399c:	f7fc fbb4 	bl	8000108 <strcmp>
 80039a0:	1e03      	subs	r3, r0, #0
 80039a2:	d108      	bne.n	80039b6 <parseCommand+0x742>
 80039a4:	233c      	movs	r3, #60	@ 0x3c
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	0018      	movs	r0, r3
 80039aa:	f006 fba6 	bl	800a0fa <atoi>
 80039ae:	0002      	movs	r2, r0
 80039b0:	4b26      	ldr	r3, [pc, #152]	@ (8003a4c <parseCommand+0x7d8>)
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e073      	b.n	8003a9e <parseCommand+0x82a>
		        else if (strcmp(key, "P1_Y") == 0) py1 = atoi(value);
 80039b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a20 <parseCommand+0x7ac>)
 80039b8:	2350      	movs	r3, #80	@ 0x50
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	0011      	movs	r1, r2
 80039be:	0018      	movs	r0, r3
 80039c0:	f7fc fba2 	bl	8000108 <strcmp>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d108      	bne.n	80039da <parseCommand+0x766>
 80039c8:	233c      	movs	r3, #60	@ 0x3c
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	0018      	movs	r0, r3
 80039ce:	f006 fb94 	bl	800a0fa <atoi>
 80039d2:	0002      	movs	r2, r0
 80039d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a50 <parseCommand+0x7dc>)
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e061      	b.n	8003a9e <parseCommand+0x82a>
		        else if (strcmp(key, "P2_X") == 0) px2 = atoi(value);
 80039da:	4a12      	ldr	r2, [pc, #72]	@ (8003a24 <parseCommand+0x7b0>)
 80039dc:	2350      	movs	r3, #80	@ 0x50
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	0011      	movs	r1, r2
 80039e2:	0018      	movs	r0, r3
 80039e4:	f7fc fb90 	bl	8000108 <strcmp>
 80039e8:	1e03      	subs	r3, r0, #0
 80039ea:	d135      	bne.n	8003a58 <parseCommand+0x7e4>
 80039ec:	233c      	movs	r3, #60	@ 0x3c
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	0018      	movs	r0, r3
 80039f2:	f006 fb82 	bl	800a0fa <atoi>
 80039f6:	0002      	movs	r2, r0
 80039f8:	4b16      	ldr	r3, [pc, #88]	@ (8003a54 <parseCommand+0x7e0>)
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e04f      	b.n	8003a9e <parseCommand+0x82a>
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	0800d50c 	.word	0x0800d50c
 8003a04:	20000010 	.word	0x20000010
 8003a08:	20000000 	.word	0x20000000
 8003a0c:	20000004 	.word	0x20000004
 8003a10:	20000008 	.word	0x20000008
 8003a14:	2000000c 	.word	0x2000000c
 8003a18:	0800d514 	.word	0x0800d514
 8003a1c:	0800d4ec 	.word	0x0800d4ec
 8003a20:	0800d4f4 	.word	0x0800d4f4
 8003a24:	0800d4fc 	.word	0x0800d4fc
 8003a28:	0800d504 	.word	0x0800d504
 8003a2c:	0800d530 	.word	0x0800d530
 8003a30:	20000014 	.word	0x20000014
 8003a34:	20000018 	.word	0x20000018
 8003a38:	2000001c 	.word	0x2000001c
 8003a3c:	20000020 	.word	0x20000020
 8003a40:	20000024 	.word	0x20000024
 8003a44:	20000028 	.word	0x20000028
 8003a48:	0800d538 	.word	0x0800d538
 8003a4c:	2000002c 	.word	0x2000002c
 8003a50:	20000030 	.word	0x20000030
 8003a54:	20000034 	.word	0x20000034
		        else if (strcmp(key, "P2_Y") == 0) py2 = atoi(value);
 8003a58:	4a7b      	ldr	r2, [pc, #492]	@ (8003c48 <parseCommand+0x9d4>)
 8003a5a:	2350      	movs	r3, #80	@ 0x50
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	0011      	movs	r1, r2
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7fc fb51 	bl	8000108 <strcmp>
 8003a66:	1e03      	subs	r3, r0, #0
 8003a68:	d108      	bne.n	8003a7c <parseCommand+0x808>
 8003a6a:	233c      	movs	r3, #60	@ 0x3c
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f006 fb43 	bl	800a0fa <atoi>
 8003a74:	0002      	movs	r2, r0
 8003a76:	4b75      	ldr	r3, [pc, #468]	@ (8003c4c <parseCommand+0x9d8>)
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e010      	b.n	8003a9e <parseCommand+0x82a>
		        else if (strcmp(key, "Speed") == 0) speed = atoi(value);
 8003a7c:	4a74      	ldr	r2, [pc, #464]	@ (8003c50 <parseCommand+0x9dc>)
 8003a7e:	2350      	movs	r3, #80	@ 0x50
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	0011      	movs	r1, r2
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7fc fb3f 	bl	8000108 <strcmp>
 8003a8a:	1e03      	subs	r3, r0, #0
 8003a8c:	d107      	bne.n	8003a9e <parseCommand+0x82a>
 8003a8e:	233c      	movs	r3, #60	@ 0x3c
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	0018      	movs	r0, r3
 8003a94:	f006 fb31 	bl	800a0fa <atoi>
 8003a98:	0002      	movs	r2, r0
 8003a9a:	4b6e      	ldr	r3, [pc, #440]	@ (8003c54 <parseCommand+0x9e0>)
 8003a9c:	601a      	str	r2, [r3, #0]

		        if (px1 >= 0 && py1 >= 0 && px2 >= 0 && py2 >= 0 && speed >= 0) {
 8003a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8003c58 <parseCommand+0x9e4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	da00      	bge.n	8003aa8 <parseCommand+0x834>
 8003aa6:	e0ba      	b.n	8003c1e <parseCommand+0x9aa>
 8003aa8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c5c <parseCommand+0x9e8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	da00      	bge.n	8003ab2 <parseCommand+0x83e>
 8003ab0:	e0b5      	b.n	8003c1e <parseCommand+0x9aa>
 8003ab2:	4b6b      	ldr	r3, [pc, #428]	@ (8003c60 <parseCommand+0x9ec>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	da00      	bge.n	8003abc <parseCommand+0x848>
 8003aba:	e0b0      	b.n	8003c1e <parseCommand+0x9aa>
 8003abc:	4b63      	ldr	r3, [pc, #396]	@ (8003c4c <parseCommand+0x9d8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da00      	bge.n	8003ac6 <parseCommand+0x852>
 8003ac4:	e0ab      	b.n	8003c1e <parseCommand+0x9aa>
 8003ac6:	4b63      	ldr	r3, [pc, #396]	@ (8003c54 <parseCommand+0x9e0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	da00      	bge.n	8003ad0 <parseCommand+0x85c>
 8003ace:	e0a6      	b.n	8003c1e <parseCommand+0x9aa>
		            speaker_test(px1, py1, px2, py2, speed);
 8003ad0:	4b61      	ldr	r3, [pc, #388]	@ (8003c58 <parseCommand+0x9e4>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	4b61      	ldr	r3, [pc, #388]	@ (8003c5c <parseCommand+0x9e8>)
 8003ad6:	6819      	ldr	r1, [r3, #0]
 8003ad8:	4b61      	ldr	r3, [pc, #388]	@ (8003c60 <parseCommand+0x9ec>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b5b      	ldr	r3, [pc, #364]	@ (8003c4c <parseCommand+0x9d8>)
 8003ade:	681c      	ldr	r4, [r3, #0]
 8003ae0:	4b5c      	ldr	r3, [pc, #368]	@ (8003c54 <parseCommand+0x9e0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	0023      	movs	r3, r4
 8003ae8:	f001 f9ec 	bl	8004ec4 <speaker_test>
		            sendUARTMessage("Microphone test ok\n");
 8003aec:	4b5d      	ldr	r3, [pc, #372]	@ (8003c64 <parseCommand+0x9f0>)
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 f8c8 	bl	8003c84 <sendUARTMessage>

		            px1 = py1 = px2 = py2 = speed = -1;
 8003af4:	4b57      	ldr	r3, [pc, #348]	@ (8003c54 <parseCommand+0x9e0>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	4252      	negs	r2, r2
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	4b55      	ldr	r3, [pc, #340]	@ (8003c54 <parseCommand+0x9e0>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b52      	ldr	r3, [pc, #328]	@ (8003c4c <parseCommand+0x9d8>)
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	4b51      	ldr	r3, [pc, #324]	@ (8003c4c <parseCommand+0x9d8>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b55      	ldr	r3, [pc, #340]	@ (8003c60 <parseCommand+0x9ec>)
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	4b54      	ldr	r3, [pc, #336]	@ (8003c60 <parseCommand+0x9ec>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b52      	ldr	r3, [pc, #328]	@ (8003c5c <parseCommand+0x9e8>)
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	4b51      	ldr	r3, [pc, #324]	@ (8003c5c <parseCommand+0x9e8>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b4f      	ldr	r3, [pc, #316]	@ (8003c58 <parseCommand+0x9e4>)
 8003b1a:	601a      	str	r2, [r3, #0]
		        }
		    }
		    break;
 8003b1c:	e07f      	b.n	8003c1e <parseCommand+0x9aa>


		case 15:
		    if (strcmp(key, "TOP_Chart") == 0 || strcmp(key, "Speed") == 0) {
 8003b1e:	4a52      	ldr	r2, [pc, #328]	@ (8003c68 <parseCommand+0x9f4>)
 8003b20:	2450      	movs	r4, #80	@ 0x50
 8003b22:	193b      	adds	r3, r7, r4
 8003b24:	0011      	movs	r1, r2
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7fc faee 	bl	8000108 <strcmp>
 8003b2c:	1e03      	subs	r3, r0, #0
 8003b2e:	d008      	beq.n	8003b42 <parseCommand+0x8ce>
 8003b30:	4a47      	ldr	r2, [pc, #284]	@ (8003c50 <parseCommand+0x9dc>)
 8003b32:	193b      	adds	r3, r7, r4
 8003b34:	0011      	movs	r1, r2
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7fc fae6 	bl	8000108 <strcmp>
 8003b3c:	1e03      	subs	r3, r0, #0
 8003b3e:	d000      	beq.n	8003b42 <parseCommand+0x8ce>
 8003b40:	e06f      	b.n	8003c22 <parseCommand+0x9ae>
		        static int top_chart = -1, speed = -1;

		        if (strcmp(key, "TOP_Chart") == 0) top_chart = atoi(value);
 8003b42:	4a49      	ldr	r2, [pc, #292]	@ (8003c68 <parseCommand+0x9f4>)
 8003b44:	2350      	movs	r3, #80	@ 0x50
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	0011      	movs	r1, r2
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f7fc fadc 	bl	8000108 <strcmp>
 8003b50:	1e03      	subs	r3, r0, #0
 8003b52:	d108      	bne.n	8003b66 <parseCommand+0x8f2>
 8003b54:	233c      	movs	r3, #60	@ 0x3c
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f006 face 	bl	800a0fa <atoi>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	4b42      	ldr	r3, [pc, #264]	@ (8003c6c <parseCommand+0x9f8>)
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e010      	b.n	8003b88 <parseCommand+0x914>
		        else if (strcmp(key, "Speed") == 0) speed = atoi(value);
 8003b66:	4a3a      	ldr	r2, [pc, #232]	@ (8003c50 <parseCommand+0x9dc>)
 8003b68:	2350      	movs	r3, #80	@ 0x50
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	0011      	movs	r1, r2
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fc faca 	bl	8000108 <strcmp>
 8003b74:	1e03      	subs	r3, r0, #0
 8003b76:	d107      	bne.n	8003b88 <parseCommand+0x914>
 8003b78:	233c      	movs	r3, #60	@ 0x3c
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f006 fabc 	bl	800a0fa <atoi>
 8003b82:	0002      	movs	r2, r0
 8003b84:	4b3a      	ldr	r3, [pc, #232]	@ (8003c70 <parseCommand+0x9fc>)
 8003b86:	601a      	str	r2, [r3, #0]

		        if (top_chart >= 0 && speed >= 0) {
 8003b88:	4b38      	ldr	r3, [pc, #224]	@ (8003c6c <parseCommand+0x9f8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	db48      	blt.n	8003c22 <parseCommand+0x9ae>
 8003b90:	4b37      	ldr	r3, [pc, #220]	@ (8003c70 <parseCommand+0x9fc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	db44      	blt.n	8003c22 <parseCommand+0x9ae>
		            camera_test(top_chart, speed);
 8003b98:	4b34      	ldr	r3, [pc, #208]	@ (8003c6c <parseCommand+0x9f8>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b34      	ldr	r3, [pc, #208]	@ (8003c70 <parseCommand+0x9fc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	0010      	movs	r0, r2
 8003ba4:	f001 f9d6 	bl	8004f54 <camera_test>
		            sendUARTMessage("Camera test ok\n");
 8003ba8:	4b32      	ldr	r3, [pc, #200]	@ (8003c74 <parseCommand+0xa00>)
 8003baa:	0018      	movs	r0, r3
 8003bac:	f000 f86a 	bl	8003c84 <sendUARTMessage>

		            top_chart = speed = -1;
 8003bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c70 <parseCommand+0x9fc>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	4252      	negs	r2, r2
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c70 <parseCommand+0x9fc>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c6c <parseCommand+0x9f8>)
 8003bbe:	601a      	str	r2, [r3, #0]
		        }
		    }
		    break;
 8003bc0:	e02f      	b.n	8003c22 <parseCommand+0x9ae>


		case 6:  // System initialization (homing of all motors)
			if (strcmp(key, "XYZ_return") == 0) {
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8003c78 <parseCommand+0xa04>)
 8003bc4:	2350      	movs	r3, #80	@ 0x50
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	0011      	movs	r1, r2
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7fc fa9c 	bl	8000108 <strcmp>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	d128      	bne.n	8003c26 <parseCommand+0x9b2>
				if (atoi(value) == 1) {
 8003bd4:	233c      	movs	r3, #60	@ 0x3c
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f006 fa8e 	bl	800a0fa <atoi>
 8003bde:	0003      	movs	r3, r0
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d120      	bne.n	8003c26 <parseCommand+0x9b2>
					Return_xy();  // Call system initialization
 8003be4:	f000 f8ba 	bl	8003d5c <Return_xy>
					sendUARTMessage("Home ok\n"); // Acknowledge successful completion
 8003be8:	4b24      	ldr	r3, [pc, #144]	@ (8003c7c <parseCommand+0xa08>)
 8003bea:	0018      	movs	r0, r3
 8003bec:	f000 f84a 	bl	8003c84 <sendUARTMessage>
				}
			}
			break;
 8003bf0:	e019      	b.n	8003c26 <parseCommand+0x9b2>

		default:
			if (functionNumber != -1) {
 8003bf2:	2384      	movs	r3, #132	@ 0x84
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	d016      	beq.n	8003c2a <parseCommand+0x9b6>
				sendUARTMessage("Unsupported function or key\n");
 8003bfc:	4b20      	ldr	r3, [pc, #128]	@ (8003c80 <parseCommand+0xa0c>)
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 f840 	bl	8003c84 <sendUARTMessage>
			}
			break;
 8003c04:	e011      	b.n	8003c2a <parseCommand+0x9b6>
			break;
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	e010      	b.n	8003c2c <parseCommand+0x9b8>
			break;
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	e00e      	b.n	8003c2c <parseCommand+0x9b8>
			break;
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	e00c      	b.n	8003c2c <parseCommand+0x9b8>
			break;
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	e00a      	b.n	8003c2c <parseCommand+0x9b8>
		    break;
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	e008      	b.n	8003c2c <parseCommand+0x9b8>
		    break;
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	e006      	b.n	8003c2c <parseCommand+0x9b8>
		    break;
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	e004      	b.n	8003c2c <parseCommand+0x9b8>
		    break;
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	e002      	b.n	8003c2c <parseCommand+0x9b8>
			break;
 8003c26:	46c0      	nop			@ (mov r8, r8)
 8003c28:	e000      	b.n	8003c2c <parseCommand+0x9b8>
			break;
 8003c2a:	46c0      	nop			@ (mov r8, r8)
	while (*current != '\0') {
 8003c2c:	2380      	movs	r3, #128	@ 0x80
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <parseCommand+0x9c8>
 8003c38:	f7ff fb2b 	bl	8003292 <parseCommand+0x1e>
		}
	}
}
 8003c3c:	46c0      	nop			@ (mov r8, r8)
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b022      	add	sp, #136	@ 0x88
 8003c44:	bdb0      	pop	{r4, r5, r7, pc}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	0800d504 	.word	0x0800d504
 8003c4c:	20000038 	.word	0x20000038
 8003c50:	0800d50c 	.word	0x0800d50c
 8003c54:	2000003c 	.word	0x2000003c
 8003c58:	2000002c 	.word	0x2000002c
 8003c5c:	20000030 	.word	0x20000030
 8003c60:	20000034 	.word	0x20000034
 8003c64:	0800d554 	.word	0x0800d554
 8003c68:	0800d568 	.word	0x0800d568
 8003c6c:	20000040 	.word	0x20000040
 8003c70:	20000044 	.word	0x20000044
 8003c74:	0800d574 	.word	0x0800d574
 8003c78:	0800d584 	.word	0x0800d584
 8003c7c:	0800d590 	.word	0x0800d590
 8003c80:	0800d59c 	.word	0x0800d59c

08003c84 <sendUARTMessage>:
    data[4] = endLimit;

    sendCANCommandWithCRC(id, false, data, sizeof(data));
}

void sendUARTMessage(const char *message) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f7fc fa44 	bl	800011c <strlen>
 8003c94:	0003      	movs	r3, r0
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	2301      	movs	r3, #1
 8003c9a:	425b      	negs	r3, r3
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4803      	ldr	r0, [pc, #12]	@ (8003cac <sendUARTMessage+0x28>)
 8003ca0:	f004 ffb0 	bl	8008c04 <HAL_UART_Transmit>
}
 8003ca4:	46c0      	nop			@ (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	200003f8 	.word	0x200003f8

08003cb0 <system_initialisation>:

void system_initialisation() {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
    // Send homing command to all motors
    sendHomingCommand(0x001);  // Homing Motor 1
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f000 f883 	bl	8003dc0 <sendHomingCommand>

    // Wait for Motor 1 to home
    while (!motor1Homed) {
 8003cba:	e004      	b.n	8003cc6 <system_initialisation+0x16>
        processCANMessage();
 8003cbc:	f7ff fa30 	bl	8003120 <processCANMessage>
        HAL_Delay(100);  // Small delay to avoid spamming the CAN bus
 8003cc0:	2064      	movs	r0, #100	@ 0x64
 8003cc2:	f001 fe77 	bl	80059b4 <HAL_Delay>
    while (!motor1Homed) {
 8003cc6:	4b20      	ldr	r3, [pc, #128]	@ (8003d48 <system_initialisation+0x98>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4053      	eors	r3, r2
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f3      	bne.n	8003cbc <system_initialisation+0xc>
    }

    sendHomingCommand(0x002);  // Homing Motor 2
 8003cd4:	2002      	movs	r0, #2
 8003cd6:	f000 f873 	bl	8003dc0 <sendHomingCommand>

    // Homing other motors sequentially
    sendHomingCommand(0x003);  // Phone Rotation Motor
 8003cda:	2003      	movs	r0, #3
 8003cdc:	f000 f870 	bl	8003dc0 <sendHomingCommand>
    sendHomingCommand(0x004);  // Image Mount Motor
 8003ce0:	2004      	movs	r0, #4
 8003ce2:	f000 f86d 	bl	8003dc0 <sendHomingCommand>
    sendHomingCommand(0x005);  // Drawer Motor
 8003ce6:	2005      	movs	r0, #5
 8003ce8:	f000 f86a 	bl	8003dc0 <sendHomingCommand>

    // Set servo positions (example positions)
    setServoPosition(TIM_CHANNEL_1, 0);   // Set Servo 1 position
 8003cec:	2100      	movs	r1, #0
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f001 f9c6 	bl	8005080 <setServoPosition>
    setServoPosition(TIM_CHANNEL_2, 70);  // Set Servo 2 position
 8003cf4:	2146      	movs	r1, #70	@ 0x46
 8003cf6:	2004      	movs	r0, #4
 8003cf8:	f001 f9c2 	bl	8005080 <setServoPosition>

    // Wait for all motors to home
    while (!drawerMotorHomed || !phoneRotationMotorHomed || !imageMountMotorHomed || !motor2Homed) {
 8003cfc:	e004      	b.n	8003d08 <system_initialisation+0x58>
        processCANMessage();
 8003cfe:	f7ff fa0f 	bl	8003120 <processCANMessage>
        HAL_Delay(100);  // Small delay to avoid spamming the CAN bus
 8003d02:	2064      	movs	r0, #100	@ 0x64
 8003d04:	f001 fe56 	bl	80059b4 <HAL_Delay>
    while (!drawerMotorHomed || !phoneRotationMotorHomed || !imageMountMotorHomed || !motor2Homed) {
 8003d08:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <system_initialisation+0x9c>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4053      	eors	r3, r2
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f3      	bne.n	8003cfe <system_initialisation+0x4e>
 8003d16:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <system_initialisation+0xa0>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4053      	eors	r3, r2
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ec      	bne.n	8003cfe <system_initialisation+0x4e>
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <system_initialisation+0xa4>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	4053      	eors	r3, r2
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e5      	bne.n	8003cfe <system_initialisation+0x4e>
 8003d32:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <system_initialisation+0xa8>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2201      	movs	r2, #1
 8003d38:	4053      	eors	r3, r2
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1de      	bne.n	8003cfe <system_initialisation+0x4e>
    }

}
 8003d40:	46c0      	nop			@ (mov r8, r8)
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000284 	.word	0x20000284
 8003d4c:	20000288 	.word	0x20000288
 8003d50:	20000286 	.word	0x20000286
 8003d54:	20000287 	.word	0x20000287
 8003d58:	20000285 	.word	0x20000285

08003d5c <Return_xy>:

void Return_xy() {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
    // Send homing command to all motors
    sendHomingCommand(0x001);  // Homing Motor 1
 8003d60:	2001      	movs	r0, #1
 8003d62:	f000 f82d 	bl	8003dc0 <sendHomingCommand>

    // Wait for Motor 1 to home
    while (!motor1Homed) {
 8003d66:	e004      	b.n	8003d72 <Return_xy+0x16>
        processCANMessage();
 8003d68:	f7ff f9da 	bl	8003120 <processCANMessage>
        HAL_Delay(100);  // Small delay to avoid spamming the CAN bus
 8003d6c:	2064      	movs	r0, #100	@ 0x64
 8003d6e:	f001 fe21 	bl	80059b4 <HAL_Delay>
    while (!motor1Homed) {
 8003d72:	4b11      	ldr	r3, [pc, #68]	@ (8003db8 <Return_xy+0x5c>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2201      	movs	r2, #1
 8003d78:	4053      	eors	r3, r2
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f3      	bne.n	8003d68 <Return_xy+0xc>
    }

    sendHomingCommand(0x002);  // Homing Motor 2
 8003d80:	2002      	movs	r0, #2
 8003d82:	f000 f81d 	bl	8003dc0 <sendHomingCommand>

    // Set servo positions (example positions)
    setServoPosition(TIM_CHANNEL_1, 0);   // Set Servo 1 position
 8003d86:	2100      	movs	r1, #0
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f001 f979 	bl	8005080 <setServoPosition>
    setServoPosition(TIM_CHANNEL_2, 70);  // Set Servo 2 position
 8003d8e:	2146      	movs	r1, #70	@ 0x46
 8003d90:	2004      	movs	r0, #4
 8003d92:	f001 f975 	bl	8005080 <setServoPosition>

    // Wait for all motors to home
    while (!motor2Homed) {
 8003d96:	e004      	b.n	8003da2 <Return_xy+0x46>
        processCANMessage();
 8003d98:	f7ff f9c2 	bl	8003120 <processCANMessage>
        HAL_Delay(100);  // Small delay to avoid spamming the CAN bus
 8003d9c:	2064      	movs	r0, #100	@ 0x64
 8003d9e:	f001 fe09 	bl	80059b4 <HAL_Delay>
    while (!motor2Homed) {
 8003da2:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <Return_xy+0x60>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2201      	movs	r2, #1
 8003da8:	4053      	eors	r3, r2
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f3      	bne.n	8003d98 <Return_xy+0x3c>
    }

}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000284 	.word	0x20000284
 8003dbc:	20000285 	.word	0x20000285

08003dc0 <sendHomingCommand>:
/**
 * @brief  Send a homing command to the motor
 * @param  id: Motor ID
 * @retval None
 */
void sendHomingCommand(uint32_t id) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
    uint8_t homingCommand[1] = {0x91};  // Homing command (0x91)
 8003dc8:	210c      	movs	r1, #12
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8003dfc <sendHomingCommand+0x3c>)
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	701a      	strb	r2, [r3, #0]
    sendCANCommandWithCRC(id, false, homingCommand, sizeof(homingCommand));
 8003dd2:	187a      	adds	r2, r7, r1
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	2100      	movs	r1, #0
 8003dda:	f000 f813 	bl	8003e04 <sendCANCommandWithCRC>

    // Mark variables as unused to avoid warnings


    // Optional: Toggle an LED to indicate command sent
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8003dde:	2380      	movs	r3, #128	@ 0x80
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	4a07      	ldr	r2, [pc, #28]	@ (8003e00 <sendHomingCommand+0x40>)
 8003de4:	0019      	movs	r1, r3
 8003de6:	0010      	movs	r0, r2
 8003de8:	f003 fa4b 	bl	8007282 <HAL_GPIO_TogglePin>
    HAL_Delay(100);  // Brief delay to make the toggle visible
 8003dec:	2064      	movs	r0, #100	@ 0x64
 8003dee:	f001 fde1 	bl	80059b4 <HAL_Delay>
}
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b004      	add	sp, #16
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	0800d5bc 	.word	0x0800d5bc
 8003e00:	48000400 	.word	0x48000400

08003e04 <sendCANCommandWithCRC>:
 * @param  extended: Use extended frame
 * @param  data: Data to send
 * @param  len: Length of data
 * @retval None
 */
void sendCANCommandWithCRC(uint32_t id, bool extended, uint8_t data[], uint8_t len) {
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	46c6      	mov	lr, r8
 8003e08:	b500      	push	{lr}
 8003e0a:	b08e      	sub	sp, #56	@ 0x38
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e10:	0008      	movs	r0, r1
 8003e12:	61fa      	str	r2, [r7, #28]
 8003e14:	0019      	movs	r1, r3
 8003e16:	230b      	movs	r3, #11
 8003e18:	2618      	movs	r6, #24
 8003e1a:	199b      	adds	r3, r3, r6
 8003e1c:	19db      	adds	r3, r3, r7
 8003e1e:	1c02      	adds	r2, r0, #0
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	200a      	movs	r0, #10
 8003e24:	1983      	adds	r3, r0, r6
 8003e26:	19db      	adds	r3, r3, r7
 8003e28:	1c0a      	adds	r2, r1, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	466b      	mov	r3, sp
 8003e2e:	4698      	mov	r8, r3
  uint8_t crc = calculateCRC(id, data, len);  // Calculate CRC
 8003e30:	231b      	movs	r3, #27
 8003e32:	0032      	movs	r2, r6
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	19de      	adds	r6, r3, r7
 8003e38:	1883      	adds	r3, r0, r2
 8003e3a:	19db      	adds	r3, r3, r7
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	69f9      	ldr	r1, [r7, #28]
 8003e40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e42:	001a      	movs	r2, r3
 8003e44:	f000 f867 	bl	8003f16 <calculateCRC>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	7033      	strb	r3, [r6, #0]
  uint8_t dataWithCRC[len + 1];  // New array to hold data and CRC
 8003e4c:	200a      	movs	r0, #10
 8003e4e:	2218      	movs	r2, #24
 8003e50:	1883      	adds	r3, r0, r2
 8003e52:	19db      	adds	r3, r3, r7
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e5c:	001a      	movs	r2, r3
 8003e5e:	60ba      	str	r2, [r7, #8]
 8003e60:	2200      	movs	r2, #0
 8003e62:	60fa      	str	r2, [r7, #12]
 8003e64:	68b8      	ldr	r0, [r7, #8]
 8003e66:	68f9      	ldr	r1, [r7, #12]
 8003e68:	0002      	movs	r2, r0
 8003e6a:	0f52      	lsrs	r2, r2, #29
 8003e6c:	000e      	movs	r6, r1
 8003e6e:	00f6      	lsls	r6, r6, #3
 8003e70:	617e      	str	r6, [r7, #20]
 8003e72:	697e      	ldr	r6, [r7, #20]
 8003e74:	4316      	orrs	r6, r2
 8003e76:	617e      	str	r6, [r7, #20]
 8003e78:	0002      	movs	r2, r0
 8003e7a:	00d2      	lsls	r2, r2, #3
 8003e7c:	613a      	str	r2, [r7, #16]
 8003e7e:	001a      	movs	r2, r3
 8003e80:	603a      	str	r2, [r7, #0]
 8003e82:	2200      	movs	r2, #0
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	6838      	ldr	r0, [r7, #0]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	0f52      	lsrs	r2, r2, #29
 8003e8e:	000e      	movs	r6, r1
 8003e90:	00f5      	lsls	r5, r6, #3
 8003e92:	4315      	orrs	r5, r2
 8003e94:	0002      	movs	r2, r0
 8003e96:	00d4      	lsls	r4, r2, #3
 8003e98:	3307      	adds	r3, #7
 8003e9a:	08db      	lsrs	r3, r3, #3
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	466a      	mov	r2, sp
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	469d      	mov	sp, r3
 8003ea4:	466b      	mov	r3, sp
 8003ea6:	3300      	adds	r3, #0
 8003ea8:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Copy the original data into the new array
  for (int i = 0; i < len; i++) {
 8003eaa:	2300      	movs	r3, #0
 8003eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eae:	e00b      	b.n	8003ec8 <sendCANCommandWithCRC+0xc4>
    dataWithCRC[i] = data[i];
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	18d3      	adds	r3, r2, r3
 8003eb6:	7819      	ldrb	r1, [r3, #0]
 8003eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	1c0a      	adds	r2, r1, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < len; i++) {
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec8:	200a      	movs	r0, #10
 8003eca:	2418      	movs	r4, #24
 8003ecc:	1903      	adds	r3, r0, r4
 8003ece:	19db      	adds	r3, r3, r7
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	dbeb      	blt.n	8003eb0 <sendCANCommandWithCRC+0xac>
  }

  // Append the CRC to the new array
  dataWithCRC[len] = crc;
 8003ed8:	1903      	adds	r3, r0, r4
 8003eda:	19db      	adds	r3, r3, r7
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ee0:	211b      	movs	r1, #27
 8003ee2:	1909      	adds	r1, r1, r4
 8003ee4:	19c9      	adds	r1, r1, r7
 8003ee6:	7809      	ldrb	r1, [r1, #0]
 8003ee8:	54d1      	strb	r1, [r2, r3]

  // Send the data array with CRC
  sendCANMessage(id, extended, dataWithCRC, len + 1);
 8003eea:	0021      	movs	r1, r4
 8003eec:	1843      	adds	r3, r0, r1
 8003eee:	19db      	adds	r3, r3, r7
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	b2dc      	uxtb	r4, r3
 8003ef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ef8:	230b      	movs	r3, #11
 8003efa:	185b      	adds	r3, r3, r1
 8003efc:	19db      	adds	r3, r3, r7
 8003efe:	7819      	ldrb	r1, [r3, #0]
 8003f00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f02:	0023      	movs	r3, r4
 8003f04:	f7ff f8b6 	bl	8003074 <sendCANMessage>
 8003f08:	46c5      	mov	sp, r8
}
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b00e      	add	sp, #56	@ 0x38
 8003f10:	bc80      	pop	{r7}
 8003f12:	46b8      	mov	r8, r7
 8003f14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f16 <calculateCRC>:
 * @param  data: Data to calculate CRC on
 * @param  len: Length of data
 * @retval Calculated CRC value
 */
// Function to calculate 8-bit CRC (simple summation and masking)
uint8_t calculateCRC(uint32_t id, uint8_t data[], uint8_t len) {
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	1dfb      	adds	r3, r7, #7
 8003f22:	701a      	strb	r2, [r3, #0]
  uint8_t crc = (uint8_t)(id & 0xFF);  // Start with the lowest byte of CAN ID
 8003f24:	2317      	movs	r3, #23
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < len; i++) {
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	e00c      	b.n	8003f4c <calculateCRC+0x36>
    crc += data[i];  // Add each data byte to the CRC
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	18d3      	adds	r3, r2, r3
 8003f38:	7819      	ldrb	r1, [r3, #0]
 8003f3a:	2217      	movs	r2, #23
 8003f3c:	18bb      	adds	r3, r7, r2
 8003f3e:	18ba      	adds	r2, r7, r2
 8003f40:	7812      	ldrb	r2, [r2, #0]
 8003f42:	188a      	adds	r2, r1, r2
 8003f44:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < len; i++) {
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	1dfb      	adds	r3, r7, #7
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	dbed      	blt.n	8003f32 <calculateCRC+0x1c>
  }
  crc &= 0xFF;  // Mask to ensure only lower 8 bits are used
 8003f56:	2117      	movs	r1, #23
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	187a      	adds	r2, r7, r1
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	701a      	strb	r2, [r3, #0]
  return crc;    // Return the final CRC value
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	781b      	ldrb	r3, [r3, #0]
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b006      	add	sp, #24
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <sendAbsoluteAxisCommand>:
 * @param  speed: Speed for movement
 * @param  acceleration: Acceleration for movement
 * @param  absAxis: Absolute position for movement
 * @retval None
 */
void sendAbsoluteAxisCommand(uint32_t id, uint16_t speed, uint8_t acceleration, int32_t absAxis) {
 8003f6c:	b5b0      	push	{r4, r5, r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	0008      	movs	r0, r1
 8003f76:	0011      	movs	r1, r2
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	240a      	movs	r4, #10
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	1c02      	adds	r2, r0, #0
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	2509      	movs	r5, #9
 8003f84:	197b      	adds	r3, r7, r5
 8003f86:	1c0a      	adds	r2, r1, #0
 8003f88:	701a      	strb	r2, [r3, #0]
    uint8_t commandData[7];

    // Fill commandData with the required bytes
    commandData[0] = 0xF5;  // Position mode 4 (absolute motion)
 8003f8a:	2110      	movs	r1, #16
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	22f5      	movs	r2, #245	@ 0xf5
 8003f90:	701a      	strb	r2, [r3, #0]
    commandData[1] = (uint8_t)(speed >> 8);      // Speed high byte
 8003f92:	0020      	movs	r0, r4
 8003f94:	183b      	adds	r3, r7, r0
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	0a1b      	lsrs	r3, r3, #8
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	187b      	adds	r3, r7, r1
 8003fa0:	705a      	strb	r2, [r3, #1]
    commandData[2] = (uint8_t)(speed & 0xFF);    // Speed low byte
 8003fa2:	183b      	adds	r3, r7, r0
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	187b      	adds	r3, r7, r1
 8003faa:	709a      	strb	r2, [r3, #2]
    commandData[3] = acceleration;               // Acceleration byte
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	197a      	adds	r2, r7, r5
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	70da      	strb	r2, [r3, #3]
    commandData[4] = (uint8_t)((absAxis >> 16) & 0xFF);  // Absolute axis high byte
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	141b      	asrs	r3, r3, #16
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	711a      	strb	r2, [r3, #4]
    commandData[5] = (uint8_t)((absAxis >> 8) & 0xFF);   // Absolute axis middle byte
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	121b      	asrs	r3, r3, #8
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	187b      	adds	r3, r7, r1
 8003fc6:	715a      	strb	r2, [r3, #5]
    commandData[6] = (uint8_t)(absAxis & 0xFF);          // Absolute axis low byte
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	719a      	strb	r2, [r3, #6]

    // Send the CAN command with CRC
    sendCANCommandWithCRC(id, false, commandData, sizeof(commandData));
 8003fd0:	187a      	adds	r2, r7, r1
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	2307      	movs	r3, #7
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f7ff ff14 	bl	8003e04 <sendCANCommandWithCRC>


}
 8003fdc:	46c0      	nop			@ (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b006      	add	sp, #24
 8003fe2:	bdb0      	pop	{r4, r5, r7, pc}

08003fe4 <moveToCoordinates>:
 * @brief  Move to specific coordinates (X, Y)
 * @param  x: X coordinate
 * @param  y: Y coordinate
 * @retval None
 */
void moveToCoordinates(float x_axis, float y_axis, float speed) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08e      	sub	sp, #56	@ 0x38
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
    // Define motion parameters
    const int X_MIN = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	637b      	str	r3, [r7, #52]	@ 0x34
    const int X_MAX = 100;
 8003ff4:	2364      	movs	r3, #100	@ 0x64
 8003ff6:	633b      	str	r3, [r7, #48]	@ 0x30
    const int Y_MIN = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int Y_MAX = 250;
 8003ffc:	23fa      	movs	r3, #250	@ 0xfa
 8003ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint32_t timeout = 2000;  // 2-second timeout
 8004000:	23fa      	movs	r3, #250	@ 0xfa
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24

    // Validate x and y limits
    if (x_axis < X_MIN || x_axis > X_MAX) {
 8004006:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004008:	f7fc ffce 	bl	8000fa8 <__aeabi_i2f>
 800400c:	1c03      	adds	r3, r0, #0
 800400e:	1c19      	adds	r1, r3, #0
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7fc fa65 	bl	80004e0 <__aeabi_fcmplt>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d000      	beq.n	800401c <moveToCoordinates+0x38>
 800401a:	e09d      	b.n	8004158 <moveToCoordinates+0x174>
 800401c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800401e:	f7fc ffc3 	bl	8000fa8 <__aeabi_i2f>
 8004022:	1c03      	adds	r3, r0, #0
 8004024:	1c19      	adds	r1, r3, #0
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7fc fa6e 	bl	8000508 <__aeabi_fcmpgt>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d000      	beq.n	8004032 <moveToCoordinates+0x4e>
 8004030:	e092      	b.n	8004158 <moveToCoordinates+0x174>
        return;
    }
    if (y_axis < Y_MIN || y_axis > Y_MAX) {
 8004032:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004034:	f7fc ffb8 	bl	8000fa8 <__aeabi_i2f>
 8004038:	1c03      	adds	r3, r0, #0
 800403a:	1c19      	adds	r1, r3, #0
 800403c:	68b8      	ldr	r0, [r7, #8]
 800403e:	f7fc fa4f 	bl	80004e0 <__aeabi_fcmplt>
 8004042:	1e03      	subs	r3, r0, #0
 8004044:	d000      	beq.n	8004048 <moveToCoordinates+0x64>
 8004046:	e089      	b.n	800415c <moveToCoordinates+0x178>
 8004048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800404a:	f7fc ffad 	bl	8000fa8 <__aeabi_i2f>
 800404e:	1c03      	adds	r3, r0, #0
 8004050:	1c19      	adds	r1, r3, #0
 8004052:	68b8      	ldr	r0, [r7, #8]
 8004054:	f7fc fa58 	bl	8000508 <__aeabi_fcmpgt>
 8004058:	1e03      	subs	r3, r0, #0
 800405a:	d000      	beq.n	800405e <moveToCoordinates+0x7a>
 800405c:	e07e      	b.n	800415c <moveToCoordinates+0x178>
        return;
    }

    // Map speed to rpm and acc
    int rpm = (int)(speed * 3000 / 100);  // Map speed (0-100) to rpm (0-3000)
 800405e:	4941      	ldr	r1, [pc, #260]	@ (8004164 <moveToCoordinates+0x180>)
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7fc fe43 	bl	8000cec <__aeabi_fmul>
 8004066:	1c03      	adds	r3, r0, #0
 8004068:	493f      	ldr	r1, [pc, #252]	@ (8004168 <moveToCoordinates+0x184>)
 800406a:	1c18      	adds	r0, r3, #0
 800406c:	f7fc fc58 	bl	8000920 <__aeabi_fdiv>
 8004070:	1c03      	adds	r3, r0, #0
 8004072:	1c18      	adds	r0, r3, #0
 8004074:	f7fc ff78 	bl	8000f68 <__aeabi_f2iz>
 8004078:	0003      	movs	r3, r0
 800407a:	623b      	str	r3, [r7, #32]
    int acc = (int)(speed * 255 / 100);  // Map speed (0-100) to acc (0-255)
 800407c:	493b      	ldr	r1, [pc, #236]	@ (800416c <moveToCoordinates+0x188>)
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc fe34 	bl	8000cec <__aeabi_fmul>
 8004084:	1c03      	adds	r3, r0, #0
 8004086:	4938      	ldr	r1, [pc, #224]	@ (8004168 <moveToCoordinates+0x184>)
 8004088:	1c18      	adds	r0, r3, #0
 800408a:	f7fc fc49 	bl	8000920 <__aeabi_fdiv>
 800408e:	1c03      	adds	r3, r0, #0
 8004090:	1c18      	adds	r0, r3, #0
 8004092:	f7fc ff69 	bl	8000f68 <__aeabi_f2iz>
 8004096:	0003      	movs	r3, r0
 8004098:	61fb      	str	r3, [r7, #28]

    // Convert coordinates to pulses
    int32_t pulseXaxis = (int32_t)(x_axis * PULSES_PER_MM_MOTOR1);
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7fe fe6a 	bl	8002d74 <__aeabi_f2d>
 80040a0:	4a33      	ldr	r2, [pc, #204]	@ (8004170 <moveToCoordinates+0x18c>)
 80040a2:	4b34      	ldr	r3, [pc, #208]	@ (8004174 <moveToCoordinates+0x190>)
 80040a4:	f7fd ff74 	bl	8001f90 <__aeabi_dmul>
 80040a8:	0002      	movs	r2, r0
 80040aa:	000b      	movs	r3, r1
 80040ac:	0010      	movs	r0, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	f7fe fdd2 	bl	8002c58 <__aeabi_d2iz>
 80040b4:	0003      	movs	r3, r0
 80040b6:	61bb      	str	r3, [r7, #24]
    int32_t pulseY = (int32_t)(y_axis * PULSES_PER_MM_MOTOR2);
 80040b8:	68b8      	ldr	r0, [r7, #8]
 80040ba:	f7fe fe5b 	bl	8002d74 <__aeabi_f2d>
 80040be:	2200      	movs	r2, #0
 80040c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004178 <moveToCoordinates+0x194>)
 80040c2:	f7fd ff65 	bl	8001f90 <__aeabi_dmul>
 80040c6:	0002      	movs	r2, r0
 80040c8:	000b      	movs	r3, r1
 80040ca:	0010      	movs	r0, r2
 80040cc:	0019      	movs	r1, r3
 80040ce:	f7fe fdc3 	bl	8002c58 <__aeabi_d2iz>
 80040d2:	0003      	movs	r3, r0
 80040d4:	617b      	str	r3, [r7, #20]

    // Log the target coordinates
    // Example logging can be added here if needed for debugging

    // Send absolute position commands for both motors
    sendAbsoluteAxisCommand(0x001, rpm, acc, -pulseXaxis);  // Move Motor 1 to x
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	b299      	uxth	r1, r3
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	425b      	negs	r3, r3
 80040e2:	2001      	movs	r0, #1
 80040e4:	f7ff ff42 	bl	8003f6c <sendAbsoluteAxisCommand>
    sendAbsoluteAxisCommand(0x002, rpm, acc, -pulseY);      // Move Motor 2 to y
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	b299      	uxth	r1, r3
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	425b      	negs	r3, r3
 80040f4:	2002      	movs	r0, #2
 80040f6:	f7ff ff39 	bl	8003f6c <sendAbsoluteAxisCommand>

    // Start timeout timer
    uint32_t startTime = HAL_GetTick();
 80040fa:	f001 fc51 	bl	80059a0 <HAL_GetTick>
 80040fe:	0003      	movs	r3, r0
 8004100:	613b      	str	r3, [r7, #16]

    // Initial feedback check
    processCANMessage();
 8004102:	f7ff f80d 	bl	8003120 <processCANMessage>

    // Wait until both motors complete movement or timeout occurs
    while ((!motor1MotionComplete || !motor2MotionComplete) &&
 8004106:	e004      	b.n	8004112 <moveToCoordinates+0x12e>
           (HAL_GetTick() - startTime) < timeout) {
        HAL_Delay(10);  // Small delay to avoid spamming CAN bus
 8004108:	200a      	movs	r0, #10
 800410a:	f001 fc53 	bl	80059b4 <HAL_Delay>
        processCANMessage();
 800410e:	f7ff f807 	bl	8003120 <processCANMessage>
    while ((!motor1MotionComplete || !motor2MotionComplete) &&
 8004112:	4b1a      	ldr	r3, [pc, #104]	@ (800417c <moveToCoordinates+0x198>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2201      	movs	r2, #1
 8004118:	4053      	eors	r3, r2
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <moveToCoordinates+0x14a>
 8004120:	4b17      	ldr	r3, [pc, #92]	@ (8004180 <moveToCoordinates+0x19c>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	4053      	eors	r3, r2
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <moveToCoordinates+0x15a>
           (HAL_GetTick() - startTime) < timeout) {
 800412e:	f001 fc37 	bl	80059a0 <HAL_GetTick>
 8004132:	0002      	movs	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
    while ((!motor1MotionComplete || !motor2MotionComplete) &&
 8004138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413a:	429a      	cmp	r2, r3
 800413c:	d8e4      	bhi.n	8004108 <moveToCoordinates+0x124>
    }

    // Check if timeout occurred
    if (HAL_GetTick() - startTime >= timeout) {
 800413e:	f001 fc2f 	bl	80059a0 <HAL_GetTick>
    } else {
        // Handle successful completion
    }

    // Reset motion complete flags for next use
    motor1MotionComplete = 0;
 8004142:	4b0e      	ldr	r3, [pc, #56]	@ (800417c <moveToCoordinates+0x198>)
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
    motor2MotionComplete = 0;
 8004148:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <moveToCoordinates+0x19c>)
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
    x_axis = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
    y_axis = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	e002      	b.n	800415e <moveToCoordinates+0x17a>
        return;
 8004158:	46c0      	nop			@ (mov r8, r8)
 800415a:	e000      	b.n	800415e <moveToCoordinates+0x17a>
        return;
 800415c:	46c0      	nop			@ (mov r8, r8)
}
 800415e:	46bd      	mov	sp, r7
 8004160:	b00e      	add	sp, #56	@ 0x38
 8004162:	bd80      	pop	{r7, pc}
 8004164:	453b8000 	.word	0x453b8000
 8004168:	42c80000 	.word	0x42c80000
 800416c:	437f0000 	.word	0x437f0000
 8004170:	51eb851f 	.word	0x51eb851f
 8004174:	4070aab8 	.word	0x4070aab8
 8004178:	40a90000 	.word	0x40a90000
 800417c:	20000289 	.word	0x20000289
 8004180:	2000028a 	.word	0x2000028a

08004184 <controlMotor5>:
/**
 * @brief  Control Motor 5 based on command string
 * @param  command: Command for controlling motor
 * @retval None
 */
void controlMotor5(char *command) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
    int rpm = 2000;
 800418c:	23fa      	movs	r3, #250	@ 0xfa
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	61fb      	str	r3, [r7, #28]
    int acc = 200;
 8004192:	23c8      	movs	r3, #200	@ 0xc8
 8004194:	61bb      	str	r3, [r7, #24]
    int32_t pulsePosition;

    // Determine the action based on the command
    if (strcmp(command, "open") == 0) {
 8004196:	4a29      	ldr	r2, [pc, #164]	@ (800423c <controlMotor5+0xb8>)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	0011      	movs	r1, r2
 800419c:	0018      	movs	r0, r3
 800419e:	f7fb ffb3 	bl	8000108 <strcmp>
 80041a2:	1e03      	subs	r3, r0, #0
 80041a4:	d10b      	bne.n	80041be <controlMotor5+0x3a>
        pulsePosition = 215 * PULSES_PER_MM_MOTOR2;  // Target position for "START" (e.g., 215mm)
 80041a6:	4b26      	ldr	r3, [pc, #152]	@ (8004240 <controlMotor5+0xbc>)
 80041a8:	617b      	str	r3, [r7, #20]
        sendAbsoluteAxisCommand(0x005, rpm, acc, -pulsePosition);  // Command Motor 5 to move
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	b299      	uxth	r1, r3
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	425b      	negs	r3, r3
 80041b6:	2005      	movs	r0, #5
 80041b8:	f7ff fed8 	bl	8003f6c <sendAbsoluteAxisCommand>
 80041bc:	e012      	b.n	80041e4 <controlMotor5+0x60>
    }
    else if (strcmp(command, "close") == 0) {
 80041be:	4a21      	ldr	r2, [pc, #132]	@ (8004244 <controlMotor5+0xc0>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0011      	movs	r1, r2
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7fb ff9f 	bl	8000108 <strcmp>
 80041ca:	1e03      	subs	r3, r0, #0
 80041cc:	d131      	bne.n	8004232 <controlMotor5+0xae>
        pulsePosition = 0;  // Position to hold when stopped (could also be set to current position)
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
        sendAbsoluteAxisCommand(0x005, rpm, acc, -pulsePosition);  // Command Motor 5 to stop at position
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	b299      	uxth	r1, r3
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	425b      	negs	r3, r3
 80041de:	2005      	movs	r0, #5
 80041e0:	f7ff fec4 	bl	8003f6c <sendAbsoluteAxisCommand>
    }
    else {
        return;
    }

    drawerMotorComplete = false;  // Reset completion flag before the move
 80041e4:	4b18      	ldr	r3, [pc, #96]	@ (8004248 <controlMotor5+0xc4>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
    uint32_t startTime = HAL_GetTick();  // Start timeout timer
 80041ea:	f001 fbd9 	bl	80059a0 <HAL_GetTick>
 80041ee:	0003      	movs	r3, r0
 80041f0:	613b      	str	r3, [r7, #16]
    uint32_t timeout = 5000;  // Timeout of 2 seconds
 80041f2:	4b16      	ldr	r3, [pc, #88]	@ (800424c <controlMotor5+0xc8>)
 80041f4:	60fb      	str	r3, [r7, #12]

    HAL_Delay(100);  // Delay to ensure motor motion has time to initiate
 80041f6:	2064      	movs	r0, #100	@ 0x64
 80041f8:	f001 fbdc 	bl	80059b4 <HAL_Delay>

    // Monitor motor motion until completion or timeout
    while (!drawerMotorComplete && (HAL_GetTick() - startTime) < timeout) {
 80041fc:	e004      	b.n	8004208 <controlMotor5+0x84>
        HAL_Delay(10);  // Small delay to avoid spamming CAN bus
 80041fe:	200a      	movs	r0, #10
 8004200:	f001 fbd8 	bl	80059b4 <HAL_Delay>
        processCANMessage();  // Continuously check motion status
 8004204:	f7fe ff8c 	bl	8003120 <processCANMessage>
    while (!drawerMotorComplete && (HAL_GetTick() - startTime) < timeout) {
 8004208:	4b0f      	ldr	r3, [pc, #60]	@ (8004248 <controlMotor5+0xc4>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2201      	movs	r2, #1
 800420e:	4053      	eors	r3, r2
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <controlMotor5+0xa2>
 8004216:	f001 fbc3 	bl	80059a0 <HAL_GetTick>
 800421a:	0002      	movs	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	429a      	cmp	r2, r3
 8004224:	d8eb      	bhi.n	80041fe <controlMotor5+0x7a>

        // Optional: Debug print to check feedback reception
        // printf("Checking motor 5 motion status...\n");
    }

    if ((HAL_GetTick() - startTime) >= timeout) {
 8004226:	f001 fbbb 	bl	80059a0 <HAL_GetTick>
    } else {
        // Motion complete
        // printf("Motor 5 motion complete.\n");
    }

    drawerMotorComplete = false;  // Reset completion flag
 800422a:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <controlMotor5+0xc4>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e000      	b.n	8004234 <controlMotor5+0xb0>
        return;
 8004232:	46c0      	nop			@ (mov r8, r8)
}
 8004234:	46bd      	mov	sp, r7
 8004236:	b008      	add	sp, #32
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	0800d5c0 	.word	0x0800d5c0
 8004240:	000a7f80 	.word	0x000a7f80
 8004244:	0800d5c8 	.word	0x0800d5c8
 8004248:	2000028d 	.word	0x2000028d
 800424c:	00001388 	.word	0x00001388

08004250 <rotatePhone>:

void rotatePhone(float degree) {
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b089      	sub	sp, #36	@ 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
    // Constants
    const int32_t PULSES_PER_ROTATION = 16400;  // Pulses for a full 360-degree rotation
 8004258:	4b22      	ldr	r3, [pc, #136]	@ (80042e4 <rotatePhone+0x94>)
 800425a:	61fb      	str	r3, [r7, #28]
    const int RPM = 500;                       // Rotation speed
 800425c:	23fa      	movs	r3, #250	@ 0xfa
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	61bb      	str	r3, [r7, #24]
    const int ACC = 100;                        // Acceleration
 8004262:	2364      	movs	r3, #100	@ 0x64
 8004264:	617b      	str	r3, [r7, #20]

    // Calculate the number of pulses required for the given degree
    int32_t pulses = (int32_t)((degree / 360.0f) * PULSES_PER_ROTATION);
 8004266:	4920      	ldr	r1, [pc, #128]	@ (80042e8 <rotatePhone+0x98>)
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7fc fb59 	bl	8000920 <__aeabi_fdiv>
 800426e:	1c03      	adds	r3, r0, #0
 8004270:	1c1c      	adds	r4, r3, #0
 8004272:	69f8      	ldr	r0, [r7, #28]
 8004274:	f7fc fe98 	bl	8000fa8 <__aeabi_i2f>
 8004278:	1c03      	adds	r3, r0, #0
 800427a:	1c19      	adds	r1, r3, #0
 800427c:	1c20      	adds	r0, r4, #0
 800427e:	f7fc fd35 	bl	8000cec <__aeabi_fmul>
 8004282:	1c03      	adds	r3, r0, #0
 8004284:	1c18      	adds	r0, r3, #0
 8004286:	f7fc fe6f 	bl	8000f68 <__aeabi_f2iz>
 800428a:	0003      	movs	r3, r0
 800428c:	613b      	str	r3, [r7, #16]

    // Send the command to rotate the phone
    sendAbsoluteAxisCommand(0x003, RPM, ACC, pulses);
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	b299      	uxth	r1, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2003      	movs	r0, #3
 800429a:	f7ff fe67 	bl	8003f6c <sendAbsoluteAxisCommand>

    phoneRotationMotorComplete = false;  // Reset completion flag before the move
 800429e:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <rotatePhone+0x9c>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
    uint32_t startTime = HAL_GetTick();  // Start timeout timer
 80042a4:	f001 fb7c 	bl	80059a0 <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	60fb      	str	r3, [r7, #12]
    uint32_t timeout = 3000;  // Timeout of 2 seconds
 80042ac:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <rotatePhone+0xa0>)
 80042ae:	60bb      	str	r3, [r7, #8]

    while (!phoneRotationMotorComplete && (HAL_GetTick() - startTime) < timeout) {
 80042b0:	e004      	b.n	80042bc <rotatePhone+0x6c>
            HAL_Delay(10);  // Small delay to avoid spamming CAN bus
 80042b2:	200a      	movs	r0, #10
 80042b4:	f001 fb7e 	bl	80059b4 <HAL_Delay>
            processCANMessage();  // Continuously check motion status
 80042b8:	f7fe ff32 	bl	8003120 <processCANMessage>
    while (!phoneRotationMotorComplete && (HAL_GetTick() - startTime) < timeout) {
 80042bc:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <rotatePhone+0x9c>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	4053      	eors	r3, r2
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <rotatePhone+0x8a>
 80042ca:	f001 fb69 	bl	80059a0 <HAL_GetTick>
 80042ce:	0002      	movs	r2, r0
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d8eb      	bhi.n	80042b2 <rotatePhone+0x62>

            // Optional: Debug print to check feedback reception
            // printf("Checking motor 5 motion status...\n");
        }
}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b009      	add	sp, #36	@ 0x24
 80042e0:	bd90      	pop	{r4, r7, pc}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	00004010 	.word	0x00004010
 80042e8:	43b40000 	.word	0x43b40000
 80042ec:	2000028b 	.word	0x2000028b
 80042f0:	00000bb8 	.word	0x00000bb8

080042f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b0a0      	sub	sp, #128	@ 0x80
 80042f8:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80042fa:	f001 faf7 	bl	80058ec <HAL_Init>
  SystemClock_Config();
 80042fe:	f000 f821 	bl	8004344 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004302:	f000 f86b 	bl	80043dc <MX_GPIO_Init>
  MX_DMA_Init();
 8004306:	f000 f907 	bl	8004518 <MX_DMA_Init>
  MX_TIM3_Init();
 800430a:	f000 ffcb 	bl	80052a4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800430e:	f000 ff51 	bl	80051b4 <MX_TIM2_Init>
  MX_TIM16_Init();
 8004312:	f001 f845 	bl	80053a0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8004316:	f001 f8cb 	bl	80054b0 <MX_TIM17_Init>
  MX_USART3_UART_Init();
 800431a:	f001 fa8d 	bl	8005838 <MX_USART3_UART_Init>
  MX_CAN_Init();
 800431e:	f7fe fe13 	bl	8002f48 <MX_CAN_Init>
  Start_PWM_All_Channels();
 8004322:	f000 ff0d 	bl	8005140 <Start_PWM_All_Channels>


  uint8_t rxBuffer[25]; // Larger buffer
  uint8_t txBuffer[100]; // For echoed response
  // Start UART reception in interrupt mode
  HAL_UART_Receive_IT(&huart3, tempBuffer, 1);
 8004326:	4905      	ldr	r1, [pc, #20]	@ (800433c <main+0x48>)
 8004328:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <main+0x4c>)
 800432a:	2201      	movs	r2, #1
 800432c:	0018      	movs	r0, r3
 800432e:	f004 fd08 	bl	8008d42 <HAL_UART_Receive_IT>
  /* Infinite loop */
  while (1)
  {

	  processData(&huart3);
 8004332:	4b03      	ldr	r3, [pc, #12]	@ (8004340 <main+0x4c>)
 8004334:	0018      	movs	r0, r3
 8004336:	f001 f9c9 	bl	80056cc <processData>
 800433a:	e7fa      	b.n	8004332 <main+0x3e>
 800433c:	20000580 	.word	0x20000580
 8004340:	200003f8 	.word	0x200003f8

08004344 <SystemClock_Config>:
    }

}
/* System Clock Configuration */
void SystemClock_Config(void)
{
 8004344:	b590      	push	{r4, r7, lr}
 8004346:	b093      	sub	sp, #76	@ 0x4c
 8004348:	af00      	add	r7, sp, #0
  __HAL_RCC_CAN1_CLK_ENABLE();  // Enable CAN clock
 800434a:	4b23      	ldr	r3, [pc, #140]	@ (80043d8 <SystemClock_Config+0x94>)
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	4b22      	ldr	r3, [pc, #136]	@ (80043d8 <SystemClock_Config+0x94>)
 8004350:	2180      	movs	r1, #128	@ 0x80
 8004352:	0489      	lsls	r1, r1, #18
 8004354:	430a      	orrs	r2, r1
 8004356:	61da      	str	r2, [r3, #28]
 8004358:	4b1f      	ldr	r3, [pc, #124]	@ (80043d8 <SystemClock_Config+0x94>)
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	2380      	movs	r3, #128	@ 0x80
 800435e:	049b      	lsls	r3, r3, #18
 8004360:	4013      	ands	r3, r2
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004366:	2414      	movs	r4, #20
 8004368:	193b      	adds	r3, r7, r4
 800436a:	0018      	movs	r0, r3
 800436c:	2334      	movs	r3, #52	@ 0x34
 800436e:	001a      	movs	r2, r3
 8004370:	2100      	movs	r1, #0
 8004372:	f006 febb 	bl	800b0ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004376:	1d3b      	adds	r3, r7, #4
 8004378:	0018      	movs	r0, r3
 800437a:	2310      	movs	r3, #16
 800437c:	001a      	movs	r2, r3
 800437e:	2100      	movs	r1, #0
 8004380:	f006 feb4 	bl	800b0ec <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8004384:	193b      	adds	r3, r7, r4
 8004386:	2220      	movs	r2, #32
 8004388:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800438a:	193b      	adds	r3, r7, r4
 800438c:	2201      	movs	r2, #1
 800438e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004390:	193b      	adds	r3, r7, r4
 8004392:	2200      	movs	r2, #0
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004396:	193b      	adds	r3, r7, r4
 8004398:	0018      	movs	r0, r3
 800439a:	f002 ff8d 	bl	80072b8 <HAL_RCC_OscConfig>
 800439e:	1e03      	subs	r3, r0, #0
 80043a0:	d001      	beq.n	80043a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80043a2:	f000 f8df 	bl	8004564 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043a6:	1d3b      	adds	r3, r7, #4
 80043a8:	2207      	movs	r2, #7
 80043aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80043ac:	1d3b      	adds	r3, r7, #4
 80043ae:	2203      	movs	r2, #3
 80043b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	2200      	movs	r2, #0
 80043b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80043b8:	1d3b      	adds	r3, r7, #4
 80043ba:	2200      	movs	r2, #0
 80043bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	2101      	movs	r1, #1
 80043c2:	0018      	movs	r0, r3
 80043c4:	f003 fafe 	bl	80079c4 <HAL_RCC_ClockConfig>
 80043c8:	1e03      	subs	r3, r0, #0
 80043ca:	d001      	beq.n	80043d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80043cc:	f000 f8ca 	bl	8004564 <Error_Handler>
  }
}
 80043d0:	46c0      	nop			@ (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b013      	add	sp, #76	@ 0x4c
 80043d6:	bd90      	pop	{r4, r7, pc}
 80043d8:	40021000 	.word	0x40021000

080043dc <MX_GPIO_Init>:



/* GPIO Initialization */
static void MX_GPIO_Init(void)
{
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b08d      	sub	sp, #52	@ 0x34
 80043e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e2:	241c      	movs	r4, #28
 80043e4:	193b      	adds	r3, r7, r4
 80043e6:	0018      	movs	r0, r3
 80043e8:	2314      	movs	r3, #20
 80043ea:	001a      	movs	r2, r3
 80043ec:	2100      	movs	r1, #0
 80043ee:	f006 fe7d 	bl	800b0ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043f2:	4b46      	ldr	r3, [pc, #280]	@ (800450c <MX_GPIO_Init+0x130>)
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	4b45      	ldr	r3, [pc, #276]	@ (800450c <MX_GPIO_Init+0x130>)
 80043f8:	2180      	movs	r1, #128	@ 0x80
 80043fa:	0309      	lsls	r1, r1, #12
 80043fc:	430a      	orrs	r2, r1
 80043fe:	615a      	str	r2, [r3, #20]
 8004400:	4b42      	ldr	r3, [pc, #264]	@ (800450c <MX_GPIO_Init+0x130>)
 8004402:	695a      	ldr	r2, [r3, #20]
 8004404:	2380      	movs	r3, #128	@ 0x80
 8004406:	031b      	lsls	r3, r3, #12
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800440e:	4b3f      	ldr	r3, [pc, #252]	@ (800450c <MX_GPIO_Init+0x130>)
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	4b3e      	ldr	r3, [pc, #248]	@ (800450c <MX_GPIO_Init+0x130>)
 8004414:	2180      	movs	r1, #128	@ 0x80
 8004416:	0289      	lsls	r1, r1, #10
 8004418:	430a      	orrs	r2, r1
 800441a:	615a      	str	r2, [r3, #20]
 800441c:	4b3b      	ldr	r3, [pc, #236]	@ (800450c <MX_GPIO_Init+0x130>)
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	2380      	movs	r3, #128	@ 0x80
 8004422:	029b      	lsls	r3, r3, #10
 8004424:	4013      	ands	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800442a:	4b38      	ldr	r3, [pc, #224]	@ (800450c <MX_GPIO_Init+0x130>)
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	4b37      	ldr	r3, [pc, #220]	@ (800450c <MX_GPIO_Init+0x130>)
 8004430:	2180      	movs	r1, #128	@ 0x80
 8004432:	02c9      	lsls	r1, r1, #11
 8004434:	430a      	orrs	r2, r1
 8004436:	615a      	str	r2, [r3, #20]
 8004438:	4b34      	ldr	r3, [pc, #208]	@ (800450c <MX_GPIO_Init+0x130>)
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	2380      	movs	r3, #128	@ 0x80
 800443e:	02db      	lsls	r3, r3, #11
 8004440:	4013      	ands	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004446:	4b31      	ldr	r3, [pc, #196]	@ (800450c <MX_GPIO_Init+0x130>)
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	4b30      	ldr	r3, [pc, #192]	@ (800450c <MX_GPIO_Init+0x130>)
 800444c:	2180      	movs	r1, #128	@ 0x80
 800444e:	0349      	lsls	r1, r1, #13
 8004450:	430a      	orrs	r2, r1
 8004452:	615a      	str	r2, [r3, #20]
 8004454:	4b2d      	ldr	r3, [pc, #180]	@ (800450c <MX_GPIO_Init+0x130>)
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	2380      	movs	r3, #128	@ 0x80
 800445a:	035b      	lsls	r3, r3, #13
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004462:	4b2a      	ldr	r3, [pc, #168]	@ (800450c <MX_GPIO_Init+0x130>)
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	4b29      	ldr	r3, [pc, #164]	@ (800450c <MX_GPIO_Init+0x130>)
 8004468:	2180      	movs	r1, #128	@ 0x80
 800446a:	03c9      	lsls	r1, r1, #15
 800446c:	430a      	orrs	r2, r1
 800446e:	615a      	str	r2, [r3, #20]
 8004470:	4b26      	ldr	r3, [pc, #152]	@ (800450c <MX_GPIO_Init+0x130>)
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	03db      	lsls	r3, r3, #15
 8004478:	4013      	ands	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800447e:	4b23      	ldr	r3, [pc, #140]	@ (800450c <MX_GPIO_Init+0x130>)
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	4b22      	ldr	r3, [pc, #136]	@ (800450c <MX_GPIO_Init+0x130>)
 8004484:	2180      	movs	r1, #128	@ 0x80
 8004486:	02c9      	lsls	r1, r1, #11
 8004488:	430a      	orrs	r2, r1
 800448a:	615a      	str	r2, [r3, #20]
 800448c:	4b1f      	ldr	r3, [pc, #124]	@ (800450c <MX_GPIO_Init+0x130>)
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	2380      	movs	r3, #128	@ 0x80
 8004492:	02db      	lsls	r3, r3, #11
 8004494:	4013      	ands	r3, r2
 8004496:	607b      	str	r3, [r7, #4]
 8004498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800449a:	2380      	movs	r3, #128	@ 0x80
 800449c:	019b      	lsls	r3, r3, #6
 800449e:	481c      	ldr	r0, [pc, #112]	@ (8004510 <MX_GPIO_Init+0x134>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	0019      	movs	r1, r3
 80044a4:	f002 fed0 	bl	8007248 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80044a8:	2380      	movs	r3, #128	@ 0x80
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	4819      	ldr	r0, [pc, #100]	@ (8004514 <MX_GPIO_Init+0x138>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	0019      	movs	r1, r3
 80044b2:	f002 fec9 	bl	8007248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044b6:	193b      	adds	r3, r7, r4
 80044b8:	2280      	movs	r2, #128	@ 0x80
 80044ba:	0192      	lsls	r2, r2, #6
 80044bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044be:	193b      	adds	r3, r7, r4
 80044c0:	2201      	movs	r2, #1
 80044c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	193b      	adds	r3, r7, r4
 80044c6:	2200      	movs	r2, #0
 80044c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ca:	193b      	adds	r3, r7, r4
 80044cc:	2200      	movs	r2, #0
 80044ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044d0:	193b      	adds	r3, r7, r4
 80044d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004510 <MX_GPIO_Init+0x134>)
 80044d4:	0019      	movs	r1, r3
 80044d6:	0010      	movs	r0, r2
 80044d8:	f002 fc66 	bl	8006da8 <HAL_GPIO_Init>

  /* Configure GPIO pin for PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80044dc:	0021      	movs	r1, r4
 80044de:	187b      	adds	r3, r7, r1
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	0112      	lsls	r2, r2, #4
 80044e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Push-pull output
 80044e6:	187b      	adds	r3, r7, r1
 80044e8:	2201      	movs	r2, #1
 80044ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;          // No pull-up or pull-down
 80044ec:	187b      	adds	r3, r7, r1
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low speed for blinking
 80044f2:	187b      	adds	r3, r7, r1
 80044f4:	2200      	movs	r2, #0
 80044f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);     // Initialize the pin
 80044f8:	187b      	adds	r3, r7, r1
 80044fa:	4a06      	ldr	r2, [pc, #24]	@ (8004514 <MX_GPIO_Init+0x138>)
 80044fc:	0019      	movs	r1, r3
 80044fe:	0010      	movs	r0, r2
 8004500:	f002 fc52 	bl	8006da8 <HAL_GPIO_Init>
}
 8004504:	46c0      	nop			@ (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	b00d      	add	sp, #52	@ 0x34
 800450a:	bd90      	pop	{r4, r7, pc}
 800450c:	40021000 	.word	0x40021000
 8004510:	48000800 	.word	0x48000800
 8004514:	48000400 	.word	0x48000400

08004518 <MX_DMA_Init>:
// GPIO Initialization (MX_GPIO_Init)


/* DMA Initialization */
static void MX_DMA_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800451e:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <MX_DMA_Init+0x48>)
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <MX_DMA_Init+0x48>)
 8004524:	2101      	movs	r1, #1
 8004526:	430a      	orrs	r2, r1
 8004528:	615a      	str	r2, [r3, #20]
 800452a:	4b0d      	ldr	r3, [pc, #52]	@ (8004560 <MX_DMA_Init+0x48>)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2201      	movs	r2, #1
 8004530:	4013      	ands	r3, r2
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */


  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);  // Example, replace with actual channel if different
 8004536:	2200      	movs	r2, #0
 8004538:	2100      	movs	r1, #0
 800453a:	2009      	movs	r0, #9
 800453c:	f002 fa6e 	bl	8006a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004540:	2009      	movs	r0, #9
 8004542:	f002 fa80 	bl	8006a46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);  // Example, replace with actual channel if different
 8004546:	2200      	movs	r2, #0
 8004548:	2100      	movs	r1, #0
 800454a:	200a      	movs	r0, #10
 800454c:	f002 fa66 	bl	8006a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004550:	200a      	movs	r0, #10
 8004552:	f002 fa78 	bl	8006a46 <HAL_NVIC_EnableIRQ>
}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b002      	add	sp, #8
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	40021000 	.word	0x40021000

08004564 <Error_Handler>:

void Error_Handler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004568:	b672      	cpsid	i
}
 800456a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 800456c:	46c0      	nop			@ (mov r8, r8)
 800456e:	e7fd      	b.n	800456c <Error_Handler+0x8>

08004570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004576:	4b0f      	ldr	r3, [pc, #60]	@ (80045b4 <HAL_MspInit+0x44>)
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <HAL_MspInit+0x44>)
 800457c:	2101      	movs	r1, #1
 800457e:	430a      	orrs	r2, r1
 8004580:	619a      	str	r2, [r3, #24]
 8004582:	4b0c      	ldr	r3, [pc, #48]	@ (80045b4 <HAL_MspInit+0x44>)
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2201      	movs	r2, #1
 8004588:	4013      	ands	r3, r2
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <HAL_MspInit+0x44>)
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <HAL_MspInit+0x44>)
 8004594:	2180      	movs	r1, #128	@ 0x80
 8004596:	0549      	lsls	r1, r1, #21
 8004598:	430a      	orrs	r2, r1
 800459a:	61da      	str	r2, [r3, #28]
 800459c:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <HAL_MspInit+0x44>)
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	055b      	lsls	r3, r3, #21
 80045a4:	4013      	ands	r3, r2
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b002      	add	sp, #8
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			@ (mov r8, r8)
 80045b4:	40021000 	.word	0x40021000

080045b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b08b      	sub	sp, #44	@ 0x2c
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c0:	2414      	movs	r4, #20
 80045c2:	193b      	adds	r3, r7, r4
 80045c4:	0018      	movs	r0, r3
 80045c6:	2314      	movs	r3, #20
 80045c8:	001a      	movs	r2, r3
 80045ca:	2100      	movs	r1, #0
 80045cc:	f006 fd8e 	bl	800b0ec <memset>
  if(hcan->Instance==CAN)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a20      	ldr	r2, [pc, #128]	@ (8004658 <HAL_CAN_MspInit+0xa0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d13a      	bne.n	8004650 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80045da:	4b20      	ldr	r3, [pc, #128]	@ (800465c <HAL_CAN_MspInit+0xa4>)
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	4b1f      	ldr	r3, [pc, #124]	@ (800465c <HAL_CAN_MspInit+0xa4>)
 80045e0:	2180      	movs	r1, #128	@ 0x80
 80045e2:	0489      	lsls	r1, r1, #18
 80045e4:	430a      	orrs	r2, r1
 80045e6:	61da      	str	r2, [r3, #28]
 80045e8:	4b1c      	ldr	r3, [pc, #112]	@ (800465c <HAL_CAN_MspInit+0xa4>)
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	2380      	movs	r3, #128	@ 0x80
 80045ee:	049b      	lsls	r3, r3, #18
 80045f0:	4013      	ands	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f6:	4b19      	ldr	r3, [pc, #100]	@ (800465c <HAL_CAN_MspInit+0xa4>)
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	4b18      	ldr	r3, [pc, #96]	@ (800465c <HAL_CAN_MspInit+0xa4>)
 80045fc:	2180      	movs	r1, #128	@ 0x80
 80045fe:	02c9      	lsls	r1, r1, #11
 8004600:	430a      	orrs	r2, r1
 8004602:	615a      	str	r2, [r3, #20]
 8004604:	4b15      	ldr	r3, [pc, #84]	@ (800465c <HAL_CAN_MspInit+0xa4>)
 8004606:	695a      	ldr	r2, [r3, #20]
 8004608:	2380      	movs	r3, #128	@ 0x80
 800460a:	02db      	lsls	r3, r3, #11
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004612:	193b      	adds	r3, r7, r4
 8004614:	22c0      	movs	r2, #192	@ 0xc0
 8004616:	0092      	lsls	r2, r2, #2
 8004618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461a:	0021      	movs	r1, r4
 800461c:	187b      	adds	r3, r7, r1
 800461e:	2202      	movs	r2, #2
 8004620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004622:	187b      	adds	r3, r7, r1
 8004624:	2200      	movs	r2, #0
 8004626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004628:	187b      	adds	r3, r7, r1
 800462a:	2203      	movs	r2, #3
 800462c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800462e:	187b      	adds	r3, r7, r1
 8004630:	2204      	movs	r2, #4
 8004632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004634:	187b      	adds	r3, r7, r1
 8004636:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <HAL_CAN_MspInit+0xa8>)
 8004638:	0019      	movs	r1, r3
 800463a:	0010      	movs	r0, r2
 800463c:	f002 fbb4 	bl	8006da8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8004640:	2200      	movs	r2, #0
 8004642:	2100      	movs	r1, #0
 8004644:	201e      	movs	r0, #30
 8004646:	f002 f9e9 	bl	8006a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800464a:	201e      	movs	r0, #30
 800464c:	f002 f9fb 	bl	8006a46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8004650:	46c0      	nop			@ (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b00b      	add	sp, #44	@ 0x2c
 8004656:	bd90      	pop	{r4, r7, pc}
 8004658:	40006400 	.word	0x40006400
 800465c:	40021000 	.word	0x40021000
 8004660:	48000400 	.word	0x48000400

08004664 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0b      	ldr	r2, [pc, #44]	@ (80046a0 <HAL_CAN_MspDeInit+0x3c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10f      	bne.n	8004696 <HAL_CAN_MspDeInit+0x32>
  {
  /* USER CODE BEGIN CAN_MspDeInit 0 */

  /* USER CODE END CAN_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <HAL_CAN_MspDeInit+0x40>)
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <HAL_CAN_MspDeInit+0x40>)
 800467c:	490a      	ldr	r1, [pc, #40]	@ (80046a8 <HAL_CAN_MspDeInit+0x44>)
 800467e:	400a      	ands	r2, r1
 8004680:	61da      	str	r2, [r3, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8004682:	23c0      	movs	r3, #192	@ 0xc0
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4a09      	ldr	r2, [pc, #36]	@ (80046ac <HAL_CAN_MspDeInit+0x48>)
 8004688:	0019      	movs	r1, r3
 800468a:	0010      	movs	r0, r2
 800468c:	f002 fd04 	bl	8007098 <HAL_GPIO_DeInit>

    /* CAN interrupt DeInit */
    HAL_NVIC_DisableIRQ(CEC_CAN_IRQn);
 8004690:	201e      	movs	r0, #30
 8004692:	f002 f9e8 	bl	8006a66 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN_MspDeInit 1 */

  /* USER CODE END CAN_MspDeInit 1 */
  }

}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			@ (mov r8, r8)
 80046a0:	40006400 	.word	0x40006400
 80046a4:	40021000 	.word	0x40021000
 80046a8:	fdffffff 	.word	0xfdffffff
 80046ac:	48000400 	.word	0x48000400

080046b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	2380      	movs	r3, #128	@ 0x80
 80046be:	05db      	lsls	r3, r3, #23
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d10c      	bne.n	80046de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046c4:	4b3b      	ldr	r3, [pc, #236]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	4b3a      	ldr	r3, [pc, #232]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 80046ca:	2101      	movs	r1, #1
 80046cc:	430a      	orrs	r2, r1
 80046ce:	61da      	str	r2, [r3, #28]
 80046d0:	4b38      	ldr	r3, [pc, #224]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	2201      	movs	r2, #1
 80046d6:	4013      	ands	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80046dc:	e066      	b.n	80047ac <HAL_TIM_Base_MspInit+0xfc>
  else if(htim_base->Instance==TIM3)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a35      	ldr	r2, [pc, #212]	@ (80047b8 <HAL_TIM_Base_MspInit+0x108>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d13a      	bne.n	800475e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046e8:	4b32      	ldr	r3, [pc, #200]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	4b31      	ldr	r3, [pc, #196]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 80046ee:	2102      	movs	r1, #2
 80046f0:	430a      	orrs	r2, r1
 80046f2:	61da      	str	r2, [r3, #28]
 80046f4:	4b2f      	ldr	r3, [pc, #188]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	2202      	movs	r2, #2
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8004700:	4b2e      	ldr	r3, [pc, #184]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 8004702:	4a2f      	ldr	r2, [pc, #188]	@ (80047c0 <HAL_TIM_Base_MspInit+0x110>)
 8004704:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004706:	4b2d      	ldr	r3, [pc, #180]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 8004708:	2210      	movs	r2, #16
 800470a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800470c:	4b2b      	ldr	r3, [pc, #172]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8004712:	4b2a      	ldr	r3, [pc, #168]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 8004714:	2280      	movs	r2, #128	@ 0x80
 8004716:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004718:	4b28      	ldr	r3, [pc, #160]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 800471a:	2280      	movs	r2, #128	@ 0x80
 800471c:	0052      	lsls	r2, r2, #1
 800471e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004720:	4b26      	ldr	r3, [pc, #152]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 8004722:	2280      	movs	r2, #128	@ 0x80
 8004724:	00d2      	lsls	r2, r2, #3
 8004726:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8004728:	4b24      	ldr	r3, [pc, #144]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 800472a:	2200      	movs	r2, #0
 800472c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 800472e:	4b23      	ldr	r3, [pc, #140]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 8004730:	2200      	movs	r2, #0
 8004732:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8004734:	4b21      	ldr	r3, [pc, #132]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 8004736:	0018      	movs	r0, r3
 8004738:	f002 f9b2 	bl	8006aa0 <HAL_DMA_Init>
 800473c:	1e03      	subs	r3, r0, #0
 800473e:	d001      	beq.n	8004744 <HAL_TIM_Base_MspInit+0x94>
      Error_Handler();
 8004740:	f7ff ff10 	bl	8004564 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a1d      	ldr	r2, [pc, #116]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 8004748:	631a      	str	r2, [r3, #48]	@ 0x30
 800474a:	4b1c      	ldr	r3, [pc, #112]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 8004754:	621a      	str	r2, [r3, #32]
 8004756:	4b19      	ldr	r3, [pc, #100]	@ (80047bc <HAL_TIM_Base_MspInit+0x10c>)
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800475c:	e026      	b.n	80047ac <HAL_TIM_Base_MspInit+0xfc>
  else if(htim_base->Instance==TIM16)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a18      	ldr	r2, [pc, #96]	@ (80047c4 <HAL_TIM_Base_MspInit+0x114>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10e      	bne.n	8004786 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004768:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 800476e:	2180      	movs	r1, #128	@ 0x80
 8004770:	0289      	lsls	r1, r1, #10
 8004772:	430a      	orrs	r2, r1
 8004774:	619a      	str	r2, [r3, #24]
 8004776:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	2380      	movs	r3, #128	@ 0x80
 800477c:	029b      	lsls	r3, r3, #10
 800477e:	4013      	ands	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
}
 8004784:	e012      	b.n	80047ac <HAL_TIM_Base_MspInit+0xfc>
  else if(htim_base->Instance==TIM17)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a0f      	ldr	r2, [pc, #60]	@ (80047c8 <HAL_TIM_Base_MspInit+0x118>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10d      	bne.n	80047ac <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004790:	4b08      	ldr	r3, [pc, #32]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 8004792:	699a      	ldr	r2, [r3, #24]
 8004794:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 8004796:	2180      	movs	r1, #128	@ 0x80
 8004798:	02c9      	lsls	r1, r1, #11
 800479a:	430a      	orrs	r2, r1
 800479c:	619a      	str	r2, [r3, #24]
 800479e:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <HAL_TIM_Base_MspInit+0x104>)
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	2380      	movs	r3, #128	@ 0x80
 80047a4:	02db      	lsls	r3, r3, #11
 80047a6:	4013      	ands	r3, r2
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]
}
 80047ac:	46c0      	nop			@ (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b006      	add	sp, #24
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40000400 	.word	0x40000400
 80047bc:	200003b4 	.word	0x200003b4
 80047c0:	40020030 	.word	0x40020030
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800

080047cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b08f      	sub	sp, #60	@ 0x3c
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d4:	2424      	movs	r4, #36	@ 0x24
 80047d6:	193b      	adds	r3, r7, r4
 80047d8:	0018      	movs	r0, r3
 80047da:	2314      	movs	r3, #20
 80047dc:	001a      	movs	r2, r3
 80047de:	2100      	movs	r1, #0
 80047e0:	f006 fc84 	bl	800b0ec <memset>
  if(htim->Instance==TIM2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	2380      	movs	r3, #128	@ 0x80
 80047ea:	05db      	lsls	r3, r3, #23
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d149      	bne.n	8004884 <HAL_TIM_MspPostInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f0:	4b8a      	ldr	r3, [pc, #552]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	4b89      	ldr	r3, [pc, #548]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 80047f6:	2180      	movs	r1, #128	@ 0x80
 80047f8:	0289      	lsls	r1, r1, #10
 80047fa:	430a      	orrs	r2, r1
 80047fc:	615a      	str	r2, [r3, #20]
 80047fe:	4b87      	ldr	r3, [pc, #540]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	2380      	movs	r3, #128	@ 0x80
 8004804:	029b      	lsls	r3, r3, #10
 8004806:	4013      	ands	r3, r2
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800480c:	4b83      	ldr	r3, [pc, #524]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	4b82      	ldr	r3, [pc, #520]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 8004812:	2180      	movs	r1, #128	@ 0x80
 8004814:	02c9      	lsls	r1, r1, #11
 8004816:	430a      	orrs	r2, r1
 8004818:	615a      	str	r2, [r3, #20]
 800481a:	4b80      	ldr	r3, [pc, #512]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	2380      	movs	r3, #128	@ 0x80
 8004820:	02db      	lsls	r3, r3, #11
 8004822:	4013      	ands	r3, r2
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004828:	193b      	adds	r3, r7, r4
 800482a:	2280      	movs	r2, #128	@ 0x80
 800482c:	0212      	lsls	r2, r2, #8
 800482e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004830:	193b      	adds	r3, r7, r4
 8004832:	2202      	movs	r2, #2
 8004834:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004836:	193b      	adds	r3, r7, r4
 8004838:	2200      	movs	r2, #0
 800483a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483c:	193b      	adds	r3, r7, r4
 800483e:	2200      	movs	r2, #0
 8004840:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004842:	193b      	adds	r3, r7, r4
 8004844:	2202      	movs	r2, #2
 8004846:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004848:	193a      	adds	r2, r7, r4
 800484a:	2390      	movs	r3, #144	@ 0x90
 800484c:	05db      	lsls	r3, r3, #23
 800484e:	0011      	movs	r1, r2
 8004850:	0018      	movs	r0, r3
 8004852:	f002 faa9 	bl	8006da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004856:	0021      	movs	r1, r4
 8004858:	187b      	adds	r3, r7, r1
 800485a:	2208      	movs	r2, #8
 800485c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485e:	187b      	adds	r3, r7, r1
 8004860:	2202      	movs	r2, #2
 8004862:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004864:	187b      	adds	r3, r7, r1
 8004866:	2200      	movs	r2, #0
 8004868:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486a:	187b      	adds	r3, r7, r1
 800486c:	2200      	movs	r2, #0
 800486e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004870:	187b      	adds	r3, r7, r1
 8004872:	2202      	movs	r2, #2
 8004874:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004876:	187b      	adds	r3, r7, r1
 8004878:	4a69      	ldr	r2, [pc, #420]	@ (8004a20 <HAL_TIM_MspPostInit+0x254>)
 800487a:	0019      	movs	r1, r3
 800487c:	0010      	movs	r0, r2
 800487e:	f002 fa93 	bl	8006da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8004882:	e0c6      	b.n	8004a12 <HAL_TIM_MspPostInit+0x246>
  else if(htim->Instance==TIM3)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a66      	ldr	r2, [pc, #408]	@ (8004a24 <HAL_TIM_MspPostInit+0x258>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d124      	bne.n	80048d8 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800488e:	4b63      	ldr	r3, [pc, #396]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	4b62      	ldr	r3, [pc, #392]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 8004894:	2180      	movs	r1, #128	@ 0x80
 8004896:	02c9      	lsls	r1, r1, #11
 8004898:	430a      	orrs	r2, r1
 800489a:	615a      	str	r2, [r3, #20]
 800489c:	4b5f      	ldr	r3, [pc, #380]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	2380      	movs	r3, #128	@ 0x80
 80048a2:	02db      	lsls	r3, r3, #11
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80048aa:	2124      	movs	r1, #36	@ 0x24
 80048ac:	187b      	adds	r3, r7, r1
 80048ae:	2232      	movs	r2, #50	@ 0x32
 80048b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b2:	187b      	adds	r3, r7, r1
 80048b4:	2202      	movs	r2, #2
 80048b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b8:	187b      	adds	r3, r7, r1
 80048ba:	2200      	movs	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048be:	187b      	adds	r3, r7, r1
 80048c0:	2200      	movs	r2, #0
 80048c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80048c4:	187b      	adds	r3, r7, r1
 80048c6:	2201      	movs	r2, #1
 80048c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	4a54      	ldr	r2, [pc, #336]	@ (8004a20 <HAL_TIM_MspPostInit+0x254>)
 80048ce:	0019      	movs	r1, r3
 80048d0:	0010      	movs	r0, r2
 80048d2:	f002 fa69 	bl	8006da8 <HAL_GPIO_Init>
}
 80048d6:	e09c      	b.n	8004a12 <HAL_TIM_MspPostInit+0x246>
  else if(htim->Instance==TIM16)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a52      	ldr	r2, [pc, #328]	@ (8004a28 <HAL_TIM_MspPostInit+0x25c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d149      	bne.n	8004976 <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e2:	4b4e      	ldr	r3, [pc, #312]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 80048e4:	695a      	ldr	r2, [r3, #20]
 80048e6:	4b4d      	ldr	r3, [pc, #308]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 80048e8:	2180      	movs	r1, #128	@ 0x80
 80048ea:	0289      	lsls	r1, r1, #10
 80048ec:	430a      	orrs	r2, r1
 80048ee:	615a      	str	r2, [r3, #20]
 80048f0:	4b4a      	ldr	r3, [pc, #296]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	2380      	movs	r3, #128	@ 0x80
 80048f6:	029b      	lsls	r3, r3, #10
 80048f8:	4013      	ands	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048fe:	4b47      	ldr	r3, [pc, #284]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	4b46      	ldr	r3, [pc, #280]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 8004904:	2180      	movs	r1, #128	@ 0x80
 8004906:	02c9      	lsls	r1, r1, #11
 8004908:	430a      	orrs	r2, r1
 800490a:	615a      	str	r2, [r3, #20]
 800490c:	4b43      	ldr	r3, [pc, #268]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	2380      	movs	r3, #128	@ 0x80
 8004912:	02db      	lsls	r3, r3, #11
 8004914:	4013      	ands	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800491a:	2424      	movs	r4, #36	@ 0x24
 800491c:	193b      	adds	r3, r7, r4
 800491e:	2240      	movs	r2, #64	@ 0x40
 8004920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004922:	193b      	adds	r3, r7, r4
 8004924:	2202      	movs	r2, #2
 8004926:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004928:	193b      	adds	r3, r7, r4
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492e:	193b      	adds	r3, r7, r4
 8004930:	2200      	movs	r2, #0
 8004932:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8004934:	193b      	adds	r3, r7, r4
 8004936:	2205      	movs	r2, #5
 8004938:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800493a:	193a      	adds	r2, r7, r4
 800493c:	2390      	movs	r3, #144	@ 0x90
 800493e:	05db      	lsls	r3, r3, #23
 8004940:	0011      	movs	r1, r2
 8004942:	0018      	movs	r0, r3
 8004944:	f002 fa30 	bl	8006da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004948:	0021      	movs	r1, r4
 800494a:	187b      	adds	r3, r7, r1
 800494c:	2240      	movs	r2, #64	@ 0x40
 800494e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004950:	187b      	adds	r3, r7, r1
 8004952:	2202      	movs	r2, #2
 8004954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004956:	187b      	adds	r3, r7, r1
 8004958:	2200      	movs	r2, #0
 800495a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800495c:	187b      	adds	r3, r7, r1
 800495e:	2200      	movs	r2, #0
 8004960:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8004962:	187b      	adds	r3, r7, r1
 8004964:	2202      	movs	r2, #2
 8004966:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004968:	187b      	adds	r3, r7, r1
 800496a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a20 <HAL_TIM_MspPostInit+0x254>)
 800496c:	0019      	movs	r1, r3
 800496e:	0010      	movs	r0, r2
 8004970:	f002 fa1a 	bl	8006da8 <HAL_GPIO_Init>
}
 8004974:	e04d      	b.n	8004a12 <HAL_TIM_MspPostInit+0x246>
  else if(htim->Instance==TIM17)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a2c <HAL_TIM_MspPostInit+0x260>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d148      	bne.n	8004a12 <HAL_TIM_MspPostInit+0x246>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004980:	4b26      	ldr	r3, [pc, #152]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	4b25      	ldr	r3, [pc, #148]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 8004986:	2180      	movs	r1, #128	@ 0x80
 8004988:	0289      	lsls	r1, r1, #10
 800498a:	430a      	orrs	r2, r1
 800498c:	615a      	str	r2, [r3, #20]
 800498e:	4b23      	ldr	r3, [pc, #140]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	2380      	movs	r3, #128	@ 0x80
 8004994:	029b      	lsls	r3, r3, #10
 8004996:	4013      	ands	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800499c:	4b1f      	ldr	r3, [pc, #124]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	4b1e      	ldr	r3, [pc, #120]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 80049a2:	2180      	movs	r1, #128	@ 0x80
 80049a4:	02c9      	lsls	r1, r1, #11
 80049a6:	430a      	orrs	r2, r1
 80049a8:	615a      	str	r2, [r3, #20]
 80049aa:	4b1c      	ldr	r3, [pc, #112]	@ (8004a1c <HAL_TIM_MspPostInit+0x250>)
 80049ac:	695a      	ldr	r2, [r3, #20]
 80049ae:	2380      	movs	r3, #128	@ 0x80
 80049b0:	02db      	lsls	r3, r3, #11
 80049b2:	4013      	ands	r3, r2
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80049b8:	2424      	movs	r4, #36	@ 0x24
 80049ba:	193b      	adds	r3, r7, r4
 80049bc:	2280      	movs	r2, #128	@ 0x80
 80049be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c0:	193b      	adds	r3, r7, r4
 80049c2:	2202      	movs	r2, #2
 80049c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	193b      	adds	r3, r7, r4
 80049c8:	2200      	movs	r2, #0
 80049ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049cc:	193b      	adds	r3, r7, r4
 80049ce:	2200      	movs	r2, #0
 80049d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 80049d2:	193b      	adds	r3, r7, r4
 80049d4:	2205      	movs	r2, #5
 80049d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d8:	193a      	adds	r2, r7, r4
 80049da:	2390      	movs	r3, #144	@ 0x90
 80049dc:	05db      	lsls	r3, r3, #23
 80049de:	0011      	movs	r1, r2
 80049e0:	0018      	movs	r0, r3
 80049e2:	f002 f9e1 	bl	8006da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80049e6:	0021      	movs	r1, r4
 80049e8:	187b      	adds	r3, r7, r1
 80049ea:	2280      	movs	r2, #128	@ 0x80
 80049ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	2202      	movs	r2, #2
 80049f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	2200      	movs	r2, #0
 80049fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	2202      	movs	r2, #2
 8004a04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	4a05      	ldr	r2, [pc, #20]	@ (8004a20 <HAL_TIM_MspPostInit+0x254>)
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	0010      	movs	r0, r2
 8004a0e:	f002 f9cb 	bl	8006da8 <HAL_GPIO_Init>
}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b00f      	add	sp, #60	@ 0x3c
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	48000400 	.word	0x48000400
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800

08004a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b08b      	sub	sp, #44	@ 0x2c
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a38:	2414      	movs	r4, #20
 8004a3a:	193b      	adds	r3, r7, r4
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	2314      	movs	r3, #20
 8004a40:	001a      	movs	r2, r3
 8004a42:	2100      	movs	r1, #0
 8004a44:	f006 fb52 	bl	800b0ec <memset>
  if(huart->Instance==USART3)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a20      	ldr	r2, [pc, #128]	@ (8004ad0 <HAL_UART_MspInit+0xa0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d13a      	bne.n	8004ac8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a52:	4b20      	ldr	r3, [pc, #128]	@ (8004ad4 <HAL_UART_MspInit+0xa4>)
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad4 <HAL_UART_MspInit+0xa4>)
 8004a58:	2180      	movs	r1, #128	@ 0x80
 8004a5a:	02c9      	lsls	r1, r1, #11
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	61da      	str	r2, [r3, #28]
 8004a60:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad4 <HAL_UART_MspInit+0xa4>)
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	02db      	lsls	r3, r3, #11
 8004a68:	4013      	ands	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6e:	4b19      	ldr	r3, [pc, #100]	@ (8004ad4 <HAL_UART_MspInit+0xa4>)
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	4b18      	ldr	r3, [pc, #96]	@ (8004ad4 <HAL_UART_MspInit+0xa4>)
 8004a74:	2180      	movs	r1, #128	@ 0x80
 8004a76:	02c9      	lsls	r1, r1, #11
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	615a      	str	r2, [r3, #20]
 8004a7c:	4b15      	ldr	r3, [pc, #84]	@ (8004ad4 <HAL_UART_MspInit+0xa4>)
 8004a7e:	695a      	ldr	r2, [r3, #20]
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	02db      	lsls	r3, r3, #11
 8004a84:	4013      	ands	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a8a:	193b      	adds	r3, r7, r4
 8004a8c:	22c0      	movs	r2, #192	@ 0xc0
 8004a8e:	0112      	lsls	r2, r2, #4
 8004a90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a92:	0021      	movs	r1, r4
 8004a94:	187b      	adds	r3, r7, r1
 8004a96:	2202      	movs	r2, #2
 8004a98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	187b      	adds	r3, r7, r1
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004aa0:	187b      	adds	r3, r7, r1
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004aa6:	187b      	adds	r3, r7, r1
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aac:	187b      	adds	r3, r7, r1
 8004aae:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad8 <HAL_UART_MspInit+0xa8>)
 8004ab0:	0019      	movs	r1, r3
 8004ab2:	0010      	movs	r0, r2
 8004ab4:	f002 f978 	bl	8006da8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2100      	movs	r1, #0
 8004abc:	201d      	movs	r0, #29
 8004abe:	f001 ffad 	bl	8006a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8004ac2:	201d      	movs	r0, #29
 8004ac4:	f001 ffbf 	bl	8006a46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004ac8:	46c0      	nop			@ (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b00b      	add	sp, #44	@ 0x2c
 8004ace:	bd90      	pop	{r4, r7, pc}
 8004ad0:	40004800 	.word	0x40004800
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	48000400 	.word	0x48000400

08004adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ae0:	46c0      	nop			@ (mov r8, r8)
 8004ae2:	e7fd      	b.n	8004ae0 <NMI_Handler+0x4>

08004ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ae8:	46c0      	nop			@ (mov r8, r8)
 8004aea:	e7fd      	b.n	8004ae8 <HardFault_Handler+0x4>

08004aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004af0:	46c0      	nop			@ (mov r8, r8)
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004afa:	46c0      	nop			@ (mov r8, r8)
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b04:	f000 ff3a 	bl	800597c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b08:	46c0      	nop			@ (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8004b14:	4b03      	ldr	r3, [pc, #12]	@ (8004b24 <DMA1_Channel2_3_IRQHandler+0x14>)
 8004b16:	0018      	movs	r0, r3
 8004b18:	f002 f887 	bl	8006c2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004b1c:	46c0      	nop			@ (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	200003b4 	.word	0x200003b4

08004b28 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004b2c:	4b03      	ldr	r3, [pc, #12]	@ (8004b3c <USART3_4_IRQHandler+0x14>)
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f004 f95e 	bl	8008df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8004b34:	46c0      	nop			@ (mov r8, r8)
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	46c0      	nop			@ (mov r8, r8)
 8004b3c:	200003f8 	.word	0x200003f8

08004b40 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004b44:	4b03      	ldr	r3, [pc, #12]	@ (8004b54 <CEC_CAN_IRQHandler+0x14>)
 8004b46:	0018      	movs	r0, r3
 8004b48:	f001 fc85 	bl	8006456 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8004b4c:	46c0      	nop			@ (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	46c0      	nop			@ (mov r8, r8)
 8004b54:	20000238 	.word	0x20000238

08004b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  return 1;
 8004b5c:	2301      	movs	r3, #1
}
 8004b5e:	0018      	movs	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <_kill>:

int _kill(int pid, int sig)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b6e:	f006 fbbb 	bl	800b2e8 <__errno>
 8004b72:	0003      	movs	r3, r0
 8004b74:	2216      	movs	r2, #22
 8004b76:	601a      	str	r2, [r3, #0]
  return -1;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	425b      	negs	r3, r3
}
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_exit>:

void _exit (int status)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	425a      	negs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	0011      	movs	r1, r2
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7ff ffe5 	bl	8004b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	e7fd      	b.n	8004b9a <_exit+0x16>

08004b9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e00a      	b.n	8004bc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004bb0:	e000      	b.n	8004bb4 <_read+0x16>
 8004bb2:	bf00      	nop
 8004bb4:	0001      	movs	r1, r0
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	60ba      	str	r2, [r7, #8]
 8004bbc:	b2ca      	uxtb	r2, r1
 8004bbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	dbf0      	blt.n	8004bb0 <_read+0x12>
  }

  return len;
 8004bce:	687b      	ldr	r3, [r7, #4]
}
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b006      	add	sp, #24
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	e009      	b.n	8004bfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	60ba      	str	r2, [r7, #8]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	e000      	b.n	8004bf8 <_write+0x20>
 8004bf6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	dbf1      	blt.n	8004bea <_write+0x12>
  }
  return len;
 8004c06:	687b      	ldr	r3, [r7, #4]
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b006      	add	sp, #24
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <_close>:

int _close(int file)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	425b      	negs	r3, r3
}
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b002      	add	sp, #8
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2280      	movs	r2, #128	@ 0x80
 8004c32:	0192      	lsls	r2, r2, #6
 8004c34:	605a      	str	r2, [r3, #4]
  return 0;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_isatty>:

int _isatty(int file)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c48:	2301      	movs	r3, #1
}
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b002      	add	sp, #8
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	0018      	movs	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	b004      	add	sp, #16
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c70:	4a14      	ldr	r2, [pc, #80]	@ (8004cc4 <_sbrk+0x5c>)
 8004c72:	4b15      	ldr	r3, [pc, #84]	@ (8004cc8 <_sbrk+0x60>)
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c7c:	4b13      	ldr	r3, [pc, #76]	@ (8004ccc <_sbrk+0x64>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c84:	4b11      	ldr	r3, [pc, #68]	@ (8004ccc <_sbrk+0x64>)
 8004c86:	4a12      	ldr	r2, [pc, #72]	@ (8004cd0 <_sbrk+0x68>)
 8004c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c8a:	4b10      	ldr	r3, [pc, #64]	@ (8004ccc <_sbrk+0x64>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	18d3      	adds	r3, r2, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d207      	bcs.n	8004ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c98:	f006 fb26 	bl	800b2e8 <__errno>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	220c      	movs	r2, #12
 8004ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	425b      	negs	r3, r3
 8004ca6:	e009      	b.n	8004cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ca8:	4b08      	ldr	r3, [pc, #32]	@ (8004ccc <_sbrk+0x64>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cae:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <_sbrk+0x64>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	18d2      	adds	r2, r2, r3
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <_sbrk+0x64>)
 8004cb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004cba:	68fb      	ldr	r3, [r7, #12]
}
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b006      	add	sp, #24
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20004000 	.word	0x20004000
 8004cc8:	00000400 	.word	0x00000400
 8004ccc:	20000290 	.word	0x20000290
 8004cd0:	200007d8 	.word	0x200007d8

08004cd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004cd8:	46c0      	nop			@ (mov r8, r8)
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <screen_test>:
void moveToCoordinates(float x, float y, float speed);
void readCANFeedback(void);
void setServoPosition(uint32_t channel, uint16_t position);
void delay_ms(uint32_t ms);

void screen_test(int px1, int py1, int px2, int py2, int num_steps, int speed) {
 8004ce0:	b5b0      	push	{r4, r5, r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
    //float speed = 50.0; // Set default speed for the test
    float stepsize = (float)(py2 - py1) / num_steps;
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7fc f957 	bl	8000fa8 <__aeabi_i2f>
 8004cfa:	1c04      	adds	r4, r0, #0
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cfe:	f7fc f953 	bl	8000fa8 <__aeabi_i2f>
 8004d02:	1c03      	adds	r3, r0, #0
 8004d04:	1c19      	adds	r1, r3, #0
 8004d06:	1c20      	adds	r0, r4, #0
 8004d08:	f7fb fe0a 	bl	8000920 <__aeabi_fdiv>
 8004d0c:	1c03      	adds	r3, r0, #0
 8004d0e:	613b      	str	r3, [r7, #16]

    // Move to initial position
    moveToCoordinates(px1, py1, speed);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7fc f949 	bl	8000fa8 <__aeabi_i2f>
 8004d16:	1c04      	adds	r4, r0, #0
 8004d18:	68b8      	ldr	r0, [r7, #8]
 8004d1a:	f7fc f945 	bl	8000fa8 <__aeabi_i2f>
 8004d1e:	1c05      	adds	r5, r0, #0
 8004d20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d22:	f7fc f941 	bl	8000fa8 <__aeabi_i2f>
 8004d26:	1c03      	adds	r3, r0, #0
 8004d28:	1c1a      	adds	r2, r3, #0
 8004d2a:	1c29      	adds	r1, r5, #0
 8004d2c:	1c20      	adds	r0, r4, #0
 8004d2e:	f7ff f959 	bl	8003fe4 <moveToCoordinates>
    delay_ms(100);
 8004d32:	2064      	movs	r0, #100	@ 0x64
 8004d34:	f000 f9f8 	bl	8005128 <delay_ms>
    setServoPosition(TIM_CHANNEL_1, SERVO1_ACTUATE_POSITION); // Activate servo
 8004d38:	2150      	movs	r1, #80	@ 0x50
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	f000 f9a0 	bl	8005080 <setServoPosition>
    delay_ms(100);
 8004d40:	2064      	movs	r0, #100	@ 0x64
 8004d42:	f000 f9f1 	bl	8005128 <delay_ms>

    for (int m = 0; m < num_steps; m++) {
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e091      	b.n	8004e70 <screen_test+0x190>
        processCANMessage();
 8004d4c:	f7fe f9e8 	bl	8003120 <processCANMessage>

        // Determine the direction of the horizontal movement
        if (m % 2 == 0) {
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2201      	movs	r2, #1
 8004d54:	4013      	ands	r3, r2
 8004d56:	d144      	bne.n	8004de2 <screen_test+0x102>
            moveToCoordinates(px1, py1 + (m * stepsize), speed);
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7fc f925 	bl	8000fa8 <__aeabi_i2f>
 8004d5e:	1c04      	adds	r4, r0, #0
 8004d60:	68b8      	ldr	r0, [r7, #8]
 8004d62:	f7fc f921 	bl	8000fa8 <__aeabi_i2f>
 8004d66:	1c05      	adds	r5, r0, #0
 8004d68:	6978      	ldr	r0, [r7, #20]
 8004d6a:	f7fc f91d 	bl	8000fa8 <__aeabi_i2f>
 8004d6e:	1c03      	adds	r3, r0, #0
 8004d70:	6939      	ldr	r1, [r7, #16]
 8004d72:	1c18      	adds	r0, r3, #0
 8004d74:	f7fb ffba 	bl	8000cec <__aeabi_fmul>
 8004d78:	1c03      	adds	r3, r0, #0
 8004d7a:	1c19      	adds	r1, r3, #0
 8004d7c:	1c28      	adds	r0, r5, #0
 8004d7e:	f7fb fc45 	bl	800060c <__aeabi_fadd>
 8004d82:	1c03      	adds	r3, r0, #0
 8004d84:	1c1d      	adds	r5, r3, #0
 8004d86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d88:	f7fc f90e 	bl	8000fa8 <__aeabi_i2f>
 8004d8c:	1c03      	adds	r3, r0, #0
 8004d8e:	1c1a      	adds	r2, r3, #0
 8004d90:	1c29      	adds	r1, r5, #0
 8004d92:	1c20      	adds	r0, r4, #0
 8004d94:	f7ff f926 	bl	8003fe4 <moveToCoordinates>
            processCANMessage();
 8004d98:	f7fe f9c2 	bl	8003120 <processCANMessage>
            moveToCoordinates(px2, py1 + (m * stepsize), speed);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7fc f903 	bl	8000fa8 <__aeabi_i2f>
 8004da2:	1c04      	adds	r4, r0, #0
 8004da4:	68b8      	ldr	r0, [r7, #8]
 8004da6:	f7fc f8ff 	bl	8000fa8 <__aeabi_i2f>
 8004daa:	1c05      	adds	r5, r0, #0
 8004dac:	6978      	ldr	r0, [r7, #20]
 8004dae:	f7fc f8fb 	bl	8000fa8 <__aeabi_i2f>
 8004db2:	1c03      	adds	r3, r0, #0
 8004db4:	6939      	ldr	r1, [r7, #16]
 8004db6:	1c18      	adds	r0, r3, #0
 8004db8:	f7fb ff98 	bl	8000cec <__aeabi_fmul>
 8004dbc:	1c03      	adds	r3, r0, #0
 8004dbe:	1c19      	adds	r1, r3, #0
 8004dc0:	1c28      	adds	r0, r5, #0
 8004dc2:	f7fb fc23 	bl	800060c <__aeabi_fadd>
 8004dc6:	1c03      	adds	r3, r0, #0
 8004dc8:	1c1d      	adds	r5, r3, #0
 8004dca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004dcc:	f7fc f8ec 	bl	8000fa8 <__aeabi_i2f>
 8004dd0:	1c03      	adds	r3, r0, #0
 8004dd2:	1c1a      	adds	r2, r3, #0
 8004dd4:	1c29      	adds	r1, r5, #0
 8004dd6:	1c20      	adds	r0, r4, #0
 8004dd8:	f7ff f904 	bl	8003fe4 <moveToCoordinates>
            processCANMessage();
 8004ddc:	f7fe f9a0 	bl	8003120 <processCANMessage>
 8004de0:	e043      	b.n	8004e6a <screen_test+0x18a>
        } else {
            moveToCoordinates(px2, py1 + (m * stepsize), speed);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fc f8e0 	bl	8000fa8 <__aeabi_i2f>
 8004de8:	1c04      	adds	r4, r0, #0
 8004dea:	68b8      	ldr	r0, [r7, #8]
 8004dec:	f7fc f8dc 	bl	8000fa8 <__aeabi_i2f>
 8004df0:	1c05      	adds	r5, r0, #0
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	f7fc f8d8 	bl	8000fa8 <__aeabi_i2f>
 8004df8:	1c03      	adds	r3, r0, #0
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	1c18      	adds	r0, r3, #0
 8004dfe:	f7fb ff75 	bl	8000cec <__aeabi_fmul>
 8004e02:	1c03      	adds	r3, r0, #0
 8004e04:	1c19      	adds	r1, r3, #0
 8004e06:	1c28      	adds	r0, r5, #0
 8004e08:	f7fb fc00 	bl	800060c <__aeabi_fadd>
 8004e0c:	1c03      	adds	r3, r0, #0
 8004e0e:	1c1d      	adds	r5, r3, #0
 8004e10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e12:	f7fc f8c9 	bl	8000fa8 <__aeabi_i2f>
 8004e16:	1c03      	adds	r3, r0, #0
 8004e18:	1c1a      	adds	r2, r3, #0
 8004e1a:	1c29      	adds	r1, r5, #0
 8004e1c:	1c20      	adds	r0, r4, #0
 8004e1e:	f7ff f8e1 	bl	8003fe4 <moveToCoordinates>
            processCANMessage();
 8004e22:	f7fe f97d 	bl	8003120 <processCANMessage>
            moveToCoordinates(px1, py1 + (m * stepsize), speed);
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7fc f8be 	bl	8000fa8 <__aeabi_i2f>
 8004e2c:	1c04      	adds	r4, r0, #0
 8004e2e:	68b8      	ldr	r0, [r7, #8]
 8004e30:	f7fc f8ba 	bl	8000fa8 <__aeabi_i2f>
 8004e34:	1c05      	adds	r5, r0, #0
 8004e36:	6978      	ldr	r0, [r7, #20]
 8004e38:	f7fc f8b6 	bl	8000fa8 <__aeabi_i2f>
 8004e3c:	1c03      	adds	r3, r0, #0
 8004e3e:	6939      	ldr	r1, [r7, #16]
 8004e40:	1c18      	adds	r0, r3, #0
 8004e42:	f7fb ff53 	bl	8000cec <__aeabi_fmul>
 8004e46:	1c03      	adds	r3, r0, #0
 8004e48:	1c19      	adds	r1, r3, #0
 8004e4a:	1c28      	adds	r0, r5, #0
 8004e4c:	f7fb fbde 	bl	800060c <__aeabi_fadd>
 8004e50:	1c03      	adds	r3, r0, #0
 8004e52:	1c1d      	adds	r5, r3, #0
 8004e54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e56:	f7fc f8a7 	bl	8000fa8 <__aeabi_i2f>
 8004e5a:	1c03      	adds	r3, r0, #0
 8004e5c:	1c1a      	adds	r2, r3, #0
 8004e5e:	1c29      	adds	r1, r5, #0
 8004e60:	1c20      	adds	r0, r4, #0
 8004e62:	f7ff f8bf 	bl	8003fe4 <moveToCoordinates>
            processCANMessage();
 8004e66:	f7fe f95b 	bl	8003120 <processCANMessage>
    for (int m = 0; m < num_steps; m++) {
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e74:	429a      	cmp	r2, r3
 8004e76:	da00      	bge.n	8004e7a <screen_test+0x19a>
 8004e78:	e768      	b.n	8004d4c <screen_test+0x6c>
        }
    }

    // Retract servo after completing zigzag
    setServoPosition(TIM_CHANNEL_1, SERVO1_RETRACT_POSITION);
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	f000 f8ff 	bl	8005080 <setServoPosition>
    delay_ms(100);
 8004e82:	2064      	movs	r0, #100	@ 0x64
 8004e84:	f000 f950 	bl	8005128 <delay_ms>

    // Move back to original positions after completing the test
    moveToCoordinates(0, 40, speed);
 8004e88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e8a:	f7fc f88d 	bl	8000fa8 <__aeabi_i2f>
 8004e8e:	1c03      	adds	r3, r0, #0
 8004e90:	490a      	ldr	r1, [pc, #40]	@ (8004ebc <screen_test+0x1dc>)
 8004e92:	2000      	movs	r0, #0
 8004e94:	1c1a      	adds	r2, r3, #0
 8004e96:	f7ff f8a5 	bl	8003fe4 <moveToCoordinates>
    processCANMessage();
 8004e9a:	f7fe f941 	bl	8003120 <processCANMessage>
    moveToCoordinates(0, 10, speed);
 8004e9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ea0:	f7fc f882 	bl	8000fa8 <__aeabi_i2f>
 8004ea4:	1c03      	adds	r3, r0, #0
 8004ea6:	4906      	ldr	r1, [pc, #24]	@ (8004ec0 <screen_test+0x1e0>)
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	1c1a      	adds	r2, r3, #0
 8004eac:	f7ff f89a 	bl	8003fe4 <moveToCoordinates>
    processCANMessage();
 8004eb0:	f7fe f936 	bl	8003120 <processCANMessage>
}
 8004eb4:	46c0      	nop			@ (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b006      	add	sp, #24
 8004eba:	bdb0      	pop	{r4, r5, r7, pc}
 8004ebc:	42200000 	.word	0x42200000
 8004ec0:	41200000 	.word	0x41200000

08004ec4 <speaker_test>:

void speaker_test(int px1, int py1, int px2, int py2, int speed) {
 8004ec4:	b5b0      	push	{r4, r5, r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
    //float speed = 60.0; // Set default speed for the test

    moveToCoordinates(px1, py1, speed);
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7fc f868 	bl	8000fa8 <__aeabi_i2f>
 8004ed8:	1c04      	adds	r4, r0, #0
 8004eda:	68b8      	ldr	r0, [r7, #8]
 8004edc:	f7fc f864 	bl	8000fa8 <__aeabi_i2f>
 8004ee0:	1c05      	adds	r5, r0, #0
 8004ee2:	6a38      	ldr	r0, [r7, #32]
 8004ee4:	f7fc f860 	bl	8000fa8 <__aeabi_i2f>
 8004ee8:	1c03      	adds	r3, r0, #0
 8004eea:	1c1a      	adds	r2, r3, #0
 8004eec:	1c29      	adds	r1, r5, #0
 8004eee:	1c20      	adds	r0, r4, #0
 8004ef0:	f7ff f878 	bl	8003fe4 <moveToCoordinates>
    HAL_Delay(3000);
 8004ef4:	4b16      	ldr	r3, [pc, #88]	@ (8004f50 <speaker_test+0x8c>)
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 fd5c 	bl	80059b4 <HAL_Delay>
    moveToCoordinates(px2, py2, speed);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7fc f853 	bl	8000fa8 <__aeabi_i2f>
 8004f02:	1c04      	adds	r4, r0, #0
 8004f04:	6838      	ldr	r0, [r7, #0]
 8004f06:	f7fc f84f 	bl	8000fa8 <__aeabi_i2f>
 8004f0a:	1c05      	adds	r5, r0, #0
 8004f0c:	6a38      	ldr	r0, [r7, #32]
 8004f0e:	f7fc f84b 	bl	8000fa8 <__aeabi_i2f>
 8004f12:	1c03      	adds	r3, r0, #0
 8004f14:	1c1a      	adds	r2, r3, #0
 8004f16:	1c29      	adds	r1, r5, #0
 8004f18:	1c20      	adds	r0, r4, #0
 8004f1a:	f7ff f863 	bl	8003fe4 <moveToCoordinates>
    HAL_Delay(3000);
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <speaker_test+0x8c>)
 8004f20:	0018      	movs	r0, r3
 8004f22:	f000 fd47 	bl	80059b4 <HAL_Delay>
    moveToCoordinates(px1, py1, speed);
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7fc f83e 	bl	8000fa8 <__aeabi_i2f>
 8004f2c:	1c04      	adds	r4, r0, #0
 8004f2e:	68b8      	ldr	r0, [r7, #8]
 8004f30:	f7fc f83a 	bl	8000fa8 <__aeabi_i2f>
 8004f34:	1c05      	adds	r5, r0, #0
 8004f36:	6a38      	ldr	r0, [r7, #32]
 8004f38:	f7fc f836 	bl	8000fa8 <__aeabi_i2f>
 8004f3c:	1c03      	adds	r3, r0, #0
 8004f3e:	1c1a      	adds	r2, r3, #0
 8004f40:	1c29      	adds	r1, r5, #0
 8004f42:	1c20      	adds	r0, r4, #0
 8004f44:	f7ff f84e 	bl	8003fe4 <moveToCoordinates>
}
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b004      	add	sp, #16
 8004f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f50:	00000bb8 	.word	0x00000bb8

08004f54 <camera_test>:

void camera_test(int mm, int speed) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
    int32_t pulseXaxis = (int32_t)(mm * PULSES_PER_MM_MOTOR1);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fd feb6 	bl	8002cd0 <__aeabi_i2d>
 8004f64:	4a14      	ldr	r2, [pc, #80]	@ (8004fb8 <camera_test+0x64>)
 8004f66:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <camera_test+0x68>)
 8004f68:	f7fd f812 	bl	8001f90 <__aeabi_dmul>
 8004f6c:	0002      	movs	r2, r0
 8004f6e:	000b      	movs	r3, r1
 8004f70:	0010      	movs	r0, r2
 8004f72:	0019      	movs	r1, r3
 8004f74:	f7fd fe70 	bl	8002c58 <__aeabi_d2iz>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	60fb      	str	r3, [r7, #12]
    sendAbsoluteAxisCommand(0x004, 2000, 240, -pulseXaxis);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	425b      	negs	r3, r3
 8004f80:	22fa      	movs	r2, #250	@ 0xfa
 8004f82:	00d1      	lsls	r1, r2, #3
 8004f84:	22f0      	movs	r2, #240	@ 0xf0
 8004f86:	2004      	movs	r0, #4
 8004f88:	f7fe fff0 	bl	8003f6c <sendAbsoluteAxisCommand>
    HAL_Delay(4000);
 8004f8c:	23fa      	movs	r3, #250	@ 0xfa
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 fd0f 	bl	80059b4 <HAL_Delay>
    sendAbsoluteAxisCommand(0x004, 2000, 240, 0);
 8004f96:	23fa      	movs	r3, #250	@ 0xfa
 8004f98:	00d9      	lsls	r1, r3, #3
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	22f0      	movs	r2, #240	@ 0xf0
 8004f9e:	2004      	movs	r0, #4
 8004fa0:	f7fe ffe4 	bl	8003f6c <sendAbsoluteAxisCommand>
    HAL_Delay(1000);
 8004fa4:	23fa      	movs	r3, #250	@ 0xfa
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f000 fd03 	bl	80059b4 <HAL_Delay>
}
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b004      	add	sp, #16
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	51eb851f 	.word	0x51eb851f
 8004fbc:	4070aab8 	.word	0x4070aab8

08004fc0 <multitouch_screen_test>:

void multitouch_screen_test(int px1, int py1, int px2, int py2, int speed) {
 8004fc0:	b5b0      	push	{r4, r5, r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
   // float speed = 70.0; // Set default speed for the test

    moveToCoordinates(px1, py1, speed);
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7fb ffea 	bl	8000fa8 <__aeabi_i2f>
 8004fd4:	1c04      	adds	r4, r0, #0
 8004fd6:	68b8      	ldr	r0, [r7, #8]
 8004fd8:	f7fb ffe6 	bl	8000fa8 <__aeabi_i2f>
 8004fdc:	1c05      	adds	r5, r0, #0
 8004fde:	6a38      	ldr	r0, [r7, #32]
 8004fe0:	f7fb ffe2 	bl	8000fa8 <__aeabi_i2f>
 8004fe4:	1c03      	adds	r3, r0, #0
 8004fe6:	1c1a      	adds	r2, r3, #0
 8004fe8:	1c29      	adds	r1, r5, #0
 8004fea:	1c20      	adds	r0, r4, #0
 8004fec:	f7fe fffa 	bl	8003fe4 <moveToCoordinates>
    HAL_Delay(3000);
 8004ff0:	4b22      	ldr	r3, [pc, #136]	@ (800507c <multitouch_screen_test+0xbc>)
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f000 fcde 	bl	80059b4 <HAL_Delay>
    moveToCoordinates(px2, py2, speed);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fb ffd5 	bl	8000fa8 <__aeabi_i2f>
 8004ffe:	1c04      	adds	r4, r0, #0
 8005000:	6838      	ldr	r0, [r7, #0]
 8005002:	f7fb ffd1 	bl	8000fa8 <__aeabi_i2f>
 8005006:	1c05      	adds	r5, r0, #0
 8005008:	6a38      	ldr	r0, [r7, #32]
 800500a:	f7fb ffcd 	bl	8000fa8 <__aeabi_i2f>
 800500e:	1c03      	adds	r3, r0, #0
 8005010:	1c1a      	adds	r2, r3, #0
 8005012:	1c29      	adds	r1, r5, #0
 8005014:	1c20      	adds	r0, r4, #0
 8005016:	f7fe ffe5 	bl	8003fe4 <moveToCoordinates>
    HAL_Delay(3000);
 800501a:	4b18      	ldr	r3, [pc, #96]	@ (800507c <multitouch_screen_test+0xbc>)
 800501c:	0018      	movs	r0, r3
 800501e:	f000 fcc9 	bl	80059b4 <HAL_Delay>

    setServoPosition(TIM_CHANNEL_1, SERVO1_ACTUATE_POSITION);
 8005022:	2150      	movs	r1, #80	@ 0x50
 8005024:	2000      	movs	r0, #0
 8005026:	f000 f82b 	bl	8005080 <setServoPosition>
    setServoPosition(TIM_CHANNEL_2, SERVO2_ACTUATE_POSITION);
 800502a:	2100      	movs	r1, #0
 800502c:	2004      	movs	r0, #4
 800502e:	f000 f827 	bl	8005080 <setServoPosition>

    HAL_Delay(3000);
 8005032:	4b12      	ldr	r3, [pc, #72]	@ (800507c <multitouch_screen_test+0xbc>)
 8005034:	0018      	movs	r0, r3
 8005036:	f000 fcbd 	bl	80059b4 <HAL_Delay>

    moveToCoordinates(px1, py1, speed);
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f7fb ffb4 	bl	8000fa8 <__aeabi_i2f>
 8005040:	1c04      	adds	r4, r0, #0
 8005042:	68b8      	ldr	r0, [r7, #8]
 8005044:	f7fb ffb0 	bl	8000fa8 <__aeabi_i2f>
 8005048:	1c05      	adds	r5, r0, #0
 800504a:	6a38      	ldr	r0, [r7, #32]
 800504c:	f7fb ffac 	bl	8000fa8 <__aeabi_i2f>
 8005050:	1c03      	adds	r3, r0, #0
 8005052:	1c1a      	adds	r2, r3, #0
 8005054:	1c29      	adds	r1, r5, #0
 8005056:	1c20      	adds	r0, r4, #0
 8005058:	f7fe ffc4 	bl	8003fe4 <moveToCoordinates>
    HAL_Delay(3000);
 800505c:	4b07      	ldr	r3, [pc, #28]	@ (800507c <multitouch_screen_test+0xbc>)
 800505e:	0018      	movs	r0, r3
 8005060:	f000 fca8 	bl	80059b4 <HAL_Delay>

    setServoPosition(TIM_CHANNEL_1, SERVO1_RETRACT_POSITION);
 8005064:	2100      	movs	r1, #0
 8005066:	2000      	movs	r0, #0
 8005068:	f000 f80a 	bl	8005080 <setServoPosition>
    setServoPosition(TIM_CHANNEL_2, SERVO2_RETRACT_POSITION);
 800506c:	2141      	movs	r1, #65	@ 0x41
 800506e:	2004      	movs	r0, #4
 8005070:	f000 f806 	bl	8005080 <setServoPosition>
}
 8005074:	46c0      	nop			@ (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bdb0      	pop	{r4, r5, r7, pc}
 800507c:	00000bb8 	.word	0x00000bb8

08005080 <setServoPosition>:

void setServoPosition(uint32_t channel, uint16_t position) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	000a      	movs	r2, r1
 800508a:	1cbb      	adds	r3, r7, #2
 800508c:	801a      	strh	r2, [r3, #0]
    TIM_HandleTypeDef *htim = &htim2;
 800508e:	4b25      	ldr	r3, [pc, #148]	@ (8005124 <setServoPosition+0xa4>)
 8005090:	617b      	str	r3, [r7, #20]
    uint32_t min_pulse = (htim->Init.Period + 1) * 5 / 100;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	0013      	movs	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	189b      	adds	r3, r3, r2
 800509e:	2164      	movs	r1, #100	@ 0x64
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7fb f857 	bl	8000154 <__udivsi3>
 80050a6:	0003      	movs	r3, r0
 80050a8:	613b      	str	r3, [r7, #16]
    uint32_t max_pulse = (htim->Init.Period + 1) * 10 / 100;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	0013      	movs	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	189b      	adds	r3, r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	2164      	movs	r1, #100	@ 0x64
 80050ba:	0018      	movs	r0, r3
 80050bc:	f7fb f84a 	bl	8000154 <__udivsi3>
 80050c0:	0003      	movs	r3, r0
 80050c2:	60fb      	str	r3, [r7, #12]

    uint32_t pulse = min_pulse + ((max_pulse - min_pulse) * position) / 180;
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	1cba      	adds	r2, r7, #2
 80050cc:	8812      	ldrh	r2, [r2, #0]
 80050ce:	4353      	muls	r3, r2
 80050d0:	21b4      	movs	r1, #180	@ 0xb4
 80050d2:	0018      	movs	r0, r3
 80050d4:	f7fb f83e 	bl	8000154 <__udivsi3>
 80050d8:	0003      	movs	r3, r0
 80050da:	001a      	movs	r2, r3
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <setServoPosition+0x72>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80050f0:	e013      	b.n	800511a <setServoPosition+0x9a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d104      	bne.n	8005102 <setServoPosition+0x82>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005100:	e00b      	b.n	800511a <setServoPosition+0x9a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d104      	bne.n	8005112 <setServoPosition+0x92>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8005110:	e003      	b.n	800511a <setServoPosition+0x9a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	b006      	add	sp, #24
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	20000294 	.word	0x20000294

08005128 <delay_ms>:

void delay_ms(uint32_t ms) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	0018      	movs	r0, r3
 8005134:	f000 fc3e 	bl	80059b4 <HAL_Delay>
}
 8005138:	46c0      	nop			@ (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b002      	add	sp, #8
 800513e:	bd80      	pop	{r7, pc}

08005140 <Start_PWM_All_Channels>:
void MX_TIM16_Init(void);
void MX_TIM17_Init(void);
void Start_PWM_All_Channels(void);
void SetLightBrightness(uint8_t light, uint8_t brightness);

void Start_PWM_All_Channels(void) {
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
    /* Start PWM on TIM2, TIM3, and TIM17 channels */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005144:	4b17      	ldr	r3, [pc, #92]	@ (80051a4 <Start_PWM_All_Channels+0x64>)
 8005146:	2100      	movs	r1, #0
 8005148:	0018      	movs	r0, r3
 800514a:	f002 fe4f 	bl	8007dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800514e:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <Start_PWM_All_Channels+0x64>)
 8005150:	2104      	movs	r1, #4
 8005152:	0018      	movs	r0, r3
 8005154:	f002 fe4a 	bl	8007dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8005158:	4b12      	ldr	r3, [pc, #72]	@ (80051a4 <Start_PWM_All_Channels+0x64>)
 800515a:	210c      	movs	r1, #12
 800515c:	0018      	movs	r0, r3
 800515e:	f002 fe45 	bl	8007dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005162:	4b11      	ldr	r3, [pc, #68]	@ (80051a8 <Start_PWM_All_Channels+0x68>)
 8005164:	2100      	movs	r1, #0
 8005166:	0018      	movs	r0, r3
 8005168:	f002 fe40 	bl	8007dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800516c:	4b0e      	ldr	r3, [pc, #56]	@ (80051a8 <Start_PWM_All_Channels+0x68>)
 800516e:	2104      	movs	r1, #4
 8005170:	0018      	movs	r0, r3
 8005172:	f002 fe3b 	bl	8007dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8005176:	4b0d      	ldr	r3, [pc, #52]	@ (80051ac <Start_PWM_All_Channels+0x6c>)
 8005178:	2100      	movs	r1, #0
 800517a:	0018      	movs	r0, r3
 800517c:	f002 fe36 	bl	8007dec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8005180:	4b0b      	ldr	r3, [pc, #44]	@ (80051b0 <Start_PWM_All_Channels+0x70>)
 8005182:	2100      	movs	r1, #0
 8005184:	0018      	movs	r0, r3
 8005186:	f002 fe31 	bl	8007dec <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 800518a:	4b08      	ldr	r3, [pc, #32]	@ (80051ac <Start_PWM_All_Channels+0x6c>)
 800518c:	2100      	movs	r1, #0
 800518e:	0018      	movs	r0, r3
 8005190:	f003 fbc6 	bl	8008920 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 8005194:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <Start_PWM_All_Channels+0x70>)
 8005196:	2100      	movs	r1, #0
 8005198:	0018      	movs	r0, r3
 800519a:	f003 fbc1 	bl	8008920 <HAL_TIMEx_PWMN_Start>


}
 800519e:	46c0      	nop			@ (mov r8, r8)
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	200002dc 	.word	0x200002dc
 80051a8:	20000294 	.word	0x20000294
 80051ac:	20000324 	.word	0x20000324
 80051b0:	2000036c 	.word	0x2000036c

080051b4 <MX_TIM2_Init>:


/* TIM2 Initialization */
void MX_TIM2_Init(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08c      	sub	sp, #48	@ 0x30
 80051b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051ba:	2320      	movs	r3, #32
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	0018      	movs	r0, r3
 80051c0:	2310      	movs	r3, #16
 80051c2:	001a      	movs	r2, r3
 80051c4:	2100      	movs	r1, #0
 80051c6:	f005 ff91 	bl	800b0ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	0018      	movs	r0, r3
 80051ce:	231c      	movs	r3, #28
 80051d0:	001a      	movs	r2, r3
 80051d2:	2100      	movs	r1, #0
 80051d4:	f005 ff8a 	bl	800b0ec <memset>

  htim2.Instance = TIM2;
 80051d8:	4b30      	ldr	r3, [pc, #192]	@ (800529c <MX_TIM2_Init+0xe8>)
 80051da:	2280      	movs	r2, #128	@ 0x80
 80051dc:	05d2      	lsls	r2, r2, #23
 80051de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79; // Divides 80 MHz clock to 1 MHz
 80051e0:	4b2e      	ldr	r3, [pc, #184]	@ (800529c <MX_TIM2_Init+0xe8>)
 80051e2:	224f      	movs	r2, #79	@ 0x4f
 80051e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051e6:	4b2d      	ldr	r3, [pc, #180]	@ (800529c <MX_TIM2_Init+0xe8>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999; // Set period for 20 ms (1 MHz / 20000 = 50 Hz)
 80051ec:	4b2b      	ldr	r3, [pc, #172]	@ (800529c <MX_TIM2_Init+0xe8>)
 80051ee:	4a2c      	ldr	r2, [pc, #176]	@ (80052a0 <MX_TIM2_Init+0xec>)
 80051f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051f2:	4b2a      	ldr	r3, [pc, #168]	@ (800529c <MX_TIM2_Init+0xe8>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051f8:	4b28      	ldr	r3, [pc, #160]	@ (800529c <MX_TIM2_Init+0xe8>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) { Error_Handler(); }
 80051fe:	4b27      	ldr	r3, [pc, #156]	@ (800529c <MX_TIM2_Init+0xe8>)
 8005200:	0018      	movs	r0, r3
 8005202:	f002 fd4b 	bl	8007c9c <HAL_TIM_Base_Init>
 8005206:	1e03      	subs	r3, r0, #0
 8005208:	d001      	beq.n	800520e <MX_TIM2_Init+0x5a>
 800520a:	f7ff f9ab 	bl	8004564 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800520e:	2120      	movs	r1, #32
 8005210:	187b      	adds	r3, r7, r1
 8005212:	2280      	movs	r2, #128	@ 0x80
 8005214:	0152      	lsls	r2, r2, #5
 8005216:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) { Error_Handler(); }
 8005218:	187a      	adds	r2, r7, r1
 800521a:	4b20      	ldr	r3, [pc, #128]	@ (800529c <MX_TIM2_Init+0xe8>)
 800521c:	0011      	movs	r1, r2
 800521e:	0018      	movs	r0, r3
 8005220:	f002 ff62 	bl	80080e8 <HAL_TIM_ConfigClockSource>
 8005224:	1e03      	subs	r3, r0, #0
 8005226:	d001      	beq.n	800522c <MX_TIM2_Init+0x78>
 8005228:	f7ff f99c 	bl	8004564 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) { Error_Handler(); }
 800522c:	4b1b      	ldr	r3, [pc, #108]	@ (800529c <MX_TIM2_Init+0xe8>)
 800522e:	0018      	movs	r0, r3
 8005230:	f002 fd84 	bl	8007d3c <HAL_TIM_PWM_Init>
 8005234:	1e03      	subs	r3, r0, #0
 8005236:	d001      	beq.n	800523c <MX_TIM2_Init+0x88>
 8005238:	f7ff f994 	bl	8004564 <Error_Handler>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	2260      	movs	r2, #96	@ 0x60
 8005240:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = htim2.Init.Period / 20; // Default to 1 ms pulse width (5% duty cycle)
 8005242:	4b16      	ldr	r3, [pc, #88]	@ (800529c <MX_TIM2_Init+0xe8>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2114      	movs	r1, #20
 8005248:	0018      	movs	r0, r3
 800524a:	f7fa ff83 	bl	8000154 <__udivsi3>
 800524e:	0003      	movs	r3, r0
 8005250:	001a      	movs	r2, r3
 8005252:	1d3b      	adds	r3, r7, #4
 8005254:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005256:	1d3b      	adds	r3, r7, #4
 8005258:	2200      	movs	r2, #0
 800525a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800525c:	1d3b      	adds	r3, r7, #4
 800525e:	2200      	movs	r2, #0
 8005260:	611a      	str	r2, [r3, #16]

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); }
 8005262:	1d39      	adds	r1, r7, #4
 8005264:	4b0d      	ldr	r3, [pc, #52]	@ (800529c <MX_TIM2_Init+0xe8>)
 8005266:	2200      	movs	r2, #0
 8005268:	0018      	movs	r0, r3
 800526a:	f002 fe77 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 800526e:	1e03      	subs	r3, r0, #0
 8005270:	d001      	beq.n	8005276 <MX_TIM2_Init+0xc2>
 8005272:	f7ff f977 	bl	8004564 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) { Error_Handler(); }
 8005276:	1d39      	adds	r1, r7, #4
 8005278:	4b08      	ldr	r3, [pc, #32]	@ (800529c <MX_TIM2_Init+0xe8>)
 800527a:	2204      	movs	r2, #4
 800527c:	0018      	movs	r0, r3
 800527e:	f002 fe6d 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 8005282:	1e03      	subs	r3, r0, #0
 8005284:	d001      	beq.n	800528a <MX_TIM2_Init+0xd6>
 8005286:	f7ff f96d 	bl	8004564 <Error_Handler>

  HAL_TIM_MspPostInit(&htim2);
 800528a:	4b04      	ldr	r3, [pc, #16]	@ (800529c <MX_TIM2_Init+0xe8>)
 800528c:	0018      	movs	r0, r3
 800528e:	f7ff fa9d 	bl	80047cc <HAL_TIM_MspPostInit>
}
 8005292:	46c0      	nop			@ (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b00c      	add	sp, #48	@ 0x30
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			@ (mov r8, r8)
 800529c:	20000294 	.word	0x20000294
 80052a0:	00004e1f 	.word	0x00004e1f

080052a4 <MX_TIM3_Init>:

/* TIM3 Initialization */
void MX_TIM3_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	@ 0x30
 80052a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052aa:	2320      	movs	r3, #32
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	0018      	movs	r0, r3
 80052b0:	2310      	movs	r3, #16
 80052b2:	001a      	movs	r2, r3
 80052b4:	2100      	movs	r1, #0
 80052b6:	f005 ff19 	bl	800b0ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052ba:	1d3b      	adds	r3, r7, #4
 80052bc:	0018      	movs	r0, r3
 80052be:	231c      	movs	r3, #28
 80052c0:	001a      	movs	r2, r3
 80052c2:	2100      	movs	r1, #0
 80052c4:	f005 ff12 	bl	800b0ec <memset>

  htim3.Instance = TIM3;
 80052c8:	4b32      	ldr	r3, [pc, #200]	@ (8005394 <MX_TIM3_Init+0xf0>)
 80052ca:	4a33      	ldr	r2, [pc, #204]	@ (8005398 <MX_TIM3_Init+0xf4>)
 80052cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80052ce:	4b31      	ldr	r3, [pc, #196]	@ (8005394 <MX_TIM3_Init+0xf0>)
 80052d0:	224f      	movs	r2, #79	@ 0x4f
 80052d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052d4:	4b2f      	ldr	r3, [pc, #188]	@ (8005394 <MX_TIM3_Init+0xf0>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80052da:	4b2e      	ldr	r3, [pc, #184]	@ (8005394 <MX_TIM3_Init+0xf0>)
 80052dc:	4a2f      	ldr	r2, [pc, #188]	@ (800539c <MX_TIM3_Init+0xf8>)
 80052de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052e0:	4b2c      	ldr	r3, [pc, #176]	@ (8005394 <MX_TIM3_Init+0xf0>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005394 <MX_TIM3_Init+0xf0>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) { Error_Handler(); }
 80052ec:	4b29      	ldr	r3, [pc, #164]	@ (8005394 <MX_TIM3_Init+0xf0>)
 80052ee:	0018      	movs	r0, r3
 80052f0:	f002 fcd4 	bl	8007c9c <HAL_TIM_Base_Init>
 80052f4:	1e03      	subs	r3, r0, #0
 80052f6:	d001      	beq.n	80052fc <MX_TIM3_Init+0x58>
 80052f8:	f7ff f934 	bl	8004564 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052fc:	2120      	movs	r1, #32
 80052fe:	187b      	adds	r3, r7, r1
 8005300:	2280      	movs	r2, #128	@ 0x80
 8005302:	0152      	lsls	r2, r2, #5
 8005304:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) { Error_Handler(); }
 8005306:	187a      	adds	r2, r7, r1
 8005308:	4b22      	ldr	r3, [pc, #136]	@ (8005394 <MX_TIM3_Init+0xf0>)
 800530a:	0011      	movs	r1, r2
 800530c:	0018      	movs	r0, r3
 800530e:	f002 feeb 	bl	80080e8 <HAL_TIM_ConfigClockSource>
 8005312:	1e03      	subs	r3, r0, #0
 8005314:	d001      	beq.n	800531a <MX_TIM3_Init+0x76>
 8005316:	f7ff f925 	bl	8004564 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) { Error_Handler(); }
 800531a:	4b1e      	ldr	r3, [pc, #120]	@ (8005394 <MX_TIM3_Init+0xf0>)
 800531c:	0018      	movs	r0, r3
 800531e:	f002 fd0d 	bl	8007d3c <HAL_TIM_PWM_Init>
 8005322:	1e03      	subs	r3, r0, #0
 8005324:	d001      	beq.n	800532a <MX_TIM3_Init+0x86>
 8005326:	f7ff f91d 	bl	8004564 <Error_Handler>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800532a:	1d3b      	adds	r3, r7, #4
 800532c:	2260      	movs	r2, #96	@ 0x60
 800532e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = htim3.Init.Period / 2;
 8005330:	4b18      	ldr	r3, [pc, #96]	@ (8005394 <MX_TIM3_Init+0xf0>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	085a      	lsrs	r2, r3, #1
 8005336:	1d3b      	adds	r3, r7, #4
 8005338:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	2200      	movs	r2, #0
 800533e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	2200      	movs	r2, #0
 8005344:	611a      	str	r2, [r3, #16]

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); }
 8005346:	1d39      	adds	r1, r7, #4
 8005348:	4b12      	ldr	r3, [pc, #72]	@ (8005394 <MX_TIM3_Init+0xf0>)
 800534a:	2200      	movs	r2, #0
 800534c:	0018      	movs	r0, r3
 800534e:	f002 fe05 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 8005352:	1e03      	subs	r3, r0, #0
 8005354:	d001      	beq.n	800535a <MX_TIM3_Init+0xb6>
 8005356:	f7ff f905 	bl	8004564 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) { Error_Handler(); }
 800535a:	1d39      	adds	r1, r7, #4
 800535c:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <MX_TIM3_Init+0xf0>)
 800535e:	2204      	movs	r2, #4
 8005360:	0018      	movs	r0, r3
 8005362:	f002 fdfb 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 8005366:	1e03      	subs	r3, r0, #0
 8005368:	d001      	beq.n	800536e <MX_TIM3_Init+0xca>
 800536a:	f7ff f8fb 	bl	8004564 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) { Error_Handler(); }
 800536e:	1d39      	adds	r1, r7, #4
 8005370:	4b08      	ldr	r3, [pc, #32]	@ (8005394 <MX_TIM3_Init+0xf0>)
 8005372:	220c      	movs	r2, #12
 8005374:	0018      	movs	r0, r3
 8005376:	f002 fdf1 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d001      	beq.n	8005382 <MX_TIM3_Init+0xde>
 800537e:	f7ff f8f1 	bl	8004564 <Error_Handler>

  HAL_TIM_MspPostInit(&htim3);
 8005382:	4b04      	ldr	r3, [pc, #16]	@ (8005394 <MX_TIM3_Init+0xf0>)
 8005384:	0018      	movs	r0, r3
 8005386:	f7ff fa21 	bl	80047cc <HAL_TIM_MspPostInit>
}
 800538a:	46c0      	nop			@ (mov r8, r8)
 800538c:	46bd      	mov	sp, r7
 800538e:	b00c      	add	sp, #48	@ 0x30
 8005390:	bd80      	pop	{r7, pc}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	200002dc 	.word	0x200002dc
 8005398:	40000400 	.word	0x40000400
 800539c:	000003e7 	.word	0x000003e7

080053a0 <MX_TIM16_Init>:
/* TIM16 Initialization */
// Timer Initialization
void MX_TIM16_Init(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b090      	sub	sp, #64	@ 0x40
 80053a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80053a6:	2324      	movs	r3, #36	@ 0x24
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	0018      	movs	r0, r3
 80053ac:	231c      	movs	r3, #28
 80053ae:	001a      	movs	r2, r3
 80053b0:	2100      	movs	r1, #0
 80053b2:	f005 fe9b 	bl	800b0ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80053b6:	1d3b      	adds	r3, r7, #4
 80053b8:	0018      	movs	r0, r3
 80053ba:	2320      	movs	r3, #32
 80053bc:	001a      	movs	r2, r3
 80053be:	2100      	movs	r1, #0
 80053c0:	f005 fe94 	bl	800b0ec <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80053c4:	4b37      	ldr	r3, [pc, #220]	@ (80054a4 <MX_TIM16_Init+0x104>)
 80053c6:	4a38      	ldr	r2, [pc, #224]	@ (80054a8 <MX_TIM16_Init+0x108>)
 80053c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 80053ca:	4b36      	ldr	r3, [pc, #216]	@ (80054a4 <MX_TIM16_Init+0x104>)
 80053cc:	2207      	movs	r2, #7
 80053ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053d0:	4b34      	ldr	r3, [pc, #208]	@ (80054a4 <MX_TIM16_Init+0x104>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80053d6:	4b33      	ldr	r3, [pc, #204]	@ (80054a4 <MX_TIM16_Init+0x104>)
 80053d8:	4a34      	ldr	r2, [pc, #208]	@ (80054ac <MX_TIM16_Init+0x10c>)
 80053da:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053dc:	4b31      	ldr	r3, [pc, #196]	@ (80054a4 <MX_TIM16_Init+0x104>)
 80053de:	2200      	movs	r2, #0
 80053e0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80053e2:	4b30      	ldr	r3, [pc, #192]	@ (80054a4 <MX_TIM16_Init+0x104>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053e8:	4b2e      	ldr	r3, [pc, #184]	@ (80054a4 <MX_TIM16_Init+0x104>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80053ee:	4b2d      	ldr	r3, [pc, #180]	@ (80054a4 <MX_TIM16_Init+0x104>)
 80053f0:	0018      	movs	r0, r3
 80053f2:	f002 fc53 	bl	8007c9c <HAL_TIM_Base_Init>
 80053f6:	1e03      	subs	r3, r0, #0
 80053f8:	d001      	beq.n	80053fe <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80053fa:	f7ff f8b3 	bl	8004564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80053fe:	4b29      	ldr	r3, [pc, #164]	@ (80054a4 <MX_TIM16_Init+0x104>)
 8005400:	0018      	movs	r0, r3
 8005402:	f002 fc9b 	bl	8007d3c <HAL_TIM_PWM_Init>
 8005406:	1e03      	subs	r3, r0, #0
 8005408:	d001      	beq.n	800540e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800540a:	f7ff f8ab 	bl	8004564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800540e:	2124      	movs	r1, #36	@ 0x24
 8005410:	187b      	adds	r3, r7, r1
 8005412:	2260      	movs	r2, #96	@ 0x60
 8005414:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 8005416:	187b      	adds	r3, r7, r1
 8005418:	22f4      	movs	r2, #244	@ 0xf4
 800541a:	32ff      	adds	r2, #255	@ 0xff
 800541c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800541e:	187b      	adds	r3, r7, r1
 8005420:	2200      	movs	r2, #0
 8005422:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005424:	187b      	adds	r3, r7, r1
 8005426:	2200      	movs	r2, #0
 8005428:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800542a:	187b      	adds	r3, r7, r1
 800542c:	2200      	movs	r2, #0
 800542e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005430:	187b      	adds	r3, r7, r1
 8005432:	2200      	movs	r2, #0
 8005434:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8005436:	187b      	adds	r3, r7, r1
 8005438:	2280      	movs	r2, #128	@ 0x80
 800543a:	0092      	lsls	r2, r2, #2
 800543c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800543e:	1879      	adds	r1, r7, r1
 8005440:	4b18      	ldr	r3, [pc, #96]	@ (80054a4 <MX_TIM16_Init+0x104>)
 8005442:	2200      	movs	r2, #0
 8005444:	0018      	movs	r0, r3
 8005446:	f002 fd89 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 800544a:	1e03      	subs	r3, r0, #0
 800544c:	d001      	beq.n	8005452 <MX_TIM16_Init+0xb2>
  {
    Error_Handler();
 800544e:	f7ff f889 	bl	8004564 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005452:	1d3b      	adds	r3, r7, #4
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	2200      	movs	r2, #0
 800545c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800545e:	1d3b      	adds	r3, r7, #4
 8005460:	2200      	movs	r2, #0
 8005462:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 232;
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	22e8      	movs	r2, #232	@ 0xe8
 8005468:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800546a:	1d3b      	adds	r3, r7, #4
 800546c:	2200      	movs	r2, #0
 800546e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	2280      	movs	r2, #128	@ 0x80
 8005474:	0192      	lsls	r2, r2, #6
 8005476:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005478:	1d3b      	adds	r3, r7, #4
 800547a:	2200      	movs	r2, #0
 800547c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800547e:	1d3a      	adds	r2, r7, #4
 8005480:	4b08      	ldr	r3, [pc, #32]	@ (80054a4 <MX_TIM16_Init+0x104>)
 8005482:	0011      	movs	r1, r2
 8005484:	0018      	movs	r0, r3
 8005486:	f003 fae7 	bl	8008a58 <HAL_TIMEx_ConfigBreakDeadTime>
 800548a:	1e03      	subs	r3, r0, #0
 800548c:	d001      	beq.n	8005492 <MX_TIM16_Init+0xf2>
  {
    Error_Handler();
 800548e:	f7ff f869 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8005492:	4b04      	ldr	r3, [pc, #16]	@ (80054a4 <MX_TIM16_Init+0x104>)
 8005494:	0018      	movs	r0, r3
 8005496:	f7ff f999 	bl	80047cc <HAL_TIM_MspPostInit>
}
 800549a:	46c0      	nop			@ (mov r8, r8)
 800549c:	46bd      	mov	sp, r7
 800549e:	b010      	add	sp, #64	@ 0x40
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	20000324 	.word	0x20000324
 80054a8:	40014400 	.word	0x40014400
 80054ac:	000003e7 	.word	0x000003e7

080054b0 <MX_TIM17_Init>:
/* TIM17 Initialization */
// Timer Initialization
void MX_TIM17_Init(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b090      	sub	sp, #64	@ 0x40
 80054b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80054b6:	2324      	movs	r3, #36	@ 0x24
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	0018      	movs	r0, r3
 80054bc:	231c      	movs	r3, #28
 80054be:	001a      	movs	r2, r3
 80054c0:	2100      	movs	r1, #0
 80054c2:	f005 fe13 	bl	800b0ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80054c6:	1d3b      	adds	r3, r7, #4
 80054c8:	0018      	movs	r0, r3
 80054ca:	2320      	movs	r3, #32
 80054cc:	001a      	movs	r2, r3
 80054ce:	2100      	movs	r1, #0
 80054d0:	f005 fe0c 	bl	800b0ec <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80054d4:	4b37      	ldr	r3, [pc, #220]	@ (80055b4 <MX_TIM17_Init+0x104>)
 80054d6:	4a38      	ldr	r2, [pc, #224]	@ (80055b8 <MX_TIM17_Init+0x108>)
 80054d8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7;
 80054da:	4b36      	ldr	r3, [pc, #216]	@ (80055b4 <MX_TIM17_Init+0x104>)
 80054dc:	2207      	movs	r2, #7
 80054de:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054e0:	4b34      	ldr	r3, [pc, #208]	@ (80055b4 <MX_TIM17_Init+0x104>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 80054e6:	4b33      	ldr	r3, [pc, #204]	@ (80055b4 <MX_TIM17_Init+0x104>)
 80054e8:	4a34      	ldr	r2, [pc, #208]	@ (80055bc <MX_TIM17_Init+0x10c>)
 80054ea:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054ec:	4b31      	ldr	r3, [pc, #196]	@ (80055b4 <MX_TIM17_Init+0x104>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80054f2:	4b30      	ldr	r3, [pc, #192]	@ (80055b4 <MX_TIM17_Init+0x104>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054f8:	4b2e      	ldr	r3, [pc, #184]	@ (80055b4 <MX_TIM17_Init+0x104>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80054fe:	4b2d      	ldr	r3, [pc, #180]	@ (80055b4 <MX_TIM17_Init+0x104>)
 8005500:	0018      	movs	r0, r3
 8005502:	f002 fbcb 	bl	8007c9c <HAL_TIM_Base_Init>
 8005506:	1e03      	subs	r3, r0, #0
 8005508:	d001      	beq.n	800550e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800550a:	f7ff f82b 	bl	8004564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800550e:	4b29      	ldr	r3, [pc, #164]	@ (80055b4 <MX_TIM17_Init+0x104>)
 8005510:	0018      	movs	r0, r3
 8005512:	f002 fc13 	bl	8007d3c <HAL_TIM_PWM_Init>
 8005516:	1e03      	subs	r3, r0, #0
 8005518:	d001      	beq.n	800551e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800551a:	f7ff f823 	bl	8004564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800551e:	2124      	movs	r1, #36	@ 0x24
 8005520:	187b      	adds	r3, r7, r1
 8005522:	2260      	movs	r2, #96	@ 0x60
 8005524:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 8005526:	187b      	adds	r3, r7, r1
 8005528:	22f4      	movs	r2, #244	@ 0xf4
 800552a:	32ff      	adds	r2, #255	@ 0xff
 800552c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800552e:	187b      	adds	r3, r7, r1
 8005530:	2200      	movs	r2, #0
 8005532:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005534:	187b      	adds	r3, r7, r1
 8005536:	2200      	movs	r2, #0
 8005538:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800553a:	187b      	adds	r3, r7, r1
 800553c:	2200      	movs	r2, #0
 800553e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005540:	187b      	adds	r3, r7, r1
 8005542:	2200      	movs	r2, #0
 8005544:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8005546:	187b      	adds	r3, r7, r1
 8005548:	2280      	movs	r2, #128	@ 0x80
 800554a:	0092      	lsls	r2, r2, #2
 800554c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800554e:	1879      	adds	r1, r7, r1
 8005550:	4b18      	ldr	r3, [pc, #96]	@ (80055b4 <MX_TIM17_Init+0x104>)
 8005552:	2200      	movs	r2, #0
 8005554:	0018      	movs	r0, r3
 8005556:	f002 fd01 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 800555a:	1e03      	subs	r3, r0, #0
 800555c:	d001      	beq.n	8005562 <MX_TIM17_Init+0xb2>
  {
    Error_Handler();
 800555e:	f7ff f801 	bl	8004564 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005562:	1d3b      	adds	r3, r7, #4
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800556e:	1d3b      	adds	r3, r7, #4
 8005570:	2200      	movs	r2, #0
 8005572:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 232;
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	22e8      	movs	r2, #232	@ 0xe8
 8005578:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800557a:	1d3b      	adds	r3, r7, #4
 800557c:	2200      	movs	r2, #0
 800557e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	2280      	movs	r2, #128	@ 0x80
 8005584:	0192      	lsls	r2, r2, #6
 8005586:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005588:	1d3b      	adds	r3, r7, #4
 800558a:	2200      	movs	r2, #0
 800558c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800558e:	1d3a      	adds	r2, r7, #4
 8005590:	4b08      	ldr	r3, [pc, #32]	@ (80055b4 <MX_TIM17_Init+0x104>)
 8005592:	0011      	movs	r1, r2
 8005594:	0018      	movs	r0, r3
 8005596:	f003 fa5f 	bl	8008a58 <HAL_TIMEx_ConfigBreakDeadTime>
 800559a:	1e03      	subs	r3, r0, #0
 800559c:	d001      	beq.n	80055a2 <MX_TIM17_Init+0xf2>
  {
    Error_Handler();
 800559e:	f7fe ffe1 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80055a2:	4b04      	ldr	r3, [pc, #16]	@ (80055b4 <MX_TIM17_Init+0x104>)
 80055a4:	0018      	movs	r0, r3
 80055a6:	f7ff f911 	bl	80047cc <HAL_TIM_MspPostInit>

}
 80055aa:	46c0      	nop			@ (mov r8, r8)
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b010      	add	sp, #64	@ 0x40
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	46c0      	nop			@ (mov r8, r8)
 80055b4:	2000036c 	.word	0x2000036c
 80055b8:	40014800 	.word	0x40014800
 80055bc:	000003e7 	.word	0x000003e7

080055c0 <SetLightBrightness>:

void SetLightBrightness(uint8_t light, uint8_t brightness)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	0002      	movs	r2, r0
 80055c8:	1dfb      	adds	r3, r7, #7
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	1dbb      	adds	r3, r7, #6
 80055ce:	1c0a      	adds	r2, r1, #0
 80055d0:	701a      	strb	r2, [r3, #0]
    // Ensure brightness is within the range 0 to 100
    if (brightness > 100) {
 80055d2:	1dbb      	adds	r3, r7, #6
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b64      	cmp	r3, #100	@ 0x64
 80055d8:	d902      	bls.n	80055e0 <SetLightBrightness+0x20>
        brightness = 100;
 80055da:	1dbb      	adds	r3, r7, #6
 80055dc:	2264      	movs	r2, #100	@ 0x64
 80055de:	701a      	strb	r2, [r3, #0]
    }

    // Calculate the pulse width based on brightness
    uint16_t pulse_direct = (uint16_t)(brightness * 10); // For TIM3 (0 to 1000)
 80055e0:	1dbb      	adds	r3, r7, #6
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	200e      	movs	r0, #14
 80055e8:	183a      	adds	r2, r7, r0
 80055ea:	1c19      	adds	r1, r3, #0
 80055ec:	0089      	lsls	r1, r1, #2
 80055ee:	18cb      	adds	r3, r1, r3
 80055f0:	18db      	adds	r3, r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]
    uint16_t pulse_inverse = 1000 - pulse_direct;        // For TIM16 and TIM17
 80055f4:	230c      	movs	r3, #12
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	183a      	adds	r2, r7, r0
 80055fa:	8812      	ldrh	r2, [r2, #0]
 80055fc:	21fa      	movs	r1, #250	@ 0xfa
 80055fe:	0089      	lsls	r1, r1, #2
 8005600:	1a8a      	subs	r2, r1, r2
 8005602:	801a      	strh	r2, [r3, #0]

    // Set the duty cycle for the specified light
    switch (light) {
 8005604:	1dfb      	adds	r3, r7, #7
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d01d      	beq.n	8005648 <SetLightBrightness+0x88>
 800560c:	dc23      	bgt.n	8005656 <SetLightBrightness+0x96>
 800560e:	2b03      	cmp	r3, #3
 8005610:	d013      	beq.n	800563a <SetLightBrightness+0x7a>
 8005612:	dc20      	bgt.n	8005656 <SetLightBrightness+0x96>
 8005614:	2b01      	cmp	r3, #1
 8005616:	d002      	beq.n	800561e <SetLightBrightness+0x5e>
 8005618:	2b02      	cmp	r3, #2
 800561a:	d007      	beq.n	800562c <SetLightBrightness+0x6c>
            __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, pulse_inverse);
            break;

        default: // Invalid light number
            // You could handle this with an error or ignore it
            break;
 800561c:	e01b      	b.n	8005656 <SetLightBrightness+0x96>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse_direct);
 800561e:	4b10      	ldr	r3, [pc, #64]	@ (8005660 <SetLightBrightness+0xa0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	220e      	movs	r2, #14
 8005624:	18ba      	adds	r2, r7, r2
 8005626:	8812      	ldrh	r2, [r2, #0]
 8005628:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800562a:	e015      	b.n	8005658 <SetLightBrightness+0x98>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse_direct);
 800562c:	4b0c      	ldr	r3, [pc, #48]	@ (8005660 <SetLightBrightness+0xa0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	220e      	movs	r2, #14
 8005632:	18ba      	adds	r2, r7, r2
 8005634:	8812      	ldrh	r2, [r2, #0]
 8005636:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8005638:	e00e      	b.n	8005658 <SetLightBrightness+0x98>
            __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, pulse_inverse);
 800563a:	4b0a      	ldr	r3, [pc, #40]	@ (8005664 <SetLightBrightness+0xa4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	220c      	movs	r2, #12
 8005640:	18ba      	adds	r2, r7, r2
 8005642:	8812      	ldrh	r2, [r2, #0]
 8005644:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8005646:	e007      	b.n	8005658 <SetLightBrightness+0x98>
            __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, pulse_inverse);
 8005648:	4b07      	ldr	r3, [pc, #28]	@ (8005668 <SetLightBrightness+0xa8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	220c      	movs	r2, #12
 800564e:	18ba      	adds	r2, r7, r2
 8005650:	8812      	ldrh	r2, [r2, #0]
 8005652:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8005654:	e000      	b.n	8005658 <SetLightBrightness+0x98>
            break;
 8005656:	46c0      	nop			@ (mov r8, r8)
    }
}
 8005658:	46c0      	nop			@ (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b004      	add	sp, #16
 800565e:	bd80      	pop	{r7, pc}
 8005660:	200002dc 	.word	0x200002dc
 8005664:	20000324 	.word	0x20000324
 8005668:	2000036c 	.word	0x2000036c

0800566c <HAL_UART_RxCpltCallback>:
uint8_t tempBuffer[1];             // Temporary buffer for single-byte reception
volatile uint16_t writeIndex = 0;  // Write pointer for the ring buffer
volatile uint16_t readIndex = 0;   // Read pointer for the ring buffer

// UART callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {  // Update as per your USART instance
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a10      	ldr	r2, [pc, #64]	@ (80056bc <HAL_UART_RxCpltCallback+0x50>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d119      	bne.n	80056b2 <HAL_UART_RxCpltCallback+0x46>
        // Store the received byte in the ring buffer
        rxBuffer[writeIndex++] = tempBuffer[0];
 800567e:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <HAL_UART_RxCpltCallback+0x54>)
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	b291      	uxth	r1, r2
 8005688:	4a0d      	ldr	r2, [pc, #52]	@ (80056c0 <HAL_UART_RxCpltCallback+0x54>)
 800568a:	8011      	strh	r1, [r2, #0]
 800568c:	001a      	movs	r2, r3
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <HAL_UART_RxCpltCallback+0x58>)
 8005690:	7819      	ldrb	r1, [r3, #0]
 8005692:	4b0d      	ldr	r3, [pc, #52]	@ (80056c8 <HAL_UART_RxCpltCallback+0x5c>)
 8005694:	5499      	strb	r1, [r3, r2]
        writeIndex %= RX_BUFFER_SIZE; // Wrap around if buffer is full
 8005696:	4b0a      	ldr	r3, [pc, #40]	@ (80056c0 <HAL_UART_RxCpltCallback+0x54>)
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	22ff      	movs	r2, #255	@ 0xff
 800569e:	4013      	ands	r3, r2
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <HAL_UART_RxCpltCallback+0x54>)
 80056a4:	801a      	strh	r2, [r3, #0]

        // Restart UART reception
        HAL_UART_Receive_IT(huart, tempBuffer, 1);
 80056a6:	4907      	ldr	r1, [pc, #28]	@ (80056c4 <HAL_UART_RxCpltCallback+0x58>)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	0018      	movs	r0, r3
 80056ae:	f003 fb48 	bl	8008d42 <HAL_UART_Receive_IT>
    }
}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b002      	add	sp, #8
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	40004800 	.word	0x40004800
 80056c0:	20000582 	.word	0x20000582
 80056c4:	20000580 	.word	0x20000580
 80056c8:	20000480 	.word	0x20000480

080056cc <processData>:

// Function to process received data
void processData(UART_HandleTypeDef *huart) {
 80056cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ce:	46c6      	mov	lr, r8
 80056d0:	b500      	push	{lr}
 80056d2:	b08e      	sub	sp, #56	@ 0x38
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	61f8      	str	r0, [r7, #28]
    static uint8_t parsingBuffer[RX_BUFFER_SIZE]; // Buffer to store incoming data
    static uint16_t parsingIndex = 0;            // Index for parsing buffer

    // Read the data byte by byte from the ring buffer
    while (readIndex != writeIndex) {
 80056d8:	e092      	b.n	8005800 <processData+0x134>
        uint8_t data = rxBuffer[readIndex++];  // Read a byte from the ring buffer
 80056da:	4b51      	ldr	r3, [pc, #324]	@ (8005820 <processData+0x154>)
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	b291      	uxth	r1, r2
 80056e4:	4a4e      	ldr	r2, [pc, #312]	@ (8005820 <processData+0x154>)
 80056e6:	8011      	strh	r1, [r2, #0]
 80056e8:	0019      	movs	r1, r3
 80056ea:	201f      	movs	r0, #31
 80056ec:	2618      	movs	r6, #24
 80056ee:	1983      	adds	r3, r0, r6
 80056f0:	19db      	adds	r3, r3, r7
 80056f2:	4a4c      	ldr	r2, [pc, #304]	@ (8005824 <processData+0x158>)
 80056f4:	5c52      	ldrb	r2, [r2, r1]
 80056f6:	701a      	strb	r2, [r3, #0]
        readIndex %= RX_BUFFER_SIZE;          // Wrap around if needed
 80056f8:	4b49      	ldr	r3, [pc, #292]	@ (8005820 <processData+0x154>)
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	22ff      	movs	r2, #255	@ 0xff
 8005700:	4013      	ands	r3, r2
 8005702:	b29a      	uxth	r2, r3
 8005704:	4b46      	ldr	r3, [pc, #280]	@ (8005820 <processData+0x154>)
 8005706:	801a      	strh	r2, [r3, #0]

        // Store received data in the parsing buffer
        parsingBuffer[parsingIndex++] = data;
 8005708:	4b47      	ldr	r3, [pc, #284]	@ (8005828 <processData+0x15c>)
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	b291      	uxth	r1, r2
 8005710:	4a45      	ldr	r2, [pc, #276]	@ (8005828 <processData+0x15c>)
 8005712:	8011      	strh	r1, [r2, #0]
 8005714:	0019      	movs	r1, r3
 8005716:	4b45      	ldr	r3, [pc, #276]	@ (800582c <processData+0x160>)
 8005718:	1982      	adds	r2, r0, r6
 800571a:	19d2      	adds	r2, r2, r7
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	545a      	strb	r2, [r3, r1]

        // Check for newline character indicating end of message
        if (data == '\n') {
 8005720:	1983      	adds	r3, r0, r6
 8005722:	19db      	adds	r3, r3, r7
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b0a      	cmp	r3, #10
 8005728:	d16a      	bne.n	8005800 <processData+0x134>
            parsingBuffer[parsingIndex] = '\0'; // Null-terminate the string
 800572a:	4b3f      	ldr	r3, [pc, #252]	@ (8005828 <processData+0x15c>)
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	001a      	movs	r2, r3
 8005730:	4b3e      	ldr	r3, [pc, #248]	@ (800582c <processData+0x160>)
 8005732:	2100      	movs	r1, #0
 8005734:	5499      	strb	r1, [r3, r2]

            // Extract data between '!' and '\n'
            char *start = strchr((char *)parsingBuffer, '!'); // Find the start delimiter
 8005736:	4b3d      	ldr	r3, [pc, #244]	@ (800582c <processData+0x160>)
 8005738:	2121      	movs	r1, #33	@ 0x21
 800573a:	0018      	movs	r0, r3
 800573c:	f005 fcde 	bl	800b0fc <strchr>
 8005740:	0003      	movs	r3, r0
 8005742:	633b      	str	r3, [r7, #48]	@ 0x30
            char *end = strrchr((char *)parsingBuffer, '\n'); // Find the end delimiter
 8005744:	4b39      	ldr	r3, [pc, #228]	@ (800582c <processData+0x160>)
 8005746:	210a      	movs	r1, #10
 8005748:	0018      	movs	r0, r3
 800574a:	f005 fd0a 	bl	800b162 <strrchr>
 800574e:	0003      	movs	r3, r0
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (start != NULL && end != NULL && start < end) {
 8005752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005754:	2b00      	cmp	r3, #0
 8005756:	d050      	beq.n	80057fa <processData+0x12e>
 8005758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d04d      	beq.n	80057fa <processData+0x12e>
 800575e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005762:	429a      	cmp	r2, r3
 8005764:	d249      	bcs.n	80057fa <processData+0x12e>
 8005766:	466b      	mov	r3, sp
 8005768:	4698      	mov	r8, r3
                size_t length = end - start - 1;  // Calculate the length of the message
 800576a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800576c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t txBuffer[length + 1];    // Buffer for parsed data
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	3301      	adds	r3, #1
 8005778:	001a      	movs	r2, r3
 800577a:	3a01      	subs	r2, #1
 800577c:	627a      	str	r2, [r7, #36]	@ 0x24
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	2200      	movs	r2, #0
 8005782:	60fa      	str	r2, [r7, #12]
 8005784:	68b8      	ldr	r0, [r7, #8]
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	0002      	movs	r2, r0
 800578a:	0f52      	lsrs	r2, r2, #29
 800578c:	000e      	movs	r6, r1
 800578e:	00f5      	lsls	r5, r6, #3
 8005790:	4315      	orrs	r5, r2
 8005792:	0002      	movs	r2, r0
 8005794:	00d4      	lsls	r4, r2, #3
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	2200      	movs	r2, #0
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	6838      	ldr	r0, [r7, #0]
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	0002      	movs	r2, r0
 80057a2:	0f52      	lsrs	r2, r2, #29
 80057a4:	000e      	movs	r6, r1
 80057a6:	00f6      	lsls	r6, r6, #3
 80057a8:	617e      	str	r6, [r7, #20]
 80057aa:	697e      	ldr	r6, [r7, #20]
 80057ac:	4316      	orrs	r6, r2
 80057ae:	617e      	str	r6, [r7, #20]
 80057b0:	0002      	movs	r2, r0
 80057b2:	00d2      	lsls	r2, r2, #3
 80057b4:	613a      	str	r2, [r7, #16]
 80057b6:	3307      	adds	r3, #7
 80057b8:	08db      	lsrs	r3, r3, #3
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	466a      	mov	r2, sp
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	469d      	mov	sp, r3
 80057c2:	466b      	mov	r3, sp
 80057c4:	3300      	adds	r3, #0
 80057c6:	623b      	str	r3, [r7, #32]
                strncpy((char *)txBuffer, start + 1, length); // Copy the message
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	1c59      	adds	r1, r3, #1
 80057cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	0018      	movs	r0, r3
 80057d2:	f005 fcb2 	bl	800b13a <strncpy>
                txBuffer[length] = '\0';        // Null-terminate the string
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	18d3      	adds	r3, r2, r3
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]

                // Send an acknowledgment message before parsing
                sendUARTMessage("On it\n");
 80057e0:	4b13      	ldr	r3, [pc, #76]	@ (8005830 <processData+0x164>)
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7fe fa4e 	bl	8003c84 <sendUARTMessage>
                sendUARTMessage(txBuffer);
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	0018      	movs	r0, r3
 80057ec:	f7fe fa4a 	bl	8003c84 <sendUARTMessage>
                // Pass the parsed data to the parseCommand function
                parseCommand((char *)txBuffer);
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7fd fd3e 	bl	8003274 <parseCommand>
 80057f8:	46c5      	mov	sp, r8


            }

            // Reset the parsing buffer for the next message
            parsingIndex = 0;
 80057fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005828 <processData+0x15c>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	801a      	strh	r2, [r3, #0]
    while (readIndex != writeIndex) {
 8005800:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <processData+0x154>)
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29a      	uxth	r2, r3
 8005806:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <processData+0x168>)
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	429a      	cmp	r2, r3
 800580e:	d000      	beq.n	8005812 <processData+0x146>
 8005810:	e763      	b.n	80056da <processData+0xe>
        }
    }
}
 8005812:	46c0      	nop			@ (mov r8, r8)
 8005814:	46c0      	nop			@ (mov r8, r8)
 8005816:	46bd      	mov	sp, r7
 8005818:	b00e      	add	sp, #56	@ 0x38
 800581a:	bc80      	pop	{r7}
 800581c:	46b8      	mov	r8, r7
 800581e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005820:	20000584 	.word	0x20000584
 8005824:	20000480 	.word	0x20000480
 8005828:	20000586 	.word	0x20000586
 800582c:	20000588 	.word	0x20000588
 8005830:	0800d5d0 	.word	0x0800d5d0
 8005834:	20000582 	.word	0x20000582

08005838 <MX_USART3_UART_Init>:




void MX_USART3_UART_Init(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800583c:	4b14      	ldr	r3, [pc, #80]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 800583e:	4a15      	ldr	r2, [pc, #84]	@ (8005894 <MX_USART3_UART_Init+0x5c>)
 8005840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005842:	4b13      	ldr	r3, [pc, #76]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 8005844:	2296      	movs	r2, #150	@ 0x96
 8005846:	0192      	lsls	r2, r2, #6
 8005848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800584a:	4b11      	ldr	r3, [pc, #68]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 800584c:	2200      	movs	r2, #0
 800584e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005850:	4b0f      	ldr	r3, [pc, #60]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 8005852:	2200      	movs	r2, #0
 8005854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005856:	4b0e      	ldr	r3, [pc, #56]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 8005858:	2200      	movs	r2, #0
 800585a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800585c:	4b0c      	ldr	r3, [pc, #48]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 800585e:	220c      	movs	r2, #12
 8005860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005862:	4b0b      	ldr	r3, [pc, #44]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 8005864:	2200      	movs	r2, #0
 8005866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005868:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 800586a:	2200      	movs	r2, #0
 800586c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800586e:	4b08      	ldr	r3, [pc, #32]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 8005870:	2200      	movs	r2, #0
 8005872:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005874:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 8005876:	2200      	movs	r2, #0
 8005878:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800587a:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <MX_USART3_UART_Init+0x58>)
 800587c:	0018      	movs	r0, r3
 800587e:	f003 f96d 	bl	8008b5c <HAL_UART_Init>
 8005882:	1e03      	subs	r3, r0, #0
 8005884:	d001      	beq.n	800588a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005886:	f7fe fe6d 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800588a:	46c0      	nop			@ (mov r8, r8)
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	200003f8 	.word	0x200003f8
 8005894:	40004800 	.word	0x40004800

08005898 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005898:	480d      	ldr	r0, [pc, #52]	@ (80058d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800589a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800589c:	f7ff fa1a 	bl	8004cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058a0:	480c      	ldr	r0, [pc, #48]	@ (80058d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80058a2:	490d      	ldr	r1, [pc, #52]	@ (80058d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80058a4:	4a0d      	ldr	r2, [pc, #52]	@ (80058dc <LoopForever+0xe>)
  movs r3, #0
 80058a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058a8:	e002      	b.n	80058b0 <LoopCopyDataInit>

080058aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058ae:	3304      	adds	r3, #4

080058b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058b4:	d3f9      	bcc.n	80058aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058b6:	4a0a      	ldr	r2, [pc, #40]	@ (80058e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80058b8:	4c0a      	ldr	r4, [pc, #40]	@ (80058e4 <LoopForever+0x16>)
  movs r3, #0
 80058ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058bc:	e001      	b.n	80058c2 <LoopFillZerobss>

080058be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058c0:	3204      	adds	r2, #4

080058c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058c4:	d3fb      	bcc.n	80058be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80058c6:	f005 fd15 	bl	800b2f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80058ca:	f7fe fd13 	bl	80042f4 <main>

080058ce <LoopForever>:

LoopForever:
    b LoopForever
 80058ce:	e7fe      	b.n	80058ce <LoopForever>
  ldr   r0, =_estack
 80058d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80058d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058d8:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80058dc:	0800db44 	.word	0x0800db44
  ldr r2, =_sbss
 80058e0:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80058e4:	200007d8 	.word	0x200007d8

080058e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80058e8:	e7fe      	b.n	80058e8 <ADC1_COMP_IRQHandler>
	...

080058ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058f0:	4b07      	ldr	r3, [pc, #28]	@ (8005910 <HAL_Init+0x24>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	4b06      	ldr	r3, [pc, #24]	@ (8005910 <HAL_Init+0x24>)
 80058f6:	2110      	movs	r1, #16
 80058f8:	430a      	orrs	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80058fc:	2003      	movs	r0, #3
 80058fe:	f000 f809 	bl	8005914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005902:	f7fe fe35 	bl	8004570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	0018      	movs	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	40022000 	.word	0x40022000

08005914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800591c:	4b14      	ldr	r3, [pc, #80]	@ (8005970 <HAL_InitTick+0x5c>)
 800591e:	681c      	ldr	r4, [r3, #0]
 8005920:	4b14      	ldr	r3, [pc, #80]	@ (8005974 <HAL_InitTick+0x60>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	0019      	movs	r1, r3
 8005926:	23fa      	movs	r3, #250	@ 0xfa
 8005928:	0098      	lsls	r0, r3, #2
 800592a:	f7fa fc13 	bl	8000154 <__udivsi3>
 800592e:	0003      	movs	r3, r0
 8005930:	0019      	movs	r1, r3
 8005932:	0020      	movs	r0, r4
 8005934:	f7fa fc0e 	bl	8000154 <__udivsi3>
 8005938:	0003      	movs	r3, r0
 800593a:	0018      	movs	r0, r3
 800593c:	f001 f8a3 	bl	8006a86 <HAL_SYSTICK_Config>
 8005940:	1e03      	subs	r3, r0, #0
 8005942:	d001      	beq.n	8005948 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e00f      	b.n	8005968 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b03      	cmp	r3, #3
 800594c:	d80b      	bhi.n	8005966 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	2301      	movs	r3, #1
 8005952:	425b      	negs	r3, r3
 8005954:	2200      	movs	r2, #0
 8005956:	0018      	movs	r0, r3
 8005958:	f001 f860 	bl	8006a1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800595c:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <HAL_InitTick+0x64>)
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e000      	b.n	8005968 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	b003      	add	sp, #12
 800596e:	bd90      	pop	{r4, r7, pc}
 8005970:	20000048 	.word	0x20000048
 8005974:	20000050 	.word	0x20000050
 8005978:	2000004c 	.word	0x2000004c

0800597c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005980:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <HAL_IncTick+0x1c>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	001a      	movs	r2, r3
 8005986:	4b05      	ldr	r3, [pc, #20]	@ (800599c <HAL_IncTick+0x20>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	18d2      	adds	r2, r2, r3
 800598c:	4b03      	ldr	r3, [pc, #12]	@ (800599c <HAL_IncTick+0x20>)
 800598e:	601a      	str	r2, [r3, #0]
}
 8005990:	46c0      	nop			@ (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	46c0      	nop			@ (mov r8, r8)
 8005998:	20000050 	.word	0x20000050
 800599c:	20000688 	.word	0x20000688

080059a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  return uwTick;
 80059a4:	4b02      	ldr	r3, [pc, #8]	@ (80059b0 <HAL_GetTick+0x10>)
 80059a6:	681b      	ldr	r3, [r3, #0]
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	20000688 	.word	0x20000688

080059b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059bc:	f7ff fff0 	bl	80059a0 <HAL_GetTick>
 80059c0:	0003      	movs	r3, r0
 80059c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	d005      	beq.n	80059da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059ce:	4b0a      	ldr	r3, [pc, #40]	@ (80059f8 <HAL_Delay+0x44>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	001a      	movs	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80059da:	46c0      	nop			@ (mov r8, r8)
 80059dc:	f7ff ffe0 	bl	80059a0 <HAL_GetTick>
 80059e0:	0002      	movs	r2, r0
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d8f7      	bhi.n	80059dc <HAL_Delay+0x28>
  {
  }
}
 80059ec:	46c0      	nop			@ (mov r8, r8)
 80059ee:	46c0      	nop			@ (mov r8, r8)
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b004      	add	sp, #16
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	20000050 	.word	0x20000050

080059fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e0f0      	b.n	8005bf0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	5c9b      	ldrb	r3, [r3, r2]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d103      	bne.n	8005a22 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f7fe fdcb 	bl	80045b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a32:	f7ff ffb5 	bl	80059a0 <HAL_GetTick>
 8005a36:	0003      	movs	r3, r0
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005a3a:	e013      	b.n	8005a64 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a3c:	f7ff ffb0 	bl	80059a0 <HAL_GetTick>
 8005a40:	0002      	movs	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b0a      	cmp	r3, #10
 8005a48:	d90c      	bls.n	8005a64 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	2280      	movs	r2, #128	@ 0x80
 8005a50:	0292      	lsls	r2, r2, #10
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	2105      	movs	r1, #5
 8005a5e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0c5      	b.n	8005bf0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d0e5      	beq.n	8005a3c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2102      	movs	r1, #2
 8005a7c:	438a      	bics	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a80:	f7ff ff8e 	bl	80059a0 <HAL_GetTick>
 8005a84:	0003      	movs	r3, r0
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005a88:	e013      	b.n	8005ab2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a8a:	f7ff ff89 	bl	80059a0 <HAL_GetTick>
 8005a8e:	0002      	movs	r2, r0
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b0a      	cmp	r3, #10
 8005a96:	d90c      	bls.n	8005ab2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9c:	2280      	movs	r2, #128	@ 0x80
 8005a9e:	0292      	lsls	r2, r2, #10
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	2105      	movs	r1, #5
 8005aac:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e09e      	b.n	8005bf0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	4013      	ands	r3, r2
 8005abc:	d1e5      	bne.n	8005a8a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	7e1b      	ldrb	r3, [r3, #24]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d108      	bne.n	8005ad8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2180      	movs	r1, #128	@ 0x80
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	e007      	b.n	8005ae8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2180      	movs	r1, #128	@ 0x80
 8005ae4:	438a      	bics	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	7e5b      	ldrb	r3, [r3, #25]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d108      	bne.n	8005b02 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2140      	movs	r1, #64	@ 0x40
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e007      	b.n	8005b12 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2140      	movs	r1, #64	@ 0x40
 8005b0e:	438a      	bics	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	7e9b      	ldrb	r3, [r3, #26]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d108      	bne.n	8005b2c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2120      	movs	r1, #32
 8005b26:	430a      	orrs	r2, r1
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e007      	b.n	8005b3c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2120      	movs	r1, #32
 8005b38:	438a      	bics	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	7edb      	ldrb	r3, [r3, #27]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d108      	bne.n	8005b56 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2110      	movs	r1, #16
 8005b50:	438a      	bics	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	e007      	b.n	8005b66 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2110      	movs	r1, #16
 8005b62:	430a      	orrs	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	7f1b      	ldrb	r3, [r3, #28]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d108      	bne.n	8005b80 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2108      	movs	r1, #8
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e007      	b.n	8005b90 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2108      	movs	r1, #8
 8005b8c:	438a      	bics	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	7f5b      	ldrb	r3, [r3, #29]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d108      	bne.n	8005baa <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e007      	b.n	8005bba <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2104      	movs	r1, #4
 8005bb6:	438a      	bics	r2, r1
 8005bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	0011      	movs	r1, r2
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	1e5a      	subs	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	2101      	movs	r1, #1
 8005bec:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b004      	add	sp, #16
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e018      	b.n	8005c3c <HAL_CAN_DeInit+0x44>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f000 f951 	bl	8005eb4 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7fe fd25 	bl	8004664 <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2180      	movs	r1, #128	@ 0x80
 8005c26:	0209      	lsls	r1, r1, #8
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	2100      	movs	r1, #0
 8005c38:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b002      	add	sp, #8
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c54:	2013      	movs	r0, #19
 8005c56:	183b      	adds	r3, r7, r0
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	2120      	movs	r1, #32
 8005c5c:	5c52      	ldrb	r2, [r2, r1]
 8005c5e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8005c60:	0002      	movs	r2, r0
 8005c62:	18bb      	adds	r3, r7, r2
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d004      	beq.n	8005c74 <HAL_CAN_ConfigFilter+0x30>
 8005c6a:	18bb      	adds	r3, r7, r2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d000      	beq.n	8005c74 <HAL_CAN_ConfigFilter+0x30>
 8005c72:	e0cd      	b.n	8005e10 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	2380      	movs	r3, #128	@ 0x80
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	58d3      	ldr	r3, [r2, r3]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	0011      	movs	r1, r2
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	2380      	movs	r3, #128	@ 0x80
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	221f      	movs	r2, #31
 8005c90:	4013      	ands	r3, r2
 8005c92:	2201      	movs	r2, #1
 8005c94:	409a      	lsls	r2, r3
 8005c96:	0013      	movs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	2387      	movs	r3, #135	@ 0x87
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	58d3      	ldr	r3, [r2, r3]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	43d2      	mvns	r2, r2
 8005ca6:	401a      	ands	r2, r3
 8005ca8:	0011      	movs	r1, r2
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	2387      	movs	r3, #135	@ 0x87
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d129      	bne.n	8005d0e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	2383      	movs	r3, #131	@ 0x83
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	58d3      	ldr	r3, [r2, r3]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	43d2      	mvns	r2, r2
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	0011      	movs	r1, r2
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	2383      	movs	r3, #131	@ 0x83
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005ce4:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	3248      	adds	r2, #72	@ 0x48
 8005cea:	00d2      	lsls	r2, r2, #3
 8005cec:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d00:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	3348      	adds	r3, #72	@ 0x48
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	18cb      	adds	r3, r1, r3
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d128      	bne.n	8005d68 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	2383      	movs	r3, #131	@ 0x83
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	58d2      	ldr	r2, [r2, r3]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	0011      	movs	r1, r2
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	2383      	movs	r3, #131	@ 0x83
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	041b      	lsls	r3, r3, #16
 8005d38:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005d3e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	3248      	adds	r2, #72	@ 0x48
 8005d44:	00d2      	lsls	r2, r2, #3
 8005d46:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	041b      	lsls	r3, r3, #16
 8005d54:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d5c:	6979      	ldr	r1, [r7, #20]
 8005d5e:	3348      	adds	r3, #72	@ 0x48
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	18cb      	adds	r3, r1, r3
 8005d64:	3304      	adds	r3, #4
 8005d66:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10c      	bne.n	8005d8a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	2381      	movs	r3, #129	@ 0x81
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	58d3      	ldr	r3, [r2, r3]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	43d2      	mvns	r2, r2
 8005d7c:	401a      	ands	r2, r3
 8005d7e:	0011      	movs	r1, r2
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	2381      	movs	r3, #129	@ 0x81
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	50d1      	str	r1, [r2, r3]
 8005d88:	e00a      	b.n	8005da0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	2381      	movs	r3, #129	@ 0x81
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	58d2      	ldr	r2, [r2, r3]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	0011      	movs	r1, r2
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	2381      	movs	r3, #129	@ 0x81
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10c      	bne.n	8005dc2 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	2385      	movs	r3, #133	@ 0x85
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	58d3      	ldr	r3, [r2, r3]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	43d2      	mvns	r2, r2
 8005db4:	401a      	ands	r2, r3
 8005db6:	0011      	movs	r1, r2
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	2385      	movs	r3, #133	@ 0x85
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	50d1      	str	r1, [r2, r3]
 8005dc0:	e00a      	b.n	8005dd8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	2385      	movs	r3, #133	@ 0x85
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	58d2      	ldr	r2, [r2, r3]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	0011      	movs	r1, r2
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	2385      	movs	r3, #133	@ 0x85
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d10a      	bne.n	8005df6 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	2387      	movs	r3, #135	@ 0x87
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	58d2      	ldr	r2, [r2, r3]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	0011      	movs	r1, r2
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	2387      	movs	r3, #135	@ 0x87
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	2380      	movs	r3, #128	@ 0x80
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	58d3      	ldr	r3, [r2, r3]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4393      	bics	r3, r2
 8005e02:	0019      	movs	r1, r3
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	2380      	movs	r3, #128	@ 0x80
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e007      	b.n	8005e20 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e14:	2280      	movs	r2, #128	@ 0x80
 8005e16:	02d2      	lsls	r2, r2, #11
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
  }
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b006      	add	sp, #24
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	5c9b      	ldrb	r3, [r3, r2]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d12f      	bne.n	8005e9c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	2102      	movs	r1, #2
 8005e42:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2101      	movs	r1, #1
 8005e50:	438a      	bics	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e54:	f7ff fda4 	bl	80059a0 <HAL_GetTick>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005e5c:	e013      	b.n	8005e86 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e5e:	f7ff fd9f 	bl	80059a0 <HAL_GetTick>
 8005e62:	0002      	movs	r2, r0
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b0a      	cmp	r3, #10
 8005e6a:	d90c      	bls.n	8005e86 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	2280      	movs	r2, #128	@ 0x80
 8005e72:	0292      	lsls	r2, r2, #10
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	2105      	movs	r1, #5
 8005e80:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e012      	b.n	8005eac <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d1e5      	bne.n	8005e5e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e007      	b.n	8005eac <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea0:	2280      	movs	r2, #128	@ 0x80
 8005ea2:	0312      	lsls	r2, r2, #12
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
  }
}
 8005eac:	0018      	movs	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b004      	add	sp, #16
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	5c9b      	ldrb	r3, [r3, r2]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d134      	bne.n	8005f32 <HAL_CAN_Stop+0x7e>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ed8:	f7ff fd62 	bl	80059a0 <HAL_GetTick>
 8005edc:	0003      	movs	r3, r0
 8005ede:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005ee0:	e013      	b.n	8005f0a <HAL_CAN_Stop+0x56>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005ee2:	f7ff fd5d 	bl	80059a0 <HAL_GetTick>
 8005ee6:	0002      	movs	r2, r0
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b0a      	cmp	r3, #10
 8005eee:	d90c      	bls.n	8005f0a <HAL_CAN_Stop+0x56>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	2280      	movs	r2, #128	@ 0x80
 8005ef6:	0292      	lsls	r2, r2, #10
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	2105      	movs	r1, #5
 8005f04:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e01b      	b.n	8005f42 <HAL_CAN_Stop+0x8e>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	4013      	ands	r3, r2
 8005f14:	d0e5      	beq.n	8005ee2 <HAL_CAN_Stop+0x2e>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2102      	movs	r1, #2
 8005f22:	438a      	bics	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e007      	b.n	8005f42 <HAL_CAN_Stop+0x8e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	2280      	movs	r2, #128	@ 0x80
 8005f38:	0352      	lsls	r2, r2, #13
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
  }
}
 8005f42:	0018      	movs	r0, r3
 8005f44:	46bd      	mov	sp, r7
 8005f46:	b004      	add	sp, #16
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b088      	sub	sp, #32
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
 8005f56:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f58:	201f      	movs	r0, #31
 8005f5a:	183b      	adds	r3, r7, r0
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	2120      	movs	r1, #32
 8005f60:	5c52      	ldrb	r2, [r2, r1]
 8005f62:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f6c:	183b      	adds	r3, r7, r0
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d004      	beq.n	8005f7e <HAL_CAN_AddTxMessage+0x34>
 8005f74:	183b      	adds	r3, r7, r0
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d000      	beq.n	8005f7e <HAL_CAN_AddTxMessage+0x34>
 8005f7c:	e0ab      	b.n	80060d6 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	2380      	movs	r3, #128	@ 0x80
 8005f82:	04db      	lsls	r3, r3, #19
 8005f84:	4013      	ands	r3, r2
 8005f86:	d10a      	bne.n	8005f9e <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	2380      	movs	r3, #128	@ 0x80
 8005f8c:	051b      	lsls	r3, r3, #20
 8005f8e:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005f90:	d105      	bne.n	8005f9e <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	2380      	movs	r3, #128	@ 0x80
 8005f96:	055b      	lsls	r3, r3, #21
 8005f98:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005f9a:	d100      	bne.n	8005f9e <HAL_CAN_AddTxMessage+0x54>
 8005f9c:	e092      	b.n	80060c4 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	0e1b      	lsrs	r3, r3, #24
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005fa8:	2201      	movs	r2, #1
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	409a      	lsls	r2, r3
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10c      	bne.n	8005fd4 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4311      	orrs	r1, r2
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	3218      	adds	r2, #24
 8005fce:	0112      	lsls	r2, r2, #4
 8005fd0:	50d1      	str	r1, [r2, r3]
 8005fd2:	e00f      	b.n	8005ff4 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8005fea:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	3218      	adds	r2, #24
 8005ff0:	0112      	lsls	r2, r2, #4
 8005ff2:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6819      	ldr	r1, [r3, #0]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	3318      	adds	r3, #24
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	18cb      	adds	r3, r1, r3
 8006004:	3304      	adds	r3, #4
 8006006:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	7d1b      	ldrb	r3, [r3, #20]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d112      	bne.n	8006036 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	3318      	adds	r3, #24
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	18d3      	adds	r3, r2, r3
 800601c:	3304      	adds	r3, #4
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6819      	ldr	r1, [r3, #0]
 8006024:	2380      	movs	r3, #128	@ 0x80
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	431a      	orrs	r2, r3
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	3318      	adds	r3, #24
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	18cb      	adds	r3, r1, r3
 8006032:	3304      	adds	r3, #4
 8006034:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3307      	adds	r3, #7
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	061a      	lsls	r2, r3, #24
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3306      	adds	r3, #6
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	041b      	lsls	r3, r3, #16
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3305      	adds	r3, #5
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3304      	adds	r3, #4
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	0019      	movs	r1, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	6979      	ldr	r1, [r7, #20]
 8006062:	23c6      	movs	r3, #198	@ 0xc6
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	0109      	lsls	r1, r1, #4
 8006068:	1841      	adds	r1, r0, r1
 800606a:	18cb      	adds	r3, r1, r3
 800606c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3303      	adds	r3, #3
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	061a      	lsls	r2, r3, #24
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3302      	adds	r3, #2
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	041b      	lsls	r3, r3, #16
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3301      	adds	r3, #1
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	0019      	movs	r1, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	6979      	ldr	r1, [r7, #20]
 8006098:	23c4      	movs	r3, #196	@ 0xc4
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	0109      	lsls	r1, r1, #4
 800609e:	1841      	adds	r1, r0, r1
 80060a0:	18cb      	adds	r3, r1, r3
 80060a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	3218      	adds	r2, #24
 80060ac:	0112      	lsls	r2, r2, #4
 80060ae:	58d2      	ldr	r2, [r2, r3]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2101      	movs	r1, #1
 80060b6:	4311      	orrs	r1, r2
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	3218      	adds	r2, #24
 80060bc:	0112      	lsls	r2, r2, #4
 80060be:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	e010      	b.n	80060e6 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c8:	2280      	movs	r2, #128	@ 0x80
 80060ca:	0392      	lsls	r2, r2, #14
 80060cc:	431a      	orrs	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e007      	b.n	80060e6 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	2280      	movs	r2, #128	@ 0x80
 80060dc:	02d2      	lsls	r2, r2, #11
 80060de:	431a      	orrs	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
  }
}
 80060e6:	0018      	movs	r0, r3
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b008      	add	sp, #32
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80060fa:	200b      	movs	r0, #11
 80060fc:	183b      	adds	r3, r7, r0
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	2120      	movs	r1, #32
 8006102:	5c52      	ldrb	r2, [r2, r1]
 8006104:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8006106:	0002      	movs	r2, r0
 8006108:	18bb      	adds	r3, r7, r2
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d003      	beq.n	8006118 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8006110:	18bb      	adds	r3, r7, r2
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d11d      	bne.n	8006154 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	2380      	movs	r3, #128	@ 0x80
 8006120:	04db      	lsls	r3, r3, #19
 8006122:	4013      	ands	r3, r2
 8006124:	d002      	beq.n	800612c <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3301      	adds	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	2380      	movs	r3, #128	@ 0x80
 8006134:	051b      	lsls	r3, r3, #20
 8006136:	4013      	ands	r3, r2
 8006138:	d002      	beq.n	8006140 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3301      	adds	r3, #1
 800613e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	2380      	movs	r3, #128	@ 0x80
 8006148:	055b      	lsls	r3, r3, #21
 800614a:	4013      	ands	r3, r2
 800614c:	d002      	beq.n	8006154 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006154:	68fb      	ldr	r3, [r7, #12]
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	b004      	add	sp, #16
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800616c:	200b      	movs	r0, #11
 800616e:	183b      	adds	r3, r7, r0
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	2120      	movs	r1, #32
 8006174:	5c52      	ldrb	r2, [r2, r1]
 8006176:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8006178:	0002      	movs	r2, r0
 800617a:	18bb      	adds	r3, r7, r2
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d003      	beq.n	800618a <HAL_CAN_IsTxMessagePending+0x2c>
 8006182:	18bb      	adds	r3, r7, r2
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d10b      	bne.n	80061a2 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	0692      	lsls	r2, r2, #26
 8006194:	401a      	ands	r2, r3
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	069b      	lsls	r3, r3, #26
 800619a:	429a      	cmp	r2, r3
 800619c:	d001      	beq.n	80061a2 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 800619e:	2301      	movs	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80061a2:	68fb      	ldr	r3, [r7, #12]
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b004      	add	sp, #16
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80061ba:	2017      	movs	r0, #23
 80061bc:	183b      	adds	r3, r7, r0
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	2120      	movs	r1, #32
 80061c2:	5c52      	ldrb	r2, [r2, r1]
 80061c4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80061c6:	0002      	movs	r2, r0
 80061c8:	18bb      	adds	r3, r7, r2
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d004      	beq.n	80061da <HAL_CAN_GetRxMessage+0x2e>
 80061d0:	18bb      	adds	r3, r7, r2
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d000      	beq.n	80061da <HAL_CAN_GetRxMessage+0x2e>
 80061d8:	e107      	b.n	80063ea <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10e      	bne.n	80061fe <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	2203      	movs	r2, #3
 80061e8:	4013      	ands	r3, r2
 80061ea:	d117      	bne.n	800621c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	2280      	movs	r2, #128	@ 0x80
 80061f2:	0392      	lsls	r2, r2, #14
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e0fd      	b.n	80063fa <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2203      	movs	r2, #3
 8006206:	4013      	ands	r3, r2
 8006208:	d108      	bne.n	800621c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620e:	2280      	movs	r2, #128	@ 0x80
 8006210:	0392      	lsls	r2, r2, #14
 8006212:	431a      	orrs	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0ee      	b.n	80063fa <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	321b      	adds	r2, #27
 8006224:	0112      	lsls	r2, r2, #4
 8006226:	58d3      	ldr	r3, [r2, r3]
 8006228:	2204      	movs	r2, #4
 800622a:	401a      	ands	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10b      	bne.n	8006250 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	321b      	adds	r2, #27
 8006240:	0112      	lsls	r2, r2, #4
 8006242:	58d3      	ldr	r3, [r2, r3]
 8006244:	0d5b      	lsrs	r3, r3, #21
 8006246:	055b      	lsls	r3, r3, #21
 8006248:	0d5a      	lsrs	r2, r3, #21
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	e00a      	b.n	8006266 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	321b      	adds	r2, #27
 8006258:	0112      	lsls	r2, r2, #4
 800625a:	58d3      	ldr	r3, [r2, r3]
 800625c:	08db      	lsrs	r3, r3, #3
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	321b      	adds	r2, #27
 800626e:	0112      	lsls	r2, r2, #4
 8006270:	58d3      	ldr	r3, [r2, r3]
 8006272:	2202      	movs	r2, #2
 8006274:	401a      	ands	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	331b      	adds	r3, #27
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	18d3      	adds	r3, r2, r3
 8006286:	3304      	adds	r3, #4
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2208      	movs	r2, #8
 800628c:	4013      	ands	r3, r2
 800628e:	d003      	beq.n	8006298 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2208      	movs	r2, #8
 8006294:	611a      	str	r2, [r3, #16]
 8006296:	e00b      	b.n	80062b0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	331b      	adds	r3, #27
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	3304      	adds	r3, #4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	220f      	movs	r2, #15
 80062aa:	401a      	ands	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	331b      	adds	r3, #27
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	18d3      	adds	r3, r2, r3
 80062bc:	3304      	adds	r3, #4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	0a1b      	lsrs	r3, r3, #8
 80062c2:	22ff      	movs	r2, #255	@ 0xff
 80062c4:	401a      	ands	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	331b      	adds	r3, #27
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	18d3      	adds	r3, r2, r3
 80062d6:	3304      	adds	r3, #4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	0c1b      	lsrs	r3, r3, #16
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	0c1a      	lsrs	r2, r3, #16
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6819      	ldr	r1, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	23dc      	movs	r3, #220	@ 0xdc
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	0112      	lsls	r2, r2, #4
 80062f0:	188a      	adds	r2, r1, r2
 80062f2:	18d3      	adds	r3, r2, r3
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6819      	ldr	r1, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	23dc      	movs	r3, #220	@ 0xdc
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	0112      	lsls	r2, r2, #4
 8006308:	188a      	adds	r2, r1, r2
 800630a:	18d3      	adds	r3, r2, r3
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	0a1a      	lsrs	r2, r3, #8
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6819      	ldr	r1, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	23dc      	movs	r3, #220	@ 0xdc
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	0112      	lsls	r2, r2, #4
 8006324:	188a      	adds	r2, r1, r2
 8006326:	18d3      	adds	r3, r2, r3
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	0c1a      	lsrs	r2, r3, #16
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	3302      	adds	r3, #2
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6819      	ldr	r1, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	23dc      	movs	r3, #220	@ 0xdc
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	0112      	lsls	r2, r2, #4
 8006340:	188a      	adds	r2, r1, r2
 8006342:	18d3      	adds	r3, r2, r3
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	0e1a      	lsrs	r2, r3, #24
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	3303      	adds	r3, #3
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6819      	ldr	r1, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	23de      	movs	r3, #222	@ 0xde
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	0112      	lsls	r2, r2, #4
 800635c:	188a      	adds	r2, r1, r2
 800635e:	18d3      	adds	r3, r2, r3
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	3304      	adds	r3, #4
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6819      	ldr	r1, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	23de      	movs	r3, #222	@ 0xde
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	0112      	lsls	r2, r2, #4
 8006376:	188a      	adds	r2, r1, r2
 8006378:	18d3      	adds	r3, r2, r3
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	0a1a      	lsrs	r2, r3, #8
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	3305      	adds	r3, #5
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6819      	ldr	r1, [r3, #0]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	23de      	movs	r3, #222	@ 0xde
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	0112      	lsls	r2, r2, #4
 8006392:	188a      	adds	r2, r1, r2
 8006394:	18d3      	adds	r3, r2, r3
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	0c1a      	lsrs	r2, r3, #16
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	3306      	adds	r3, #6
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6819      	ldr	r1, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	23de      	movs	r3, #222	@ 0xde
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	0112      	lsls	r2, r2, #4
 80063ae:	188a      	adds	r2, r1, r2
 80063b0:	18d3      	adds	r3, r2, r3
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	0e1a      	lsrs	r2, r3, #24
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	3307      	adds	r3, #7
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d108      	bne.n	80063d6 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2120      	movs	r1, #32
 80063d0:	430a      	orrs	r2, r1
 80063d2:	60da      	str	r2, [r3, #12]
 80063d4:	e007      	b.n	80063e6 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2120      	movs	r1, #32
 80063e2:	430a      	orrs	r2, r1
 80063e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e007      	b.n	80063fa <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	2280      	movs	r2, #128	@ 0x80
 80063f0:	02d2      	lsls	r2, r2, #11
 80063f2:	431a      	orrs	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
  }
}
 80063fa:	0018      	movs	r0, r3
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b006      	add	sp, #24
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800640c:	200f      	movs	r0, #15
 800640e:	183b      	adds	r3, r7, r0
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	2120      	movs	r1, #32
 8006414:	5c52      	ldrb	r2, [r2, r1]
 8006416:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006418:	0002      	movs	r2, r0
 800641a:	18bb      	adds	r3, r7, r2
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d003      	beq.n	800642a <HAL_CAN_ActivateNotification+0x28>
 8006422:	18bb      	adds	r3, r7, r2
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d109      	bne.n	800643e <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6959      	ldr	r1, [r3, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	e007      	b.n	800644e <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006442:	2280      	movs	r2, #128	@ 0x80
 8006444:	02d2      	lsls	r2, r2, #11
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
  }
}
 800644e:	0018      	movs	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	b004      	add	sp, #16
 8006454:	bd80      	pop	{r7, pc}

08006456 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b08a      	sub	sp, #40	@ 0x28
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800645e:	2300      	movs	r3, #0
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	2201      	movs	r2, #1
 8006496:	4013      	ands	r3, r2
 8006498:	d100      	bne.n	800649c <HAL_CAN_IRQHandler+0x46>
 800649a:	e084      	b.n	80065a6 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	2201      	movs	r2, #1
 80064a0:	4013      	ands	r3, r2
 80064a2:	d024      	beq.n	80064ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2201      	movs	r2, #1
 80064aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2202      	movs	r2, #2
 80064b0:	4013      	ands	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	0018      	movs	r0, r3
 80064b8:	f000 f981 	bl	80067be <HAL_CAN_TxMailbox0CompleteCallback>
 80064bc:	e017      	b.n	80064ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2204      	movs	r2, #4
 80064c2:	4013      	ands	r3, r2
 80064c4:	d005      	beq.n	80064d2 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	2280      	movs	r2, #128	@ 0x80
 80064ca:	0112      	lsls	r2, r2, #4
 80064cc:	4313      	orrs	r3, r2
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d0:	e00d      	b.n	80064ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	2208      	movs	r2, #8
 80064d6:	4013      	ands	r3, r2
 80064d8:	d005      	beq.n	80064e6 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	2280      	movs	r2, #128	@ 0x80
 80064de:	0152      	lsls	r2, r2, #5
 80064e0:	4313      	orrs	r3, r2
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064e4:	e003      	b.n	80064ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f000 f980 	bl	80067ee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	2380      	movs	r3, #128	@ 0x80
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4013      	ands	r3, r2
 80064f6:	d028      	beq.n	800654a <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2280      	movs	r2, #128	@ 0x80
 80064fe:	0052      	lsls	r2, r2, #1
 8006500:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	2380      	movs	r3, #128	@ 0x80
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4013      	ands	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	0018      	movs	r0, r3
 8006510:	f000 f95d 	bl	80067ce <HAL_CAN_TxMailbox1CompleteCallback>
 8006514:	e019      	b.n	800654a <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	2380      	movs	r3, #128	@ 0x80
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	4013      	ands	r3, r2
 800651e:	d005      	beq.n	800652c <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	2280      	movs	r2, #128	@ 0x80
 8006524:	0192      	lsls	r2, r2, #6
 8006526:	4313      	orrs	r3, r2
 8006528:	627b      	str	r3, [r7, #36]	@ 0x24
 800652a:	e00e      	b.n	800654a <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	2380      	movs	r3, #128	@ 0x80
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	4013      	ands	r3, r2
 8006534:	d005      	beq.n	8006542 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	2280      	movs	r2, #128	@ 0x80
 800653a:	01d2      	lsls	r2, r2, #7
 800653c:	4313      	orrs	r3, r2
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006540:	e003      	b.n	800654a <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	0018      	movs	r0, r3
 8006546:	f000 f95a 	bl	80067fe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	2380      	movs	r3, #128	@ 0x80
 800654e:	025b      	lsls	r3, r3, #9
 8006550:	4013      	ands	r3, r2
 8006552:	d028      	beq.n	80065a6 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2280      	movs	r2, #128	@ 0x80
 800655a:	0252      	lsls	r2, r2, #9
 800655c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	2380      	movs	r3, #128	@ 0x80
 8006562:	029b      	lsls	r3, r3, #10
 8006564:	4013      	ands	r3, r2
 8006566:	d004      	beq.n	8006572 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	0018      	movs	r0, r3
 800656c:	f000 f937 	bl	80067de <HAL_CAN_TxMailbox2CompleteCallback>
 8006570:	e019      	b.n	80065a6 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	2380      	movs	r3, #128	@ 0x80
 8006576:	02db      	lsls	r3, r3, #11
 8006578:	4013      	ands	r3, r2
 800657a:	d005      	beq.n	8006588 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	2280      	movs	r2, #128	@ 0x80
 8006580:	0212      	lsls	r2, r2, #8
 8006582:	4313      	orrs	r3, r2
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
 8006586:	e00e      	b.n	80065a6 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	2380      	movs	r3, #128	@ 0x80
 800658c:	031b      	lsls	r3, r3, #12
 800658e:	4013      	ands	r3, r2
 8006590:	d005      	beq.n	800659e <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	2280      	movs	r2, #128	@ 0x80
 8006596:	0252      	lsls	r2, r2, #9
 8006598:	4313      	orrs	r3, r2
 800659a:	627b      	str	r3, [r7, #36]	@ 0x24
 800659c:	e003      	b.n	80065a6 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	0018      	movs	r0, r3
 80065a2:	f000 f934 	bl	800680e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	2208      	movs	r2, #8
 80065aa:	4013      	ands	r3, r2
 80065ac:	d00c      	beq.n	80065c8 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2210      	movs	r2, #16
 80065b2:	4013      	ands	r3, r2
 80065b4:	d008      	beq.n	80065c8 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	2280      	movs	r2, #128	@ 0x80
 80065ba:	0092      	lsls	r2, r2, #2
 80065bc:	4313      	orrs	r3, r2
 80065be:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2210      	movs	r2, #16
 80065c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	2204      	movs	r2, #4
 80065cc:	4013      	ands	r3, r2
 80065ce:	d00b      	beq.n	80065e8 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2208      	movs	r2, #8
 80065d4:	4013      	ands	r3, r2
 80065d6:	d007      	beq.n	80065e8 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2208      	movs	r2, #8
 80065de:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	0018      	movs	r0, r3
 80065e4:	f000 f91b 	bl	800681e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	2202      	movs	r2, #2
 80065ec:	4013      	ands	r3, r2
 80065ee:	d009      	beq.n	8006604 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	2203      	movs	r2, #3
 80065f8:	4013      	ands	r3, r2
 80065fa:	d003      	beq.n	8006604 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	0018      	movs	r0, r3
 8006600:	f7fc fd20 	bl	8003044 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	2240      	movs	r2, #64	@ 0x40
 8006608:	4013      	ands	r3, r2
 800660a:	d00c      	beq.n	8006626 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2210      	movs	r2, #16
 8006610:	4013      	ands	r3, r2
 8006612:	d008      	beq.n	8006626 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006616:	2280      	movs	r2, #128	@ 0x80
 8006618:	00d2      	lsls	r2, r2, #3
 800661a:	4313      	orrs	r3, r2
 800661c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2210      	movs	r2, #16
 8006624:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	2220      	movs	r2, #32
 800662a:	4013      	ands	r3, r2
 800662c:	d00b      	beq.n	8006646 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2208      	movs	r2, #8
 8006632:	4013      	ands	r3, r2
 8006634:	d007      	beq.n	8006646 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2208      	movs	r2, #8
 800663c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f000 f8fc 	bl	800683e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	2210      	movs	r2, #16
 800664a:	4013      	ands	r3, r2
 800664c:	d009      	beq.n	8006662 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2203      	movs	r2, #3
 8006656:	4013      	ands	r3, r2
 8006658:	d003      	beq.n	8006662 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	0018      	movs	r0, r3
 800665e:	f000 f8e6 	bl	800682e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	2380      	movs	r3, #128	@ 0x80
 8006666:	029b      	lsls	r3, r3, #10
 8006668:	4013      	ands	r3, r2
 800666a:	d00b      	beq.n	8006684 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	2210      	movs	r2, #16
 8006670:	4013      	ands	r3, r2
 8006672:	d007      	beq.n	8006684 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2210      	movs	r2, #16
 800667a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	0018      	movs	r0, r3
 8006680:	f000 f8e5 	bl	800684e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	2380      	movs	r3, #128	@ 0x80
 8006688:	025b      	lsls	r3, r3, #9
 800668a:	4013      	ands	r3, r2
 800668c:	d00b      	beq.n	80066a6 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2208      	movs	r2, #8
 8006692:	4013      	ands	r3, r2
 8006694:	d007      	beq.n	80066a6 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2208      	movs	r2, #8
 800669c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0018      	movs	r0, r3
 80066a2:	f000 f8dc 	bl	800685e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80066a6:	6a3a      	ldr	r2, [r7, #32]
 80066a8:	2380      	movs	r3, #128	@ 0x80
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	4013      	ands	r3, r2
 80066ae:	d100      	bne.n	80066b2 <HAL_CAN_IRQHandler+0x25c>
 80066b0:	e074      	b.n	800679c <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	2204      	movs	r2, #4
 80066b6:	4013      	ands	r3, r2
 80066b8:	d100      	bne.n	80066bc <HAL_CAN_IRQHandler+0x266>
 80066ba:	e06b      	b.n	8006794 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80066bc:	6a3a      	ldr	r2, [r7, #32]
 80066be:	2380      	movs	r3, #128	@ 0x80
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	4013      	ands	r3, r2
 80066c4:	d007      	beq.n	80066d6 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80066cc:	d003      	beq.n	80066d6 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	2201      	movs	r2, #1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80066d6:	6a3a      	ldr	r2, [r7, #32]
 80066d8:	2380      	movs	r3, #128	@ 0x80
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4013      	ands	r3, r2
 80066de:	d007      	beq.n	80066f0 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2202      	movs	r2, #2
 80066e4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80066e6:	d003      	beq.n	80066f0 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	2202      	movs	r2, #2
 80066ec:	4313      	orrs	r3, r2
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80066f0:	6a3a      	ldr	r2, [r7, #32]
 80066f2:	2380      	movs	r3, #128	@ 0x80
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	4013      	ands	r3, r2
 80066f8:	d007      	beq.n	800670a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2204      	movs	r2, #4
 80066fe:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006700:	d003      	beq.n	800670a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	2204      	movs	r2, #4
 8006706:	4313      	orrs	r3, r2
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800670a:	6a3a      	ldr	r2, [r7, #32]
 800670c:	2380      	movs	r3, #128	@ 0x80
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	4013      	ands	r3, r2
 8006712:	d03f      	beq.n	8006794 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2270      	movs	r2, #112	@ 0x70
 8006718:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800671a:	d03b      	beq.n	8006794 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2270      	movs	r2, #112	@ 0x70
 8006720:	4013      	ands	r3, r2
 8006722:	2b60      	cmp	r3, #96	@ 0x60
 8006724:	d027      	beq.n	8006776 <HAL_CAN_IRQHandler+0x320>
 8006726:	d82c      	bhi.n	8006782 <HAL_CAN_IRQHandler+0x32c>
 8006728:	2b50      	cmp	r3, #80	@ 0x50
 800672a:	d01f      	beq.n	800676c <HAL_CAN_IRQHandler+0x316>
 800672c:	d829      	bhi.n	8006782 <HAL_CAN_IRQHandler+0x32c>
 800672e:	2b40      	cmp	r3, #64	@ 0x40
 8006730:	d017      	beq.n	8006762 <HAL_CAN_IRQHandler+0x30c>
 8006732:	d826      	bhi.n	8006782 <HAL_CAN_IRQHandler+0x32c>
 8006734:	2b30      	cmp	r3, #48	@ 0x30
 8006736:	d00f      	beq.n	8006758 <HAL_CAN_IRQHandler+0x302>
 8006738:	d823      	bhi.n	8006782 <HAL_CAN_IRQHandler+0x32c>
 800673a:	2b10      	cmp	r3, #16
 800673c:	d002      	beq.n	8006744 <HAL_CAN_IRQHandler+0x2ee>
 800673e:	2b20      	cmp	r3, #32
 8006740:	d005      	beq.n	800674e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006742:	e01e      	b.n	8006782 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	2208      	movs	r2, #8
 8006748:	4313      	orrs	r3, r2
 800674a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800674c:	e01a      	b.n	8006784 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	2210      	movs	r2, #16
 8006752:	4313      	orrs	r3, r2
 8006754:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006756:	e015      	b.n	8006784 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	2220      	movs	r2, #32
 800675c:	4313      	orrs	r3, r2
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006760:	e010      	b.n	8006784 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	2240      	movs	r2, #64	@ 0x40
 8006766:	4313      	orrs	r3, r2
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800676a:	e00b      	b.n	8006784 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	2280      	movs	r2, #128	@ 0x80
 8006770:	4313      	orrs	r3, r2
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006774:	e006      	b.n	8006784 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	2280      	movs	r2, #128	@ 0x80
 800677a:	0052      	lsls	r2, r2, #1
 800677c:	4313      	orrs	r3, r2
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006780:	e000      	b.n	8006784 <HAL_CAN_IRQHandler+0x32e>
            break;
 8006782:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2170      	movs	r1, #112	@ 0x70
 8006790:	438a      	bics	r2, r1
 8006792:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2204      	movs	r2, #4
 800679a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0018      	movs	r0, r3
 80067b2:	f000 f85c 	bl	800686e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80067b6:	46c0      	nop			@ (mov r8, r8)
 80067b8:	46bd      	mov	sp, r7
 80067ba:	b00a      	add	sp, #40	@ 0x28
 80067bc:	bd80      	pop	{r7, pc}

080067be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b082      	sub	sp, #8
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80067c6:	46c0      	nop			@ (mov r8, r8)
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b002      	add	sp, #8
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80067d6:	46c0      	nop			@ (mov r8, r8)
 80067d8:	46bd      	mov	sp, r7
 80067da:	b002      	add	sp, #8
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80067e6:	46c0      	nop			@ (mov r8, r8)
 80067e8:	46bd      	mov	sp, r7
 80067ea:	b002      	add	sp, #8
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80067f6:	46c0      	nop			@ (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b002      	add	sp, #8
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006806:	46c0      	nop			@ (mov r8, r8)
 8006808:	46bd      	mov	sp, r7
 800680a:	b002      	add	sp, #8
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006816:	46c0      	nop			@ (mov r8, r8)
 8006818:	46bd      	mov	sp, r7
 800681a:	b002      	add	sp, #8
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	46bd      	mov	sp, r7
 800682a:	b002      	add	sp, #8
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006836:	46c0      	nop			@ (mov r8, r8)
 8006838:	46bd      	mov	sp, r7
 800683a:	b002      	add	sp, #8
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006846:	46c0      	nop			@ (mov r8, r8)
 8006848:	46bd      	mov	sp, r7
 800684a:	b002      	add	sp, #8
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006856:	46c0      	nop			@ (mov r8, r8)
 8006858:	46bd      	mov	sp, r7
 800685a:	b002      	add	sp, #8
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006866:	46c0      	nop			@ (mov r8, r8)
 8006868:	46bd      	mov	sp, r7
 800686a:	b002      	add	sp, #8
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006876:	46c0      	nop			@ (mov r8, r8)
 8006878:	46bd      	mov	sp, r7
 800687a:	b002      	add	sp, #8
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	0002      	movs	r2, r0
 8006888:	1dfb      	adds	r3, r7, #7
 800688a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800688c:	1dfb      	adds	r3, r7, #7
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b7f      	cmp	r3, #127	@ 0x7f
 8006892:	d809      	bhi.n	80068a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006894:	1dfb      	adds	r3, r7, #7
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	001a      	movs	r2, r3
 800689a:	231f      	movs	r3, #31
 800689c:	401a      	ands	r2, r3
 800689e:	4b04      	ldr	r3, [pc, #16]	@ (80068b0 <__NVIC_EnableIRQ+0x30>)
 80068a0:	2101      	movs	r1, #1
 80068a2:	4091      	lsls	r1, r2
 80068a4:	000a      	movs	r2, r1
 80068a6:	601a      	str	r2, [r3, #0]
  }
}
 80068a8:	46c0      	nop			@ (mov r8, r8)
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b002      	add	sp, #8
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	e000e100 	.word	0xe000e100

080068b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	0002      	movs	r2, r0
 80068bc:	1dfb      	adds	r3, r7, #7
 80068be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80068c0:	1dfb      	adds	r3, r7, #7
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80068c6:	d810      	bhi.n	80068ea <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068c8:	1dfb      	adds	r3, r7, #7
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	001a      	movs	r2, r3
 80068ce:	231f      	movs	r3, #31
 80068d0:	4013      	ands	r3, r2
 80068d2:	4908      	ldr	r1, [pc, #32]	@ (80068f4 <__NVIC_DisableIRQ+0x40>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	409a      	lsls	r2, r3
 80068d8:	0013      	movs	r3, r2
 80068da:	2280      	movs	r2, #128	@ 0x80
 80068dc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80068de:	f3bf 8f4f 	dsb	sy
}
 80068e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80068e4:	f3bf 8f6f 	isb	sy
}
 80068e8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80068ea:	46c0      	nop			@ (mov r8, r8)
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b002      	add	sp, #8
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	e000e100 	.word	0xe000e100

080068f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	0002      	movs	r2, r0
 8006900:	6039      	str	r1, [r7, #0]
 8006902:	1dfb      	adds	r3, r7, #7
 8006904:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006906:	1dfb      	adds	r3, r7, #7
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b7f      	cmp	r3, #127	@ 0x7f
 800690c:	d828      	bhi.n	8006960 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800690e:	4a2f      	ldr	r2, [pc, #188]	@ (80069cc <__NVIC_SetPriority+0xd4>)
 8006910:	1dfb      	adds	r3, r7, #7
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b25b      	sxtb	r3, r3
 8006916:	089b      	lsrs	r3, r3, #2
 8006918:	33c0      	adds	r3, #192	@ 0xc0
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	589b      	ldr	r3, [r3, r2]
 800691e:	1dfa      	adds	r2, r7, #7
 8006920:	7812      	ldrb	r2, [r2, #0]
 8006922:	0011      	movs	r1, r2
 8006924:	2203      	movs	r2, #3
 8006926:	400a      	ands	r2, r1
 8006928:	00d2      	lsls	r2, r2, #3
 800692a:	21ff      	movs	r1, #255	@ 0xff
 800692c:	4091      	lsls	r1, r2
 800692e:	000a      	movs	r2, r1
 8006930:	43d2      	mvns	r2, r2
 8006932:	401a      	ands	r2, r3
 8006934:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	019b      	lsls	r3, r3, #6
 800693a:	22ff      	movs	r2, #255	@ 0xff
 800693c:	401a      	ands	r2, r3
 800693e:	1dfb      	adds	r3, r7, #7
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	0018      	movs	r0, r3
 8006944:	2303      	movs	r3, #3
 8006946:	4003      	ands	r3, r0
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800694c:	481f      	ldr	r0, [pc, #124]	@ (80069cc <__NVIC_SetPriority+0xd4>)
 800694e:	1dfb      	adds	r3, r7, #7
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b25b      	sxtb	r3, r3
 8006954:	089b      	lsrs	r3, r3, #2
 8006956:	430a      	orrs	r2, r1
 8006958:	33c0      	adds	r3, #192	@ 0xc0
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800695e:	e031      	b.n	80069c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006960:	4a1b      	ldr	r2, [pc, #108]	@ (80069d0 <__NVIC_SetPriority+0xd8>)
 8006962:	1dfb      	adds	r3, r7, #7
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	0019      	movs	r1, r3
 8006968:	230f      	movs	r3, #15
 800696a:	400b      	ands	r3, r1
 800696c:	3b08      	subs	r3, #8
 800696e:	089b      	lsrs	r3, r3, #2
 8006970:	3306      	adds	r3, #6
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	18d3      	adds	r3, r2, r3
 8006976:	3304      	adds	r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	1dfa      	adds	r2, r7, #7
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	0011      	movs	r1, r2
 8006980:	2203      	movs	r2, #3
 8006982:	400a      	ands	r2, r1
 8006984:	00d2      	lsls	r2, r2, #3
 8006986:	21ff      	movs	r1, #255	@ 0xff
 8006988:	4091      	lsls	r1, r2
 800698a:	000a      	movs	r2, r1
 800698c:	43d2      	mvns	r2, r2
 800698e:	401a      	ands	r2, r3
 8006990:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	019b      	lsls	r3, r3, #6
 8006996:	22ff      	movs	r2, #255	@ 0xff
 8006998:	401a      	ands	r2, r3
 800699a:	1dfb      	adds	r3, r7, #7
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	0018      	movs	r0, r3
 80069a0:	2303      	movs	r3, #3
 80069a2:	4003      	ands	r3, r0
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80069a8:	4809      	ldr	r0, [pc, #36]	@ (80069d0 <__NVIC_SetPriority+0xd8>)
 80069aa:	1dfb      	adds	r3, r7, #7
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	001c      	movs	r4, r3
 80069b0:	230f      	movs	r3, #15
 80069b2:	4023      	ands	r3, r4
 80069b4:	3b08      	subs	r3, #8
 80069b6:	089b      	lsrs	r3, r3, #2
 80069b8:	430a      	orrs	r2, r1
 80069ba:	3306      	adds	r3, #6
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	18c3      	adds	r3, r0, r3
 80069c0:	3304      	adds	r3, #4
 80069c2:	601a      	str	r2, [r3, #0]
}
 80069c4:	46c0      	nop			@ (mov r8, r8)
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b003      	add	sp, #12
 80069ca:	bd90      	pop	{r4, r7, pc}
 80069cc:	e000e100 	.word	0xe000e100
 80069d0:	e000ed00 	.word	0xe000ed00

080069d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	1e5a      	subs	r2, r3, #1
 80069e0:	2380      	movs	r3, #128	@ 0x80
 80069e2:	045b      	lsls	r3, r3, #17
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d301      	bcc.n	80069ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069e8:	2301      	movs	r3, #1
 80069ea:	e010      	b.n	8006a0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006a18 <SysTick_Config+0x44>)
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	3a01      	subs	r2, #1
 80069f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069f4:	2301      	movs	r3, #1
 80069f6:	425b      	negs	r3, r3
 80069f8:	2103      	movs	r1, #3
 80069fa:	0018      	movs	r0, r3
 80069fc:	f7ff ff7c 	bl	80068f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a00:	4b05      	ldr	r3, [pc, #20]	@ (8006a18 <SysTick_Config+0x44>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a06:	4b04      	ldr	r3, [pc, #16]	@ (8006a18 <SysTick_Config+0x44>)
 8006a08:	2207      	movs	r2, #7
 8006a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	0018      	movs	r0, r3
 8006a10:	46bd      	mov	sp, r7
 8006a12:	b002      	add	sp, #8
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	46c0      	nop			@ (mov r8, r8)
 8006a18:	e000e010 	.word	0xe000e010

08006a1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
 8006a26:	210f      	movs	r1, #15
 8006a28:	187b      	adds	r3, r7, r1
 8006a2a:	1c02      	adds	r2, r0, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	b25b      	sxtb	r3, r3
 8006a36:	0011      	movs	r1, r2
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f7ff ff5d 	bl	80068f8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8006a3e:	46c0      	nop			@ (mov r8, r8)
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b004      	add	sp, #16
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	0002      	movs	r2, r0
 8006a4e:	1dfb      	adds	r3, r7, #7
 8006a50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a52:	1dfb      	adds	r3, r7, #7
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	b25b      	sxtb	r3, r3
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f7ff ff11 	bl	8006880 <__NVIC_EnableIRQ>
}
 8006a5e:	46c0      	nop			@ (mov r8, r8)
 8006a60:	46bd      	mov	sp, r7
 8006a62:	b002      	add	sp, #8
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	0002      	movs	r2, r0
 8006a6e:	1dfb      	adds	r3, r7, #7
 8006a70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006a72:	1dfb      	adds	r3, r7, #7
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	b25b      	sxtb	r3, r3
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f7ff ff1b 	bl	80068b4 <__NVIC_DisableIRQ>
}
 8006a7e:	46c0      	nop			@ (mov r8, r8)
 8006a80:	46bd      	mov	sp, r7
 8006a82:	b002      	add	sp, #8
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	0018      	movs	r0, r3
 8006a92:	f7ff ff9f 	bl	80069d4 <SysTick_Config>
 8006a96:	0003      	movs	r3, r0
}
 8006a98:	0018      	movs	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b002      	add	sp, #8
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e036      	b.n	8006b24 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2221      	movs	r2, #33	@ 0x21
 8006aba:	2102      	movs	r1, #2
 8006abc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4a18      	ldr	r2, [pc, #96]	@ (8006b2c <HAL_DMA_Init+0x8c>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	0018      	movs	r0, r3
 8006b08:	f000 f932 	bl	8006d70 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2221      	movs	r2, #33	@ 0x21
 8006b16:	2101      	movs	r1, #1
 8006b18:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	2100      	movs	r1, #0
 8006b20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b004      	add	sp, #16
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	ffffc00f 	.word	0xffffc00f

08006b30 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2221      	movs	r2, #33	@ 0x21
 8006b3c:	5c9b      	ldrb	r3, [r3, r2]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d008      	beq.n	8006b56 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2204      	movs	r2, #4
 8006b48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	2100      	movs	r1, #0
 8006b50:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e020      	b.n	8006b98 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	210e      	movs	r1, #14
 8006b62:	438a      	bics	r2, r1
 8006b64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2101      	movs	r1, #1
 8006b72:	438a      	bics	r2, r1
 8006b74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4091      	lsls	r1, r2
 8006b82:	000a      	movs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2221      	movs	r2, #33	@ 0x21
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	2100      	movs	r1, #0
 8006b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	0018      	movs	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b002      	add	sp, #8
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba8:	210f      	movs	r1, #15
 8006baa:	187b      	adds	r3, r7, r1
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2221      	movs	r2, #33	@ 0x21
 8006bb4:	5c9b      	ldrb	r3, [r3, r2]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d006      	beq.n	8006bca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8006bc2:	187b      	adds	r3, r7, r1
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	e028      	b.n	8006c1c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	210e      	movs	r1, #14
 8006bd6:	438a      	bics	r2, r1
 8006bd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2101      	movs	r1, #1
 8006be6:	438a      	bics	r2, r1
 8006be8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	4091      	lsls	r1, r2
 8006bf6:	000a      	movs	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2221      	movs	r2, #33	@ 0x21
 8006bfe:	2101      	movs	r1, #1
 8006c00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	2100      	movs	r1, #0
 8006c08:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	0010      	movs	r0, r2
 8006c1a:	4798      	blx	r3
    }
  }
  return status;
 8006c1c:	230f      	movs	r3, #15
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	781b      	ldrb	r3, [r3, #0]
}
 8006c22:	0018      	movs	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b004      	add	sp, #16
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c46:	2204      	movs	r2, #4
 8006c48:	409a      	lsls	r2, r3
 8006c4a:	0013      	movs	r3, r2
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d024      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x72>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2204      	movs	r2, #4
 8006c56:	4013      	ands	r3, r2
 8006c58:	d020      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2220      	movs	r2, #32
 8006c62:	4013      	ands	r3, r2
 8006c64:	d107      	bne.n	8006c76 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2104      	movs	r1, #4
 8006c72:	438a      	bics	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c7e:	2104      	movs	r1, #4
 8006c80:	4091      	lsls	r1, r2
 8006c82:	000a      	movs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d100      	bne.n	8006c90 <HAL_DMA_IRQHandler+0x66>
 8006c8e:	e06a      	b.n	8006d66 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	0010      	movs	r0, r2
 8006c98:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006c9a:	e064      	b.n	8006d66 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	409a      	lsls	r2, r3
 8006ca4:	0013      	movs	r3, r2
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d02b      	beq.n	8006d04 <HAL_DMA_IRQHandler+0xda>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d027      	beq.n	8006d04 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d10b      	bne.n	8006cd8 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	210a      	movs	r1, #10
 8006ccc:	438a      	bics	r2, r1
 8006cce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2221      	movs	r2, #33	@ 0x21
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce0:	2102      	movs	r1, #2
 8006ce2:	4091      	lsls	r1, r2
 8006ce4:	000a      	movs	r2, r1
 8006ce6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	2100      	movs	r1, #0
 8006cee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d036      	beq.n	8006d66 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	0010      	movs	r0, r2
 8006d00:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006d02:	e030      	b.n	8006d66 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d08:	2208      	movs	r2, #8
 8006d0a:	409a      	lsls	r2, r3
 8006d0c:	0013      	movs	r3, r2
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	4013      	ands	r3, r2
 8006d12:	d028      	beq.n	8006d66 <HAL_DMA_IRQHandler+0x13c>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2208      	movs	r2, #8
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d024      	beq.n	8006d66 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	210e      	movs	r1, #14
 8006d28:	438a      	bics	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d34:	2101      	movs	r1, #1
 8006d36:	4091      	lsls	r1, r2
 8006d38:	000a      	movs	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2221      	movs	r2, #33	@ 0x21
 8006d46:	2101      	movs	r1, #1
 8006d48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	2100      	movs	r1, #0
 8006d50:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d005      	beq.n	8006d66 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	0010      	movs	r0, r2
 8006d62:	4798      	blx	r3
    }
  }
}
 8006d64:	e7ff      	b.n	8006d66 <HAL_DMA_IRQHandler+0x13c>
 8006d66:	46c0      	nop			@ (mov r8, r8)
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	b004      	add	sp, #16
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a08      	ldr	r2, [pc, #32]	@ (8006da0 <DMA_CalcBaseAndBitshift+0x30>)
 8006d7e:	4694      	mov	ip, r2
 8006d80:	4463      	add	r3, ip
 8006d82:	2114      	movs	r1, #20
 8006d84:	0018      	movs	r0, r3
 8006d86:	f7f9 f9e5 	bl	8000154 <__udivsi3>
 8006d8a:	0003      	movs	r3, r0
 8006d8c:	009a      	lsls	r2, r3, #2
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a03      	ldr	r2, [pc, #12]	@ (8006da4 <DMA_CalcBaseAndBitshift+0x34>)
 8006d96:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8006d98:	46c0      	nop			@ (mov r8, r8)
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b002      	add	sp, #8
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	bffdfff8 	.word	0xbffdfff8
 8006da4:	40020000 	.word	0x40020000

08006da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006db6:	e155      	b.n	8007064 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4091      	lsls	r1, r2
 8006dc2:	000a      	movs	r2, r1
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d100      	bne.n	8006dd0 <HAL_GPIO_Init+0x28>
 8006dce:	e146      	b.n	800705e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2203      	movs	r2, #3
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d005      	beq.n	8006de8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2203      	movs	r2, #3
 8006de2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d130      	bne.n	8006e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	2203      	movs	r2, #3
 8006df4:	409a      	lsls	r2, r3
 8006df6:	0013      	movs	r3, r2
 8006df8:	43da      	mvns	r2, r3
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	0013      	movs	r3, r2
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e1e:	2201      	movs	r2, #1
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	409a      	lsls	r2, r3
 8006e24:	0013      	movs	r3, r2
 8006e26:	43da      	mvns	r2, r3
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	2201      	movs	r2, #1
 8006e36:	401a      	ands	r2, r3
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	409a      	lsls	r2, r3
 8006e3c:	0013      	movs	r3, r2
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2203      	movs	r2, #3
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d017      	beq.n	8006e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	2203      	movs	r2, #3
 8006e62:	409a      	lsls	r2, r3
 8006e64:	0013      	movs	r3, r2
 8006e66:	43da      	mvns	r2, r3
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	409a      	lsls	r2, r3
 8006e78:	0013      	movs	r3, r2
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d123      	bne.n	8006eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	08da      	lsrs	r2, r3, #3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3208      	adds	r2, #8
 8006e9a:	0092      	lsls	r2, r2, #2
 8006e9c:	58d3      	ldr	r3, [r2, r3]
 8006e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2207      	movs	r2, #7
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	220f      	movs	r2, #15
 8006eaa:	409a      	lsls	r2, r3
 8006eac:	0013      	movs	r3, r2
 8006eae:	43da      	mvns	r2, r3
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2107      	movs	r1, #7
 8006ebe:	400b      	ands	r3, r1
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	409a      	lsls	r2, r3
 8006ec4:	0013      	movs	r3, r2
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	08da      	lsrs	r2, r3, #3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3208      	adds	r2, #8
 8006ed4:	0092      	lsls	r2, r2, #2
 8006ed6:	6939      	ldr	r1, [r7, #16]
 8006ed8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	409a      	lsls	r2, r3
 8006ee8:	0013      	movs	r3, r2
 8006eea:	43da      	mvns	r2, r3
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	401a      	ands	r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	409a      	lsls	r2, r3
 8006f00:	0013      	movs	r3, r2
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	23c0      	movs	r3, #192	@ 0xc0
 8006f14:	029b      	lsls	r3, r3, #10
 8006f16:	4013      	ands	r3, r2
 8006f18:	d100      	bne.n	8006f1c <HAL_GPIO_Init+0x174>
 8006f1a:	e0a0      	b.n	800705e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f1c:	4b57      	ldr	r3, [pc, #348]	@ (800707c <HAL_GPIO_Init+0x2d4>)
 8006f1e:	699a      	ldr	r2, [r3, #24]
 8006f20:	4b56      	ldr	r3, [pc, #344]	@ (800707c <HAL_GPIO_Init+0x2d4>)
 8006f22:	2101      	movs	r1, #1
 8006f24:	430a      	orrs	r2, r1
 8006f26:	619a      	str	r2, [r3, #24]
 8006f28:	4b54      	ldr	r3, [pc, #336]	@ (800707c <HAL_GPIO_Init+0x2d4>)
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	4013      	ands	r3, r2
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006f34:	4a52      	ldr	r2, [pc, #328]	@ (8007080 <HAL_GPIO_Init+0x2d8>)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	089b      	lsrs	r3, r3, #2
 8006f3a:	3302      	adds	r3, #2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	589b      	ldr	r3, [r3, r2]
 8006f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2203      	movs	r2, #3
 8006f46:	4013      	ands	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	220f      	movs	r2, #15
 8006f4c:	409a      	lsls	r2, r3
 8006f4e:	0013      	movs	r3, r2
 8006f50:	43da      	mvns	r2, r3
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	4013      	ands	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	2390      	movs	r3, #144	@ 0x90
 8006f5c:	05db      	lsls	r3, r3, #23
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d019      	beq.n	8006f96 <HAL_GPIO_Init+0x1ee>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a47      	ldr	r2, [pc, #284]	@ (8007084 <HAL_GPIO_Init+0x2dc>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d013      	beq.n	8006f92 <HAL_GPIO_Init+0x1ea>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a46      	ldr	r2, [pc, #280]	@ (8007088 <HAL_GPIO_Init+0x2e0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00d      	beq.n	8006f8e <HAL_GPIO_Init+0x1e6>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a45      	ldr	r2, [pc, #276]	@ (800708c <HAL_GPIO_Init+0x2e4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d007      	beq.n	8006f8a <HAL_GPIO_Init+0x1e2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a44      	ldr	r2, [pc, #272]	@ (8007090 <HAL_GPIO_Init+0x2e8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d101      	bne.n	8006f86 <HAL_GPIO_Init+0x1de>
 8006f82:	2304      	movs	r3, #4
 8006f84:	e008      	b.n	8006f98 <HAL_GPIO_Init+0x1f0>
 8006f86:	2305      	movs	r3, #5
 8006f88:	e006      	b.n	8006f98 <HAL_GPIO_Init+0x1f0>
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e004      	b.n	8006f98 <HAL_GPIO_Init+0x1f0>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e002      	b.n	8006f98 <HAL_GPIO_Init+0x1f0>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <HAL_GPIO_Init+0x1f0>
 8006f96:	2300      	movs	r3, #0
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	2103      	movs	r1, #3
 8006f9c:	400a      	ands	r2, r1
 8006f9e:	0092      	lsls	r2, r2, #2
 8006fa0:	4093      	lsls	r3, r2
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006fa8:	4935      	ldr	r1, [pc, #212]	@ (8007080 <HAL_GPIO_Init+0x2d8>)
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	089b      	lsrs	r3, r3, #2
 8006fae:	3302      	adds	r3, #2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006fb6:	4b37      	ldr	r3, [pc, #220]	@ (8007094 <HAL_GPIO_Init+0x2ec>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	43da      	mvns	r2, r3
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	2380      	movs	r3, #128	@ 0x80
 8006fcc:	035b      	lsls	r3, r3, #13
 8006fce:	4013      	ands	r3, r2
 8006fd0:	d003      	beq.n	8006fda <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006fda:	4b2e      	ldr	r3, [pc, #184]	@ (8007094 <HAL_GPIO_Init+0x2ec>)
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8007094 <HAL_GPIO_Init+0x2ec>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	43da      	mvns	r2, r3
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	4013      	ands	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	2380      	movs	r3, #128	@ 0x80
 8006ff6:	039b      	lsls	r3, r3, #14
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	d003      	beq.n	8007004 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007004:	4b23      	ldr	r3, [pc, #140]	@ (8007094 <HAL_GPIO_Init+0x2ec>)
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800700a:	4b22      	ldr	r3, [pc, #136]	@ (8007094 <HAL_GPIO_Init+0x2ec>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	43da      	mvns	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4013      	ands	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	2380      	movs	r3, #128	@ 0x80
 8007020:	029b      	lsls	r3, r3, #10
 8007022:	4013      	ands	r3, r2
 8007024:	d003      	beq.n	800702e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800702e:	4b19      	ldr	r3, [pc, #100]	@ (8007094 <HAL_GPIO_Init+0x2ec>)
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8007034:	4b17      	ldr	r3, [pc, #92]	@ (8007094 <HAL_GPIO_Init+0x2ec>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	43da      	mvns	r2, r3
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	4013      	ands	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	2380      	movs	r3, #128	@ 0x80
 800704a:	025b      	lsls	r3, r3, #9
 800704c:	4013      	ands	r3, r2
 800704e:	d003      	beq.n	8007058 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007058:	4b0e      	ldr	r3, [pc, #56]	@ (8007094 <HAL_GPIO_Init+0x2ec>)
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	3301      	adds	r3, #1
 8007062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	40da      	lsrs	r2, r3
 800706c:	1e13      	subs	r3, r2, #0
 800706e:	d000      	beq.n	8007072 <HAL_GPIO_Init+0x2ca>
 8007070:	e6a2      	b.n	8006db8 <HAL_GPIO_Init+0x10>
  } 
}
 8007072:	46c0      	nop			@ (mov r8, r8)
 8007074:	46c0      	nop			@ (mov r8, r8)
 8007076:	46bd      	mov	sp, r7
 8007078:	b006      	add	sp, #24
 800707a:	bd80      	pop	{r7, pc}
 800707c:	40021000 	.word	0x40021000
 8007080:	40010000 	.word	0x40010000
 8007084:	48000400 	.word	0x48000400
 8007088:	48000800 	.word	0x48000800
 800708c:	48000c00 	.word	0x48000c00
 8007090:	48001000 	.word	0x48001000
 8007094:	40010400 	.word	0x40010400

08007098 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80070a6:	e0b7      	b.n	8007218 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80070a8:	2201      	movs	r2, #1
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	409a      	lsls	r2, r3
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	4013      	ands	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d100      	bne.n	80070bc <HAL_GPIO_DeInit+0x24>
 80070ba:	e0aa      	b.n	8007212 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80070bc:	4a5c      	ldr	r2, [pc, #368]	@ (8007230 <HAL_GPIO_DeInit+0x198>)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	089b      	lsrs	r3, r3, #2
 80070c2:	3302      	adds	r3, #2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	589b      	ldr	r3, [r3, r2]
 80070c8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2203      	movs	r2, #3
 80070ce:	4013      	ands	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	220f      	movs	r2, #15
 80070d4:	409a      	lsls	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4013      	ands	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	2390      	movs	r3, #144	@ 0x90
 80070e0:	05db      	lsls	r3, r3, #23
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d019      	beq.n	800711a <HAL_GPIO_DeInit+0x82>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a52      	ldr	r2, [pc, #328]	@ (8007234 <HAL_GPIO_DeInit+0x19c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <HAL_GPIO_DeInit+0x7e>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a51      	ldr	r2, [pc, #324]	@ (8007238 <HAL_GPIO_DeInit+0x1a0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00d      	beq.n	8007112 <HAL_GPIO_DeInit+0x7a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a50      	ldr	r2, [pc, #320]	@ (800723c <HAL_GPIO_DeInit+0x1a4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d007      	beq.n	800710e <HAL_GPIO_DeInit+0x76>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a4f      	ldr	r2, [pc, #316]	@ (8007240 <HAL_GPIO_DeInit+0x1a8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d101      	bne.n	800710a <HAL_GPIO_DeInit+0x72>
 8007106:	2304      	movs	r3, #4
 8007108:	e008      	b.n	800711c <HAL_GPIO_DeInit+0x84>
 800710a:	2305      	movs	r3, #5
 800710c:	e006      	b.n	800711c <HAL_GPIO_DeInit+0x84>
 800710e:	2303      	movs	r3, #3
 8007110:	e004      	b.n	800711c <HAL_GPIO_DeInit+0x84>
 8007112:	2302      	movs	r3, #2
 8007114:	e002      	b.n	800711c <HAL_GPIO_DeInit+0x84>
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <HAL_GPIO_DeInit+0x84>
 800711a:	2300      	movs	r3, #0
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	2103      	movs	r1, #3
 8007120:	400a      	ands	r2, r1
 8007122:	0092      	lsls	r2, r2, #2
 8007124:	4093      	lsls	r3, r2
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	429a      	cmp	r2, r3
 800712a:	d132      	bne.n	8007192 <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800712c:	4b45      	ldr	r3, [pc, #276]	@ (8007244 <HAL_GPIO_DeInit+0x1ac>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	43d9      	mvns	r1, r3
 8007134:	4b43      	ldr	r3, [pc, #268]	@ (8007244 <HAL_GPIO_DeInit+0x1ac>)
 8007136:	400a      	ands	r2, r1
 8007138:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800713a:	4b42      	ldr	r3, [pc, #264]	@ (8007244 <HAL_GPIO_DeInit+0x1ac>)
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	43d9      	mvns	r1, r3
 8007142:	4b40      	ldr	r3, [pc, #256]	@ (8007244 <HAL_GPIO_DeInit+0x1ac>)
 8007144:	400a      	ands	r2, r1
 8007146:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007148:	4b3e      	ldr	r3, [pc, #248]	@ (8007244 <HAL_GPIO_DeInit+0x1ac>)
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	43d9      	mvns	r1, r3
 8007150:	4b3c      	ldr	r3, [pc, #240]	@ (8007244 <HAL_GPIO_DeInit+0x1ac>)
 8007152:	400a      	ands	r2, r1
 8007154:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007156:	4b3b      	ldr	r3, [pc, #236]	@ (8007244 <HAL_GPIO_DeInit+0x1ac>)
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	43d9      	mvns	r1, r3
 800715e:	4b39      	ldr	r3, [pc, #228]	@ (8007244 <HAL_GPIO_DeInit+0x1ac>)
 8007160:	400a      	ands	r2, r1
 8007162:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2203      	movs	r2, #3
 8007168:	4013      	ands	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	220f      	movs	r2, #15
 800716e:	409a      	lsls	r2, r3
 8007170:	0013      	movs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007174:	4a2e      	ldr	r2, [pc, #184]	@ (8007230 <HAL_GPIO_DeInit+0x198>)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	089b      	lsrs	r3, r3, #2
 800717a:	3302      	adds	r3, #2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	589a      	ldr	r2, [r3, r2]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	43d9      	mvns	r1, r3
 8007184:	482a      	ldr	r0, [pc, #168]	@ (8007230 <HAL_GPIO_DeInit+0x198>)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	089b      	lsrs	r3, r3, #2
 800718a:	400a      	ands	r2, r1
 800718c:	3302      	adds	r3, #2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	0052      	lsls	r2, r2, #1
 800719a:	2103      	movs	r1, #3
 800719c:	4091      	lsls	r1, r2
 800719e:	000a      	movs	r2, r1
 80071a0:	43d2      	mvns	r2, r2
 80071a2:	401a      	ands	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	08da      	lsrs	r2, r3, #3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3208      	adds	r2, #8
 80071b0:	0092      	lsls	r2, r2, #2
 80071b2:	58d3      	ldr	r3, [r2, r3]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	2107      	movs	r1, #7
 80071b8:	400a      	ands	r2, r1
 80071ba:	0092      	lsls	r2, r2, #2
 80071bc:	210f      	movs	r1, #15
 80071be:	4091      	lsls	r1, r2
 80071c0:	000a      	movs	r2, r1
 80071c2:	43d1      	mvns	r1, r2
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	08d2      	lsrs	r2, r2, #3
 80071c8:	4019      	ands	r1, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3208      	adds	r2, #8
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	0052      	lsls	r2, r2, #1
 80071da:	2103      	movs	r1, #3
 80071dc:	4091      	lsls	r1, r2
 80071de:	000a      	movs	r2, r1
 80071e0:	43d2      	mvns	r2, r2
 80071e2:	401a      	ands	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2101      	movs	r1, #1
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4091      	lsls	r1, r2
 80071f2:	000a      	movs	r2, r1
 80071f4:	43d2      	mvns	r2, r2
 80071f6:	401a      	ands	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	0052      	lsls	r2, r2, #1
 8007204:	2103      	movs	r1, #3
 8007206:	4091      	lsls	r1, r2
 8007208:	000a      	movs	r2, r1
 800720a:	43d2      	mvns	r2, r2
 800720c:	401a      	ands	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	609a      	str	r2, [r3, #8]

    }

    position++;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	3301      	adds	r3, #1
 8007216:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	40da      	lsrs	r2, r3
 800721e:	1e13      	subs	r3, r2, #0
 8007220:	d000      	beq.n	8007224 <HAL_GPIO_DeInit+0x18c>
 8007222:	e741      	b.n	80070a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8007224:	46c0      	nop			@ (mov r8, r8)
 8007226:	46c0      	nop			@ (mov r8, r8)
 8007228:	46bd      	mov	sp, r7
 800722a:	b006      	add	sp, #24
 800722c:	bd80      	pop	{r7, pc}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	40010000 	.word	0x40010000
 8007234:	48000400 	.word	0x48000400
 8007238:	48000800 	.word	0x48000800
 800723c:	48000c00 	.word	0x48000c00
 8007240:	48001000 	.word	0x48001000
 8007244:	40010400 	.word	0x40010400

08007248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	0008      	movs	r0, r1
 8007252:	0011      	movs	r1, r2
 8007254:	1cbb      	adds	r3, r7, #2
 8007256:	1c02      	adds	r2, r0, #0
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	1c7b      	adds	r3, r7, #1
 800725c:	1c0a      	adds	r2, r1, #0
 800725e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007260:	1c7b      	adds	r3, r7, #1
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d004      	beq.n	8007272 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007268:	1cbb      	adds	r3, r7, #2
 800726a:	881a      	ldrh	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007270:	e003      	b.n	800727a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007272:	1cbb      	adds	r3, r7, #2
 8007274:	881a      	ldrh	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800727a:	46c0      	nop			@ (mov r8, r8)
 800727c:	46bd      	mov	sp, r7
 800727e:	b002      	add	sp, #8
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	000a      	movs	r2, r1
 800728c:	1cbb      	adds	r3, r7, #2
 800728e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007296:	1cbb      	adds	r3, r7, #2
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4013      	ands	r3, r2
 800729e:	041a      	lsls	r2, r3, #16
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	43db      	mvns	r3, r3
 80072a4:	1cb9      	adds	r1, r7, #2
 80072a6:	8809      	ldrh	r1, [r1, #0]
 80072a8:	400b      	ands	r3, r1
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	619a      	str	r2, [r3, #24]
}
 80072b0:	46c0      	nop			@ (mov r8, r8)
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b004      	add	sp, #16
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d102      	bne.n	80072cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f000 fb76 	bl	80079b8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2201      	movs	r2, #1
 80072d2:	4013      	ands	r3, r2
 80072d4:	d100      	bne.n	80072d8 <HAL_RCC_OscConfig+0x20>
 80072d6:	e08e      	b.n	80073f6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80072d8:	4bc5      	ldr	r3, [pc, #788]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	220c      	movs	r2, #12
 80072de:	4013      	ands	r3, r2
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d00e      	beq.n	8007302 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80072e4:	4bc2      	ldr	r3, [pc, #776]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	220c      	movs	r2, #12
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d117      	bne.n	8007320 <HAL_RCC_OscConfig+0x68>
 80072f0:	4bbf      	ldr	r3, [pc, #764]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	23c0      	movs	r3, #192	@ 0xc0
 80072f6:	025b      	lsls	r3, r3, #9
 80072f8:	401a      	ands	r2, r3
 80072fa:	2380      	movs	r3, #128	@ 0x80
 80072fc:	025b      	lsls	r3, r3, #9
 80072fe:	429a      	cmp	r2, r3
 8007300:	d10e      	bne.n	8007320 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007302:	4bbb      	ldr	r3, [pc, #748]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	2380      	movs	r3, #128	@ 0x80
 8007308:	029b      	lsls	r3, r3, #10
 800730a:	4013      	ands	r3, r2
 800730c:	d100      	bne.n	8007310 <HAL_RCC_OscConfig+0x58>
 800730e:	e071      	b.n	80073f4 <HAL_RCC_OscConfig+0x13c>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d000      	beq.n	800731a <HAL_RCC_OscConfig+0x62>
 8007318:	e06c      	b.n	80073f4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	f000 fb4c 	bl	80079b8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d107      	bne.n	8007338 <HAL_RCC_OscConfig+0x80>
 8007328:	4bb1      	ldr	r3, [pc, #708]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4bb0      	ldr	r3, [pc, #704]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800732e:	2180      	movs	r1, #128	@ 0x80
 8007330:	0249      	lsls	r1, r1, #9
 8007332:	430a      	orrs	r2, r1
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	e02f      	b.n	8007398 <HAL_RCC_OscConfig+0xe0>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <HAL_RCC_OscConfig+0xa2>
 8007340:	4bab      	ldr	r3, [pc, #684]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	4baa      	ldr	r3, [pc, #680]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007346:	49ab      	ldr	r1, [pc, #684]	@ (80075f4 <HAL_RCC_OscConfig+0x33c>)
 8007348:	400a      	ands	r2, r1
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	4ba8      	ldr	r3, [pc, #672]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	4ba7      	ldr	r3, [pc, #668]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007352:	49a9      	ldr	r1, [pc, #676]	@ (80075f8 <HAL_RCC_OscConfig+0x340>)
 8007354:	400a      	ands	r2, r1
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	e01e      	b.n	8007398 <HAL_RCC_OscConfig+0xe0>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2b05      	cmp	r3, #5
 8007360:	d10e      	bne.n	8007380 <HAL_RCC_OscConfig+0xc8>
 8007362:	4ba3      	ldr	r3, [pc, #652]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4ba2      	ldr	r3, [pc, #648]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007368:	2180      	movs	r1, #128	@ 0x80
 800736a:	02c9      	lsls	r1, r1, #11
 800736c:	430a      	orrs	r2, r1
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	4b9f      	ldr	r3, [pc, #636]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	4b9e      	ldr	r3, [pc, #632]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007376:	2180      	movs	r1, #128	@ 0x80
 8007378:	0249      	lsls	r1, r1, #9
 800737a:	430a      	orrs	r2, r1
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e00b      	b.n	8007398 <HAL_RCC_OscConfig+0xe0>
 8007380:	4b9b      	ldr	r3, [pc, #620]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	4b9a      	ldr	r3, [pc, #616]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007386:	499b      	ldr	r1, [pc, #620]	@ (80075f4 <HAL_RCC_OscConfig+0x33c>)
 8007388:	400a      	ands	r2, r1
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	4b98      	ldr	r3, [pc, #608]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	4b97      	ldr	r3, [pc, #604]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007392:	4999      	ldr	r1, [pc, #612]	@ (80075f8 <HAL_RCC_OscConfig+0x340>)
 8007394:	400a      	ands	r2, r1
 8007396:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d014      	beq.n	80073ca <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a0:	f7fe fafe 	bl	80059a0 <HAL_GetTick>
 80073a4:	0003      	movs	r3, r0
 80073a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a8:	e008      	b.n	80073bc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073aa:	f7fe faf9 	bl	80059a0 <HAL_GetTick>
 80073ae:	0002      	movs	r2, r0
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b64      	cmp	r3, #100	@ 0x64
 80073b6:	d901      	bls.n	80073bc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e2fd      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073bc:	4b8c      	ldr	r3, [pc, #560]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	2380      	movs	r3, #128	@ 0x80
 80073c2:	029b      	lsls	r3, r3, #10
 80073c4:	4013      	ands	r3, r2
 80073c6:	d0f0      	beq.n	80073aa <HAL_RCC_OscConfig+0xf2>
 80073c8:	e015      	b.n	80073f6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ca:	f7fe fae9 	bl	80059a0 <HAL_GetTick>
 80073ce:	0003      	movs	r3, r0
 80073d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073d4:	f7fe fae4 	bl	80059a0 <HAL_GetTick>
 80073d8:	0002      	movs	r2, r0
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b64      	cmp	r3, #100	@ 0x64
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e2e8      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073e6:	4b82      	ldr	r3, [pc, #520]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	2380      	movs	r3, #128	@ 0x80
 80073ec:	029b      	lsls	r3, r3, #10
 80073ee:	4013      	ands	r3, r2
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x11c>
 80073f2:	e000      	b.n	80073f6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2202      	movs	r2, #2
 80073fc:	4013      	ands	r3, r2
 80073fe:	d100      	bne.n	8007402 <HAL_RCC_OscConfig+0x14a>
 8007400:	e06c      	b.n	80074dc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007402:	4b7b      	ldr	r3, [pc, #492]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	220c      	movs	r2, #12
 8007408:	4013      	ands	r3, r2
 800740a:	d00e      	beq.n	800742a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800740c:	4b78      	ldr	r3, [pc, #480]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	220c      	movs	r2, #12
 8007412:	4013      	ands	r3, r2
 8007414:	2b08      	cmp	r3, #8
 8007416:	d11f      	bne.n	8007458 <HAL_RCC_OscConfig+0x1a0>
 8007418:	4b75      	ldr	r3, [pc, #468]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	23c0      	movs	r3, #192	@ 0xc0
 800741e:	025b      	lsls	r3, r3, #9
 8007420:	401a      	ands	r2, r3
 8007422:	2380      	movs	r3, #128	@ 0x80
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	429a      	cmp	r2, r3
 8007428:	d116      	bne.n	8007458 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800742a:	4b71      	ldr	r3, [pc, #452]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2202      	movs	r2, #2
 8007430:	4013      	ands	r3, r2
 8007432:	d005      	beq.n	8007440 <HAL_RCC_OscConfig+0x188>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d001      	beq.n	8007440 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e2bb      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007440:	4b6b      	ldr	r3, [pc, #428]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	22f8      	movs	r2, #248	@ 0xf8
 8007446:	4393      	bics	r3, r2
 8007448:	0019      	movs	r1, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	00da      	lsls	r2, r3, #3
 8007450:	4b67      	ldr	r3, [pc, #412]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007452:	430a      	orrs	r2, r1
 8007454:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007456:	e041      	b.n	80074dc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d024      	beq.n	80074aa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007460:	4b63      	ldr	r3, [pc, #396]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b62      	ldr	r3, [pc, #392]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007466:	2101      	movs	r1, #1
 8007468:	430a      	orrs	r2, r1
 800746a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800746c:	f7fe fa98 	bl	80059a0 <HAL_GetTick>
 8007470:	0003      	movs	r3, r0
 8007472:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007474:	e008      	b.n	8007488 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007476:	f7fe fa93 	bl	80059a0 <HAL_GetTick>
 800747a:	0002      	movs	r2, r0
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e297      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007488:	4b59      	ldr	r3, [pc, #356]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2202      	movs	r2, #2
 800748e:	4013      	ands	r3, r2
 8007490:	d0f1      	beq.n	8007476 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007492:	4b57      	ldr	r3, [pc, #348]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	22f8      	movs	r2, #248	@ 0xf8
 8007498:	4393      	bics	r3, r2
 800749a:	0019      	movs	r1, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	00da      	lsls	r2, r3, #3
 80074a2:	4b53      	ldr	r3, [pc, #332]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80074a4:	430a      	orrs	r2, r1
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	e018      	b.n	80074dc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074aa:	4b51      	ldr	r3, [pc, #324]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	4b50      	ldr	r3, [pc, #320]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80074b0:	2101      	movs	r1, #1
 80074b2:	438a      	bics	r2, r1
 80074b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b6:	f7fe fa73 	bl	80059a0 <HAL_GetTick>
 80074ba:	0003      	movs	r3, r0
 80074bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074be:	e008      	b.n	80074d2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074c0:	f7fe fa6e 	bl	80059a0 <HAL_GetTick>
 80074c4:	0002      	movs	r2, r0
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e272      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074d2:	4b47      	ldr	r3, [pc, #284]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2202      	movs	r2, #2
 80074d8:	4013      	ands	r3, r2
 80074da:	d1f1      	bne.n	80074c0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2208      	movs	r2, #8
 80074e2:	4013      	ands	r3, r2
 80074e4:	d036      	beq.n	8007554 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d019      	beq.n	8007522 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ee:	4b40      	ldr	r3, [pc, #256]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80074f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074f2:	4b3f      	ldr	r3, [pc, #252]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80074f4:	2101      	movs	r1, #1
 80074f6:	430a      	orrs	r2, r1
 80074f8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074fa:	f7fe fa51 	bl	80059a0 <HAL_GetTick>
 80074fe:	0003      	movs	r3, r0
 8007500:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007504:	f7fe fa4c 	bl	80059a0 <HAL_GetTick>
 8007508:	0002      	movs	r2, r0
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e250      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007516:	4b36      	ldr	r3, [pc, #216]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751a:	2202      	movs	r2, #2
 800751c:	4013      	ands	r3, r2
 800751e:	d0f1      	beq.n	8007504 <HAL_RCC_OscConfig+0x24c>
 8007520:	e018      	b.n	8007554 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007522:	4b33      	ldr	r3, [pc, #204]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007526:	4b32      	ldr	r3, [pc, #200]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007528:	2101      	movs	r1, #1
 800752a:	438a      	bics	r2, r1
 800752c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800752e:	f7fe fa37 	bl	80059a0 <HAL_GetTick>
 8007532:	0003      	movs	r3, r0
 8007534:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007538:	f7fe fa32 	bl	80059a0 <HAL_GetTick>
 800753c:	0002      	movs	r2, r0
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e236      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800754a:	4b29      	ldr	r3, [pc, #164]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800754c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754e:	2202      	movs	r2, #2
 8007550:	4013      	ands	r3, r2
 8007552:	d1f1      	bne.n	8007538 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2204      	movs	r2, #4
 800755a:	4013      	ands	r3, r2
 800755c:	d100      	bne.n	8007560 <HAL_RCC_OscConfig+0x2a8>
 800755e:	e0b5      	b.n	80076cc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007560:	201f      	movs	r0, #31
 8007562:	183b      	adds	r3, r7, r0
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007568:	4b21      	ldr	r3, [pc, #132]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	2380      	movs	r3, #128	@ 0x80
 800756e:	055b      	lsls	r3, r3, #21
 8007570:	4013      	ands	r3, r2
 8007572:	d110      	bne.n	8007596 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007574:	4b1e      	ldr	r3, [pc, #120]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007576:	69da      	ldr	r2, [r3, #28]
 8007578:	4b1d      	ldr	r3, [pc, #116]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 800757a:	2180      	movs	r1, #128	@ 0x80
 800757c:	0549      	lsls	r1, r1, #21
 800757e:	430a      	orrs	r2, r1
 8007580:	61da      	str	r2, [r3, #28]
 8007582:	4b1b      	ldr	r3, [pc, #108]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 8007584:	69da      	ldr	r2, [r3, #28]
 8007586:	2380      	movs	r3, #128	@ 0x80
 8007588:	055b      	lsls	r3, r3, #21
 800758a:	4013      	ands	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007590:	183b      	adds	r3, r7, r0
 8007592:	2201      	movs	r2, #1
 8007594:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007596:	4b19      	ldr	r3, [pc, #100]	@ (80075fc <HAL_RCC_OscConfig+0x344>)
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	2380      	movs	r3, #128	@ 0x80
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	4013      	ands	r3, r2
 80075a0:	d11a      	bne.n	80075d8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075a2:	4b16      	ldr	r3, [pc, #88]	@ (80075fc <HAL_RCC_OscConfig+0x344>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4b15      	ldr	r3, [pc, #84]	@ (80075fc <HAL_RCC_OscConfig+0x344>)
 80075a8:	2180      	movs	r1, #128	@ 0x80
 80075aa:	0049      	lsls	r1, r1, #1
 80075ac:	430a      	orrs	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075b0:	f7fe f9f6 	bl	80059a0 <HAL_GetTick>
 80075b4:	0003      	movs	r3, r0
 80075b6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ba:	f7fe f9f1 	bl	80059a0 <HAL_GetTick>
 80075be:	0002      	movs	r2, r0
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b64      	cmp	r3, #100	@ 0x64
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e1f5      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075cc:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <HAL_RCC_OscConfig+0x344>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	2380      	movs	r3, #128	@ 0x80
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	4013      	ands	r3, r2
 80075d6:	d0f0      	beq.n	80075ba <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d10f      	bne.n	8007600 <HAL_RCC_OscConfig+0x348>
 80075e0:	4b03      	ldr	r3, [pc, #12]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	4b02      	ldr	r3, [pc, #8]	@ (80075f0 <HAL_RCC_OscConfig+0x338>)
 80075e6:	2101      	movs	r1, #1
 80075e8:	430a      	orrs	r2, r1
 80075ea:	621a      	str	r2, [r3, #32]
 80075ec:	e036      	b.n	800765c <HAL_RCC_OscConfig+0x3a4>
 80075ee:	46c0      	nop			@ (mov r8, r8)
 80075f0:	40021000 	.word	0x40021000
 80075f4:	fffeffff 	.word	0xfffeffff
 80075f8:	fffbffff 	.word	0xfffbffff
 80075fc:	40007000 	.word	0x40007000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10c      	bne.n	8007622 <HAL_RCC_OscConfig+0x36a>
 8007608:	4bca      	ldr	r3, [pc, #808]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800760a:	6a1a      	ldr	r2, [r3, #32]
 800760c:	4bc9      	ldr	r3, [pc, #804]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800760e:	2101      	movs	r1, #1
 8007610:	438a      	bics	r2, r1
 8007612:	621a      	str	r2, [r3, #32]
 8007614:	4bc7      	ldr	r3, [pc, #796]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	4bc6      	ldr	r3, [pc, #792]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800761a:	2104      	movs	r1, #4
 800761c:	438a      	bics	r2, r1
 800761e:	621a      	str	r2, [r3, #32]
 8007620:	e01c      	b.n	800765c <HAL_RCC_OscConfig+0x3a4>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	2b05      	cmp	r3, #5
 8007628:	d10c      	bne.n	8007644 <HAL_RCC_OscConfig+0x38c>
 800762a:	4bc2      	ldr	r3, [pc, #776]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800762c:	6a1a      	ldr	r2, [r3, #32]
 800762e:	4bc1      	ldr	r3, [pc, #772]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007630:	2104      	movs	r1, #4
 8007632:	430a      	orrs	r2, r1
 8007634:	621a      	str	r2, [r3, #32]
 8007636:	4bbf      	ldr	r3, [pc, #764]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007638:	6a1a      	ldr	r2, [r3, #32]
 800763a:	4bbe      	ldr	r3, [pc, #760]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800763c:	2101      	movs	r1, #1
 800763e:	430a      	orrs	r2, r1
 8007640:	621a      	str	r2, [r3, #32]
 8007642:	e00b      	b.n	800765c <HAL_RCC_OscConfig+0x3a4>
 8007644:	4bbb      	ldr	r3, [pc, #748]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007646:	6a1a      	ldr	r2, [r3, #32]
 8007648:	4bba      	ldr	r3, [pc, #744]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800764a:	2101      	movs	r1, #1
 800764c:	438a      	bics	r2, r1
 800764e:	621a      	str	r2, [r3, #32]
 8007650:	4bb8      	ldr	r3, [pc, #736]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007652:	6a1a      	ldr	r2, [r3, #32]
 8007654:	4bb7      	ldr	r3, [pc, #732]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007656:	2104      	movs	r1, #4
 8007658:	438a      	bics	r2, r1
 800765a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d014      	beq.n	800768e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007664:	f7fe f99c 	bl	80059a0 <HAL_GetTick>
 8007668:	0003      	movs	r3, r0
 800766a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800766c:	e009      	b.n	8007682 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800766e:	f7fe f997 	bl	80059a0 <HAL_GetTick>
 8007672:	0002      	movs	r2, r0
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	4aaf      	ldr	r2, [pc, #700]	@ (8007938 <HAL_RCC_OscConfig+0x680>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e19a      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007682:	4bac      	ldr	r3, [pc, #688]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	2202      	movs	r2, #2
 8007688:	4013      	ands	r3, r2
 800768a:	d0f0      	beq.n	800766e <HAL_RCC_OscConfig+0x3b6>
 800768c:	e013      	b.n	80076b6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800768e:	f7fe f987 	bl	80059a0 <HAL_GetTick>
 8007692:	0003      	movs	r3, r0
 8007694:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007696:	e009      	b.n	80076ac <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007698:	f7fe f982 	bl	80059a0 <HAL_GetTick>
 800769c:	0002      	movs	r2, r0
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	4aa5      	ldr	r2, [pc, #660]	@ (8007938 <HAL_RCC_OscConfig+0x680>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e185      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ac:	4ba1      	ldr	r3, [pc, #644]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	2202      	movs	r2, #2
 80076b2:	4013      	ands	r3, r2
 80076b4:	d1f0      	bne.n	8007698 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80076b6:	231f      	movs	r3, #31
 80076b8:	18fb      	adds	r3, r7, r3
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d105      	bne.n	80076cc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076c0:	4b9c      	ldr	r3, [pc, #624]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	4b9b      	ldr	r3, [pc, #620]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80076c6:	499d      	ldr	r1, [pc, #628]	@ (800793c <HAL_RCC_OscConfig+0x684>)
 80076c8:	400a      	ands	r2, r1
 80076ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2210      	movs	r2, #16
 80076d2:	4013      	ands	r3, r2
 80076d4:	d063      	beq.n	800779e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d12a      	bne.n	8007734 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80076de:	4b95      	ldr	r3, [pc, #596]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80076e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076e2:	4b94      	ldr	r3, [pc, #592]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80076e4:	2104      	movs	r1, #4
 80076e6:	430a      	orrs	r2, r1
 80076e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80076ea:	4b92      	ldr	r3, [pc, #584]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80076ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ee:	4b91      	ldr	r3, [pc, #580]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80076f0:	2101      	movs	r1, #1
 80076f2:	430a      	orrs	r2, r1
 80076f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076f6:	f7fe f953 	bl	80059a0 <HAL_GetTick>
 80076fa:	0003      	movs	r3, r0
 80076fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007700:	f7fe f94e 	bl	80059a0 <HAL_GetTick>
 8007704:	0002      	movs	r2, r0
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e152      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007712:	4b88      	ldr	r3, [pc, #544]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007716:	2202      	movs	r2, #2
 8007718:	4013      	ands	r3, r2
 800771a:	d0f1      	beq.n	8007700 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800771c:	4b85      	ldr	r3, [pc, #532]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800771e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007720:	22f8      	movs	r2, #248	@ 0xf8
 8007722:	4393      	bics	r3, r2
 8007724:	0019      	movs	r1, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	00da      	lsls	r2, r3, #3
 800772c:	4b81      	ldr	r3, [pc, #516]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800772e:	430a      	orrs	r2, r1
 8007730:	635a      	str	r2, [r3, #52]	@ 0x34
 8007732:	e034      	b.n	800779e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	3305      	adds	r3, #5
 800773a:	d111      	bne.n	8007760 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800773c:	4b7d      	ldr	r3, [pc, #500]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800773e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007740:	4b7c      	ldr	r3, [pc, #496]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007742:	2104      	movs	r1, #4
 8007744:	438a      	bics	r2, r1
 8007746:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007748:	4b7a      	ldr	r3, [pc, #488]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800774a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800774c:	22f8      	movs	r2, #248	@ 0xf8
 800774e:	4393      	bics	r3, r2
 8007750:	0019      	movs	r1, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	00da      	lsls	r2, r3, #3
 8007758:	4b76      	ldr	r3, [pc, #472]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800775a:	430a      	orrs	r2, r1
 800775c:	635a      	str	r2, [r3, #52]	@ 0x34
 800775e:	e01e      	b.n	800779e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007760:	4b74      	ldr	r3, [pc, #464]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007764:	4b73      	ldr	r3, [pc, #460]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007766:	2104      	movs	r1, #4
 8007768:	430a      	orrs	r2, r1
 800776a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800776c:	4b71      	ldr	r3, [pc, #452]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800776e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007770:	4b70      	ldr	r3, [pc, #448]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007772:	2101      	movs	r1, #1
 8007774:	438a      	bics	r2, r1
 8007776:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007778:	f7fe f912 	bl	80059a0 <HAL_GetTick>
 800777c:	0003      	movs	r3, r0
 800777e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007780:	e008      	b.n	8007794 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007782:	f7fe f90d 	bl	80059a0 <HAL_GetTick>
 8007786:	0002      	movs	r2, r0
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e111      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007794:	4b67      	ldr	r3, [pc, #412]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007798:	2202      	movs	r2, #2
 800779a:	4013      	ands	r3, r2
 800779c:	d1f1      	bne.n	8007782 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2220      	movs	r2, #32
 80077a4:	4013      	ands	r3, r2
 80077a6:	d05c      	beq.n	8007862 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80077a8:	4b62      	ldr	r3, [pc, #392]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	220c      	movs	r2, #12
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b0c      	cmp	r3, #12
 80077b2:	d00e      	beq.n	80077d2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80077b4:	4b5f      	ldr	r3, [pc, #380]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	220c      	movs	r2, #12
 80077ba:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d114      	bne.n	80077ea <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80077c0:	4b5c      	ldr	r3, [pc, #368]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	23c0      	movs	r3, #192	@ 0xc0
 80077c6:	025b      	lsls	r3, r3, #9
 80077c8:	401a      	ands	r2, r3
 80077ca:	23c0      	movs	r3, #192	@ 0xc0
 80077cc:	025b      	lsls	r3, r3, #9
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d10b      	bne.n	80077ea <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80077d2:	4b58      	ldr	r3, [pc, #352]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80077d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077d6:	2380      	movs	r3, #128	@ 0x80
 80077d8:	029b      	lsls	r3, r3, #10
 80077da:	4013      	ands	r3, r2
 80077dc:	d040      	beq.n	8007860 <HAL_RCC_OscConfig+0x5a8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d03c      	beq.n	8007860 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e0e6      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d01b      	beq.n	800782a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80077f2:	4b50      	ldr	r3, [pc, #320]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80077f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80077f8:	2180      	movs	r1, #128	@ 0x80
 80077fa:	0249      	lsls	r1, r1, #9
 80077fc:	430a      	orrs	r2, r1
 80077fe:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007800:	f7fe f8ce 	bl	80059a0 <HAL_GetTick>
 8007804:	0003      	movs	r3, r0
 8007806:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007808:	e008      	b.n	800781c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800780a:	f7fe f8c9 	bl	80059a0 <HAL_GetTick>
 800780e:	0002      	movs	r2, r0
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e0cd      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800781c:	4b45      	ldr	r3, [pc, #276]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800781e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007820:	2380      	movs	r3, #128	@ 0x80
 8007822:	029b      	lsls	r3, r3, #10
 8007824:	4013      	ands	r3, r2
 8007826:	d0f0      	beq.n	800780a <HAL_RCC_OscConfig+0x552>
 8007828:	e01b      	b.n	8007862 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800782a:	4b42      	ldr	r3, [pc, #264]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800782c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800782e:	4b41      	ldr	r3, [pc, #260]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007830:	4943      	ldr	r1, [pc, #268]	@ (8007940 <HAL_RCC_OscConfig+0x688>)
 8007832:	400a      	ands	r2, r1
 8007834:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007836:	f7fe f8b3 	bl	80059a0 <HAL_GetTick>
 800783a:	0003      	movs	r3, r0
 800783c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800783e:	e008      	b.n	8007852 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007840:	f7fe f8ae 	bl	80059a0 <HAL_GetTick>
 8007844:	0002      	movs	r2, r0
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e0b2      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007852:	4b38      	ldr	r3, [pc, #224]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007856:	2380      	movs	r3, #128	@ 0x80
 8007858:	029b      	lsls	r3, r3, #10
 800785a:	4013      	ands	r3, r2
 800785c:	d1f0      	bne.n	8007840 <HAL_RCC_OscConfig+0x588>
 800785e:	e000      	b.n	8007862 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007860:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007866:	2b00      	cmp	r3, #0
 8007868:	d100      	bne.n	800786c <HAL_RCC_OscConfig+0x5b4>
 800786a:	e0a4      	b.n	80079b6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800786c:	4b31      	ldr	r3, [pc, #196]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	220c      	movs	r2, #12
 8007872:	4013      	ands	r3, r2
 8007874:	2b08      	cmp	r3, #8
 8007876:	d100      	bne.n	800787a <HAL_RCC_OscConfig+0x5c2>
 8007878:	e078      	b.n	800796c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	2b02      	cmp	r3, #2
 8007880:	d14c      	bne.n	800791c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007882:	4b2c      	ldr	r3, [pc, #176]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	4b2b      	ldr	r3, [pc, #172]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007888:	492e      	ldr	r1, [pc, #184]	@ (8007944 <HAL_RCC_OscConfig+0x68c>)
 800788a:	400a      	ands	r2, r1
 800788c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800788e:	f7fe f887 	bl	80059a0 <HAL_GetTick>
 8007892:	0003      	movs	r3, r0
 8007894:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007898:	f7fe f882 	bl	80059a0 <HAL_GetTick>
 800789c:	0002      	movs	r2, r0
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e086      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078aa:	4b22      	ldr	r3, [pc, #136]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	2380      	movs	r3, #128	@ 0x80
 80078b0:	049b      	lsls	r3, r3, #18
 80078b2:	4013      	ands	r3, r2
 80078b4:	d1f0      	bne.n	8007898 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ba:	220f      	movs	r2, #15
 80078bc:	4393      	bics	r3, r2
 80078be:	0019      	movs	r1, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80078c6:	430a      	orrs	r2, r1
 80078c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007948 <HAL_RCC_OscConfig+0x690>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	0019      	movs	r1, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	431a      	orrs	r2, r3
 80078de:	4b15      	ldr	r3, [pc, #84]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80078e0:	430a      	orrs	r2, r1
 80078e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078e4:	4b13      	ldr	r3, [pc, #76]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	4b12      	ldr	r3, [pc, #72]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 80078ea:	2180      	movs	r1, #128	@ 0x80
 80078ec:	0449      	lsls	r1, r1, #17
 80078ee:	430a      	orrs	r2, r1
 80078f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f2:	f7fe f855 	bl	80059a0 <HAL_GetTick>
 80078f6:	0003      	movs	r3, r0
 80078f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078fc:	f7fe f850 	bl	80059a0 <HAL_GetTick>
 8007900:	0002      	movs	r2, r0
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e054      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800790e:	4b09      	ldr	r3, [pc, #36]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	2380      	movs	r3, #128	@ 0x80
 8007914:	049b      	lsls	r3, r3, #18
 8007916:	4013      	ands	r3, r2
 8007918:	d0f0      	beq.n	80078fc <HAL_RCC_OscConfig+0x644>
 800791a:	e04c      	b.n	80079b6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800791c:	4b05      	ldr	r3, [pc, #20]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	4b04      	ldr	r3, [pc, #16]	@ (8007934 <HAL_RCC_OscConfig+0x67c>)
 8007922:	4908      	ldr	r1, [pc, #32]	@ (8007944 <HAL_RCC_OscConfig+0x68c>)
 8007924:	400a      	ands	r2, r1
 8007926:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007928:	f7fe f83a 	bl	80059a0 <HAL_GetTick>
 800792c:	0003      	movs	r3, r0
 800792e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007930:	e015      	b.n	800795e <HAL_RCC_OscConfig+0x6a6>
 8007932:	46c0      	nop			@ (mov r8, r8)
 8007934:	40021000 	.word	0x40021000
 8007938:	00001388 	.word	0x00001388
 800793c:	efffffff 	.word	0xefffffff
 8007940:	fffeffff 	.word	0xfffeffff
 8007944:	feffffff 	.word	0xfeffffff
 8007948:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800794c:	f7fe f828 	bl	80059a0 <HAL_GetTick>
 8007950:	0002      	movs	r2, r0
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e02c      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800795e:	4b18      	ldr	r3, [pc, #96]	@ (80079c0 <HAL_RCC_OscConfig+0x708>)
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	2380      	movs	r3, #128	@ 0x80
 8007964:	049b      	lsls	r3, r3, #18
 8007966:	4013      	ands	r3, r2
 8007968:	d1f0      	bne.n	800794c <HAL_RCC_OscConfig+0x694>
 800796a:	e024      	b.n	80079b6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e01f      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007978:	4b11      	ldr	r3, [pc, #68]	@ (80079c0 <HAL_RCC_OscConfig+0x708>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800797e:	4b10      	ldr	r3, [pc, #64]	@ (80079c0 <HAL_RCC_OscConfig+0x708>)
 8007980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007982:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	23c0      	movs	r3, #192	@ 0xc0
 8007988:	025b      	lsls	r3, r3, #9
 800798a:	401a      	ands	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007990:	429a      	cmp	r2, r3
 8007992:	d10e      	bne.n	80079b2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	220f      	movs	r2, #15
 8007998:	401a      	ands	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800799e:	429a      	cmp	r2, r3
 80079a0:	d107      	bne.n	80079b2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	23f0      	movs	r3, #240	@ 0xf0
 80079a6:	039b      	lsls	r3, r3, #14
 80079a8:	401a      	ands	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d001      	beq.n	80079b6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	0018      	movs	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	b008      	add	sp, #32
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40021000 	.word	0x40021000

080079c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e0bf      	b.n	8007b58 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079d8:	4b61      	ldr	r3, [pc, #388]	@ (8007b60 <HAL_RCC_ClockConfig+0x19c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2201      	movs	r2, #1
 80079de:	4013      	ands	r3, r2
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d911      	bls.n	8007a0a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079e6:	4b5e      	ldr	r3, [pc, #376]	@ (8007b60 <HAL_RCC_ClockConfig+0x19c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2201      	movs	r2, #1
 80079ec:	4393      	bics	r3, r2
 80079ee:	0019      	movs	r1, r3
 80079f0:	4b5b      	ldr	r3, [pc, #364]	@ (8007b60 <HAL_RCC_ClockConfig+0x19c>)
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f8:	4b59      	ldr	r3, [pc, #356]	@ (8007b60 <HAL_RCC_ClockConfig+0x19c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2201      	movs	r2, #1
 80079fe:	4013      	ands	r3, r2
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d001      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e0a6      	b.n	8007b58 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	4013      	ands	r3, r2
 8007a12:	d015      	beq.n	8007a40 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2204      	movs	r2, #4
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	d006      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007a1e:	4b51      	ldr	r3, [pc, #324]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	4b50      	ldr	r3, [pc, #320]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007a24:	21e0      	movs	r1, #224	@ 0xe0
 8007a26:	00c9      	lsls	r1, r1, #3
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	22f0      	movs	r2, #240	@ 0xf0
 8007a32:	4393      	bics	r3, r2
 8007a34:	0019      	movs	r1, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2201      	movs	r2, #1
 8007a46:	4013      	ands	r3, r2
 8007a48:	d04c      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d107      	bne.n	8007a62 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a52:	4b44      	ldr	r3, [pc, #272]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	2380      	movs	r3, #128	@ 0x80
 8007a58:	029b      	lsls	r3, r3, #10
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	d120      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e07a      	b.n	8007b58 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d107      	bne.n	8007a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	2380      	movs	r3, #128	@ 0x80
 8007a70:	049b      	lsls	r3, r3, #18
 8007a72:	4013      	ands	r3, r2
 8007a74:	d114      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e06e      	b.n	8007b58 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d107      	bne.n	8007a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8007a82:	4b38      	ldr	r3, [pc, #224]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a86:	2380      	movs	r3, #128	@ 0x80
 8007a88:	029b      	lsls	r3, r3, #10
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	d108      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e062      	b.n	8007b58 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a92:	4b34      	ldr	r3, [pc, #208]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2202      	movs	r2, #2
 8007a98:	4013      	ands	r3, r2
 8007a9a:	d101      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e05b      	b.n	8007b58 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aa0:	4b30      	ldr	r3, [pc, #192]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2203      	movs	r2, #3
 8007aa6:	4393      	bics	r3, r2
 8007aa8:	0019      	movs	r1, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	4b2d      	ldr	r3, [pc, #180]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ab4:	f7fd ff74 	bl	80059a0 <HAL_GetTick>
 8007ab8:	0003      	movs	r3, r0
 8007aba:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007abc:	e009      	b.n	8007ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007abe:	f7fd ff6f 	bl	80059a0 <HAL_GetTick>
 8007ac2:	0002      	movs	r2, r0
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	4a27      	ldr	r2, [pc, #156]	@ (8007b68 <HAL_RCC_ClockConfig+0x1a4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e042      	b.n	8007b58 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad2:	4b24      	ldr	r3, [pc, #144]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	220c      	movs	r2, #12
 8007ad8:	401a      	ands	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d1ec      	bne.n	8007abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8007b60 <HAL_RCC_ClockConfig+0x19c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	4013      	ands	r3, r2
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d211      	bcs.n	8007b16 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b60 <HAL_RCC_ClockConfig+0x19c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2201      	movs	r2, #1
 8007af8:	4393      	bics	r3, r2
 8007afa:	0019      	movs	r1, r3
 8007afc:	4b18      	ldr	r3, [pc, #96]	@ (8007b60 <HAL_RCC_ClockConfig+0x19c>)
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b04:	4b16      	ldr	r3, [pc, #88]	@ (8007b60 <HAL_RCC_ClockConfig+0x19c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d001      	beq.n	8007b16 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e020      	b.n	8007b58 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2204      	movs	r2, #4
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	d009      	beq.n	8007b34 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007b20:	4b10      	ldr	r3, [pc, #64]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	4a11      	ldr	r2, [pc, #68]	@ (8007b6c <HAL_RCC_ClockConfig+0x1a8>)
 8007b26:	4013      	ands	r3, r2
 8007b28:	0019      	movs	r1, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007b30:	430a      	orrs	r2, r1
 8007b32:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007b34:	f000 f820 	bl	8007b78 <HAL_RCC_GetSysClockFreq>
 8007b38:	0001      	movs	r1, r0
 8007b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b64 <HAL_RCC_ClockConfig+0x1a0>)
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	091b      	lsrs	r3, r3, #4
 8007b40:	220f      	movs	r2, #15
 8007b42:	4013      	ands	r3, r2
 8007b44:	4a0a      	ldr	r2, [pc, #40]	@ (8007b70 <HAL_RCC_ClockConfig+0x1ac>)
 8007b46:	5cd3      	ldrb	r3, [r2, r3]
 8007b48:	000a      	movs	r2, r1
 8007b4a:	40da      	lsrs	r2, r3
 8007b4c:	4b09      	ldr	r3, [pc, #36]	@ (8007b74 <HAL_RCC_ClockConfig+0x1b0>)
 8007b4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007b50:	2003      	movs	r0, #3
 8007b52:	f7fd fedf 	bl	8005914 <HAL_InitTick>
  
  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	0018      	movs	r0, r3
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b004      	add	sp, #16
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	40022000 	.word	0x40022000
 8007b64:	40021000 	.word	0x40021000
 8007b68:	00001388 	.word	0x00001388
 8007b6c:	fffff8ff 	.word	0xfffff8ff
 8007b70:	0800d6ec 	.word	0x0800d6ec
 8007b74:	20000048 	.word	0x20000048

08007b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	2300      	movs	r3, #0
 8007b84:	60bb      	str	r3, [r7, #8]
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007b92:	4b2d      	ldr	r3, [pc, #180]	@ (8007c48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	220c      	movs	r2, #12
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	2b0c      	cmp	r3, #12
 8007ba0:	d046      	beq.n	8007c30 <HAL_RCC_GetSysClockFreq+0xb8>
 8007ba2:	d848      	bhi.n	8007c36 <HAL_RCC_GetSysClockFreq+0xbe>
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d002      	beq.n	8007bae <HAL_RCC_GetSysClockFreq+0x36>
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d003      	beq.n	8007bb4 <HAL_RCC_GetSysClockFreq+0x3c>
 8007bac:	e043      	b.n	8007c36 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007bae:	4b27      	ldr	r3, [pc, #156]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007bb0:	613b      	str	r3, [r7, #16]
      break;
 8007bb2:	e043      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	0c9b      	lsrs	r3, r3, #18
 8007bb8:	220f      	movs	r2, #15
 8007bba:	4013      	ands	r3, r2
 8007bbc:	4a24      	ldr	r2, [pc, #144]	@ (8007c50 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007bbe:	5cd3      	ldrb	r3, [r2, r3]
 8007bc0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007bc2:	4b21      	ldr	r3, [pc, #132]	@ (8007c48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc6:	220f      	movs	r2, #15
 8007bc8:	4013      	ands	r3, r2
 8007bca:	4a22      	ldr	r2, [pc, #136]	@ (8007c54 <HAL_RCC_GetSysClockFreq+0xdc>)
 8007bcc:	5cd3      	ldrb	r3, [r2, r3]
 8007bce:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	23c0      	movs	r3, #192	@ 0xc0
 8007bd4:	025b      	lsls	r3, r3, #9
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	2380      	movs	r3, #128	@ 0x80
 8007bda:	025b      	lsls	r3, r3, #9
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d109      	bne.n	8007bf4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	481a      	ldr	r0, [pc, #104]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007be4:	f7f8 fab6 	bl	8000154 <__udivsi3>
 8007be8:	0003      	movs	r3, r0
 8007bea:	001a      	movs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4353      	muls	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	e01a      	b.n	8007c2a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	23c0      	movs	r3, #192	@ 0xc0
 8007bf8:	025b      	lsls	r3, r3, #9
 8007bfa:	401a      	ands	r2, r3
 8007bfc:	23c0      	movs	r3, #192	@ 0xc0
 8007bfe:	025b      	lsls	r3, r3, #9
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d109      	bne.n	8007c18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	4814      	ldr	r0, [pc, #80]	@ (8007c58 <HAL_RCC_GetSysClockFreq+0xe0>)
 8007c08:	f7f8 faa4 	bl	8000154 <__udivsi3>
 8007c0c:	0003      	movs	r3, r0
 8007c0e:	001a      	movs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4353      	muls	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007c18:	68b9      	ldr	r1, [r7, #8]
 8007c1a:	480c      	ldr	r0, [pc, #48]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007c1c:	f7f8 fa9a 	bl	8000154 <__udivsi3>
 8007c20:	0003      	movs	r3, r0
 8007c22:	001a      	movs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4353      	muls	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	613b      	str	r3, [r7, #16]
      break;
 8007c2e:	e005      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8007c30:	4b09      	ldr	r3, [pc, #36]	@ (8007c58 <HAL_RCC_GetSysClockFreq+0xe0>)
 8007c32:	613b      	str	r3, [r7, #16]
      break;
 8007c34:	e002      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c36:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007c38:	613b      	str	r3, [r7, #16]
      break;
 8007c3a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007c3c:	693b      	ldr	r3, [r7, #16]
}
 8007c3e:	0018      	movs	r0, r3
 8007c40:	46bd      	mov	sp, r7
 8007c42:	b006      	add	sp, #24
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	46c0      	nop			@ (mov r8, r8)
 8007c48:	40021000 	.word	0x40021000
 8007c4c:	007a1200 	.word	0x007a1200
 8007c50:	0800d704 	.word	0x0800d704
 8007c54:	0800d714 	.word	0x0800d714
 8007c58:	02dc6c00 	.word	0x02dc6c00

08007c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c60:	4b02      	ldr	r3, [pc, #8]	@ (8007c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8007c62:	681b      	ldr	r3, [r3, #0]
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	20000048 	.word	0x20000048

08007c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8007c74:	f7ff fff2 	bl	8007c5c <HAL_RCC_GetHCLKFreq>
 8007c78:	0001      	movs	r1, r0
 8007c7a:	4b06      	ldr	r3, [pc, #24]	@ (8007c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	0a1b      	lsrs	r3, r3, #8
 8007c80:	2207      	movs	r2, #7
 8007c82:	4013      	ands	r3, r2
 8007c84:	4a04      	ldr	r2, [pc, #16]	@ (8007c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c86:	5cd3      	ldrb	r3, [r2, r3]
 8007c88:	40d9      	lsrs	r1, r3
 8007c8a:	000b      	movs	r3, r1
}    
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	46c0      	nop			@ (mov r8, r8)
 8007c94:	40021000 	.word	0x40021000
 8007c98:	0800d6fc 	.word	0x0800d6fc

08007c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e042      	b.n	8007d34 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	223d      	movs	r2, #61	@ 0x3d
 8007cb2:	5c9b      	ldrb	r3, [r3, r2]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d107      	bne.n	8007cca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	223c      	movs	r2, #60	@ 0x3c
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f7fc fcf3 	bl	80046b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	223d      	movs	r2, #61	@ 0x3d
 8007cce:	2102      	movs	r1, #2
 8007cd0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	0019      	movs	r1, r3
 8007cdc:	0010      	movs	r0, r2
 8007cde:	f000 fad7 	bl	8008290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2246      	movs	r2, #70	@ 0x46
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	223e      	movs	r2, #62	@ 0x3e
 8007cee:	2101      	movs	r1, #1
 8007cf0:	5499      	strb	r1, [r3, r2]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	223f      	movs	r2, #63	@ 0x3f
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	5499      	strb	r1, [r3, r2]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2240      	movs	r2, #64	@ 0x40
 8007cfe:	2101      	movs	r1, #1
 8007d00:	5499      	strb	r1, [r3, r2]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2241      	movs	r2, #65	@ 0x41
 8007d06:	2101      	movs	r1, #1
 8007d08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2242      	movs	r2, #66	@ 0x42
 8007d0e:	2101      	movs	r1, #1
 8007d10:	5499      	strb	r1, [r3, r2]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2243      	movs	r2, #67	@ 0x43
 8007d16:	2101      	movs	r1, #1
 8007d18:	5499      	strb	r1, [r3, r2]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2244      	movs	r2, #68	@ 0x44
 8007d1e:	2101      	movs	r1, #1
 8007d20:	5499      	strb	r1, [r3, r2]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2245      	movs	r2, #69	@ 0x45
 8007d26:	2101      	movs	r1, #1
 8007d28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	223d      	movs	r2, #61	@ 0x3d
 8007d2e:	2101      	movs	r1, #1
 8007d30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	0018      	movs	r0, r3
 8007d36:	46bd      	mov	sp, r7
 8007d38:	b002      	add	sp, #8
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e042      	b.n	8007dd4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	223d      	movs	r2, #61	@ 0x3d
 8007d52:	5c9b      	ldrb	r3, [r3, r2]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d107      	bne.n	8007d6a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	223c      	movs	r2, #60	@ 0x3c
 8007d5e:	2100      	movs	r1, #0
 8007d60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	0018      	movs	r0, r3
 8007d66:	f000 f839 	bl	8007ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	223d      	movs	r2, #61	@ 0x3d
 8007d6e:	2102      	movs	r1, #2
 8007d70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	0019      	movs	r1, r3
 8007d7c:	0010      	movs	r0, r2
 8007d7e:	f000 fa87 	bl	8008290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2246      	movs	r2, #70	@ 0x46
 8007d86:	2101      	movs	r1, #1
 8007d88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	223e      	movs	r2, #62	@ 0x3e
 8007d8e:	2101      	movs	r1, #1
 8007d90:	5499      	strb	r1, [r3, r2]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	223f      	movs	r2, #63	@ 0x3f
 8007d96:	2101      	movs	r1, #1
 8007d98:	5499      	strb	r1, [r3, r2]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2240      	movs	r2, #64	@ 0x40
 8007d9e:	2101      	movs	r1, #1
 8007da0:	5499      	strb	r1, [r3, r2]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2241      	movs	r2, #65	@ 0x41
 8007da6:	2101      	movs	r1, #1
 8007da8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2242      	movs	r2, #66	@ 0x42
 8007dae:	2101      	movs	r1, #1
 8007db0:	5499      	strb	r1, [r3, r2]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2243      	movs	r2, #67	@ 0x43
 8007db6:	2101      	movs	r1, #1
 8007db8:	5499      	strb	r1, [r3, r2]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2244      	movs	r2, #68	@ 0x44
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	5499      	strb	r1, [r3, r2]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2245      	movs	r2, #69	@ 0x45
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	223d      	movs	r2, #61	@ 0x3d
 8007dce:	2101      	movs	r1, #1
 8007dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	b002      	add	sp, #8
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007de4:	46c0      	nop			@ (mov r8, r8)
 8007de6:	46bd      	mov	sp, r7
 8007de8:	b002      	add	sp, #8
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d108      	bne.n	8007e0e <HAL_TIM_PWM_Start+0x22>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	223e      	movs	r2, #62	@ 0x3e
 8007e00:	5c9b      	ldrb	r3, [r3, r2]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	3b01      	subs	r3, #1
 8007e06:	1e5a      	subs	r2, r3, #1
 8007e08:	4193      	sbcs	r3, r2
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	e01f      	b.n	8007e4e <HAL_TIM_PWM_Start+0x62>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d108      	bne.n	8007e26 <HAL_TIM_PWM_Start+0x3a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	223f      	movs	r2, #63	@ 0x3f
 8007e18:	5c9b      	ldrb	r3, [r3, r2]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	1e5a      	subs	r2, r3, #1
 8007e20:	4193      	sbcs	r3, r2
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	e013      	b.n	8007e4e <HAL_TIM_PWM_Start+0x62>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d108      	bne.n	8007e3e <HAL_TIM_PWM_Start+0x52>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2240      	movs	r2, #64	@ 0x40
 8007e30:	5c9b      	ldrb	r3, [r3, r2]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	1e5a      	subs	r2, r3, #1
 8007e38:	4193      	sbcs	r3, r2
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	e007      	b.n	8007e4e <HAL_TIM_PWM_Start+0x62>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2241      	movs	r2, #65	@ 0x41
 8007e42:	5c9b      	ldrb	r3, [r3, r2]
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	1e5a      	subs	r2, r3, #1
 8007e4a:	4193      	sbcs	r3, r2
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e074      	b.n	8007f40 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_PWM_Start+0x7a>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	223e      	movs	r2, #62	@ 0x3e
 8007e60:	2102      	movs	r1, #2
 8007e62:	5499      	strb	r1, [r3, r2]
 8007e64:	e013      	b.n	8007e8e <HAL_TIM_PWM_Start+0xa2>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIM_PWM_Start+0x8a>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	223f      	movs	r2, #63	@ 0x3f
 8007e70:	2102      	movs	r1, #2
 8007e72:	5499      	strb	r1, [r3, r2]
 8007e74:	e00b      	b.n	8007e8e <HAL_TIM_PWM_Start+0xa2>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d104      	bne.n	8007e86 <HAL_TIM_PWM_Start+0x9a>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2240      	movs	r2, #64	@ 0x40
 8007e80:	2102      	movs	r1, #2
 8007e82:	5499      	strb	r1, [r3, r2]
 8007e84:	e003      	b.n	8007e8e <HAL_TIM_PWM_Start+0xa2>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2241      	movs	r2, #65	@ 0x41
 8007e8a:	2102      	movs	r1, #2
 8007e8c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	2201      	movs	r2, #1
 8007e96:	0018      	movs	r0, r3
 8007e98:	f000 fd1e 	bl	80088d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a29      	ldr	r2, [pc, #164]	@ (8007f48 <HAL_TIM_PWM_Start+0x15c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00e      	beq.n	8007ec4 <HAL_TIM_PWM_Start+0xd8>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a28      	ldr	r2, [pc, #160]	@ (8007f4c <HAL_TIM_PWM_Start+0x160>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d009      	beq.n	8007ec4 <HAL_TIM_PWM_Start+0xd8>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a26      	ldr	r2, [pc, #152]	@ (8007f50 <HAL_TIM_PWM_Start+0x164>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d004      	beq.n	8007ec4 <HAL_TIM_PWM_Start+0xd8>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a25      	ldr	r2, [pc, #148]	@ (8007f54 <HAL_TIM_PWM_Start+0x168>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d101      	bne.n	8007ec8 <HAL_TIM_PWM_Start+0xdc>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <HAL_TIM_PWM_Start+0xde>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d008      	beq.n	8007ee0 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2180      	movs	r1, #128	@ 0x80
 8007eda:	0209      	lsls	r1, r1, #8
 8007edc:	430a      	orrs	r2, r1
 8007ede:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a18      	ldr	r2, [pc, #96]	@ (8007f48 <HAL_TIM_PWM_Start+0x15c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00f      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x11e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	2380      	movs	r3, #128	@ 0x80
 8007ef0:	05db      	lsls	r3, r3, #23
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d009      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x11e>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a17      	ldr	r2, [pc, #92]	@ (8007f58 <HAL_TIM_PWM_Start+0x16c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d004      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x11e>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a11      	ldr	r2, [pc, #68]	@ (8007f4c <HAL_TIM_PWM_Start+0x160>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d111      	bne.n	8007f2e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	2207      	movs	r2, #7
 8007f12:	4013      	ands	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b06      	cmp	r3, #6
 8007f1a:	d010      	beq.n	8007f3e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2101      	movs	r1, #1
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2c:	e007      	b.n	8007f3e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2101      	movs	r1, #1
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	0018      	movs	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b004      	add	sp, #16
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40012c00 	.word	0x40012c00
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40014400 	.word	0x40014400
 8007f54:	40014800 	.word	0x40014800
 8007f58:	40000400 	.word	0x40000400

08007f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f68:	2317      	movs	r3, #23
 8007f6a:	18fb      	adds	r3, r7, r3
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	223c      	movs	r2, #60	@ 0x3c
 8007f74:	5c9b      	ldrb	r3, [r3, r2]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <HAL_TIM_PWM_ConfigChannel+0x22>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e0ad      	b.n	80080da <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	223c      	movs	r2, #60	@ 0x3c
 8007f82:	2101      	movs	r1, #1
 8007f84:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b0c      	cmp	r3, #12
 8007f8a:	d100      	bne.n	8007f8e <HAL_TIM_PWM_ConfigChannel+0x32>
 8007f8c:	e076      	b.n	800807c <HAL_TIM_PWM_ConfigChannel+0x120>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b0c      	cmp	r3, #12
 8007f92:	d900      	bls.n	8007f96 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007f94:	e095      	b.n	80080c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	d04e      	beq.n	800803a <HAL_TIM_PWM_ConfigChannel+0xde>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d900      	bls.n	8007fa4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8007fa2:	e08e      	b.n	80080c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d021      	beq.n	8007ff4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8007fb0:	e087      	b.n	80080c2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	0011      	movs	r1, r2
 8007fba:	0018      	movs	r0, r3
 8007fbc:	f000 f9f6 	bl	80083ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699a      	ldr	r2, [r3, #24]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2108      	movs	r1, #8
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699a      	ldr	r2, [r3, #24]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2104      	movs	r1, #4
 8007fdc:	438a      	bics	r2, r1
 8007fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6999      	ldr	r1, [r3, #24]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	691a      	ldr	r2, [r3, #16]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	619a      	str	r2, [r3, #24]
      break;
 8007ff2:	e06b      	b.n	80080cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	0011      	movs	r1, r2
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	f000 fa5d 	bl	80084bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	699a      	ldr	r2, [r3, #24]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2180      	movs	r1, #128	@ 0x80
 800800e:	0109      	lsls	r1, r1, #4
 8008010:	430a      	orrs	r2, r1
 8008012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4931      	ldr	r1, [pc, #196]	@ (80080e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8008020:	400a      	ands	r2, r1
 8008022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6999      	ldr	r1, [r3, #24]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	021a      	lsls	r2, r3, #8
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	619a      	str	r2, [r3, #24]
      break;
 8008038:	e048      	b.n	80080cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	0011      	movs	r1, r2
 8008042:	0018      	movs	r0, r3
 8008044:	f000 fabe 	bl	80085c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	69da      	ldr	r2, [r3, #28]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2108      	movs	r1, #8
 8008054:	430a      	orrs	r2, r1
 8008056:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	69da      	ldr	r2, [r3, #28]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2104      	movs	r1, #4
 8008064:	438a      	bics	r2, r1
 8008066:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69d9      	ldr	r1, [r3, #28]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	691a      	ldr	r2, [r3, #16]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	61da      	str	r2, [r3, #28]
      break;
 800807a:	e027      	b.n	80080cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	0011      	movs	r1, r2
 8008084:	0018      	movs	r0, r3
 8008086:	f000 fb23 	bl	80086d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	69da      	ldr	r2, [r3, #28]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2180      	movs	r1, #128	@ 0x80
 8008096:	0109      	lsls	r1, r1, #4
 8008098:	430a      	orrs	r2, r1
 800809a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69da      	ldr	r2, [r3, #28]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	490f      	ldr	r1, [pc, #60]	@ (80080e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80080a8:	400a      	ands	r2, r1
 80080aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69d9      	ldr	r1, [r3, #28]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	021a      	lsls	r2, r3, #8
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	61da      	str	r2, [r3, #28]
      break;
 80080c0:	e004      	b.n	80080cc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80080c2:	2317      	movs	r3, #23
 80080c4:	18fb      	adds	r3, r7, r3
 80080c6:	2201      	movs	r2, #1
 80080c8:	701a      	strb	r2, [r3, #0]
      break;
 80080ca:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	223c      	movs	r2, #60	@ 0x3c
 80080d0:	2100      	movs	r1, #0
 80080d2:	5499      	strb	r1, [r3, r2]

  return status;
 80080d4:	2317      	movs	r3, #23
 80080d6:	18fb      	adds	r3, r7, r3
 80080d8:	781b      	ldrb	r3, [r3, #0]
}
 80080da:	0018      	movs	r0, r3
 80080dc:	46bd      	mov	sp, r7
 80080de:	b006      	add	sp, #24
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	46c0      	nop			@ (mov r8, r8)
 80080e4:	fffffbff 	.word	0xfffffbff

080080e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080f2:	230f      	movs	r3, #15
 80080f4:	18fb      	adds	r3, r7, r3
 80080f6:	2200      	movs	r2, #0
 80080f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	223c      	movs	r2, #60	@ 0x3c
 80080fe:	5c9b      	ldrb	r3, [r3, r2]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_TIM_ConfigClockSource+0x20>
 8008104:	2302      	movs	r3, #2
 8008106:	e0bc      	b.n	8008282 <HAL_TIM_ConfigClockSource+0x19a>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	223c      	movs	r2, #60	@ 0x3c
 800810c:	2101      	movs	r1, #1
 800810e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	223d      	movs	r2, #61	@ 0x3d
 8008114:	2102      	movs	r1, #2
 8008116:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2277      	movs	r2, #119	@ 0x77
 8008124:	4393      	bics	r3, r2
 8008126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	4a58      	ldr	r2, [pc, #352]	@ (800828c <HAL_TIM_ConfigClockSource+0x1a4>)
 800812c:	4013      	ands	r3, r2
 800812e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2280      	movs	r2, #128	@ 0x80
 800813e:	0192      	lsls	r2, r2, #6
 8008140:	4293      	cmp	r3, r2
 8008142:	d040      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0xde>
 8008144:	2280      	movs	r2, #128	@ 0x80
 8008146:	0192      	lsls	r2, r2, #6
 8008148:	4293      	cmp	r3, r2
 800814a:	d900      	bls.n	800814e <HAL_TIM_ConfigClockSource+0x66>
 800814c:	e088      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x178>
 800814e:	2280      	movs	r2, #128	@ 0x80
 8008150:	0152      	lsls	r2, r2, #5
 8008152:	4293      	cmp	r3, r2
 8008154:	d100      	bne.n	8008158 <HAL_TIM_ConfigClockSource+0x70>
 8008156:	e088      	b.n	800826a <HAL_TIM_ConfigClockSource+0x182>
 8008158:	2280      	movs	r2, #128	@ 0x80
 800815a:	0152      	lsls	r2, r2, #5
 800815c:	4293      	cmp	r3, r2
 800815e:	d900      	bls.n	8008162 <HAL_TIM_ConfigClockSource+0x7a>
 8008160:	e07e      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x178>
 8008162:	2b70      	cmp	r3, #112	@ 0x70
 8008164:	d018      	beq.n	8008198 <HAL_TIM_ConfigClockSource+0xb0>
 8008166:	d900      	bls.n	800816a <HAL_TIM_ConfigClockSource+0x82>
 8008168:	e07a      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x178>
 800816a:	2b60      	cmp	r3, #96	@ 0x60
 800816c:	d04f      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x126>
 800816e:	d900      	bls.n	8008172 <HAL_TIM_ConfigClockSource+0x8a>
 8008170:	e076      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x178>
 8008172:	2b50      	cmp	r3, #80	@ 0x50
 8008174:	d03b      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x106>
 8008176:	d900      	bls.n	800817a <HAL_TIM_ConfigClockSource+0x92>
 8008178:	e072      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x178>
 800817a:	2b40      	cmp	r3, #64	@ 0x40
 800817c:	d057      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x146>
 800817e:	d900      	bls.n	8008182 <HAL_TIM_ConfigClockSource+0x9a>
 8008180:	e06e      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x178>
 8008182:	2b30      	cmp	r3, #48	@ 0x30
 8008184:	d063      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x166>
 8008186:	d86b      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x178>
 8008188:	2b20      	cmp	r3, #32
 800818a:	d060      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x166>
 800818c:	d868      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x178>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d05d      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x166>
 8008192:	2b10      	cmp	r3, #16
 8008194:	d05b      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x166>
 8008196:	e063      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081a8:	f000 fb76 	bl	8008898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2277      	movs	r2, #119	@ 0x77
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	609a      	str	r2, [r3, #8]
      break;
 80081c4:	e052      	b.n	800826c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081d6:	f000 fb5f 	bl	8008898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2180      	movs	r1, #128	@ 0x80
 80081e6:	01c9      	lsls	r1, r1, #7
 80081e8:	430a      	orrs	r2, r1
 80081ea:	609a      	str	r2, [r3, #8]
      break;
 80081ec:	e03e      	b.n	800826c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081fa:	001a      	movs	r2, r3
 80081fc:	f000 fad2 	bl	80087a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2150      	movs	r1, #80	@ 0x50
 8008206:	0018      	movs	r0, r3
 8008208:	f000 fb2c 	bl	8008864 <TIM_ITRx_SetConfig>
      break;
 800820c:	e02e      	b.n	800826c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800821a:	001a      	movs	r2, r3
 800821c:	f000 faf0 	bl	8008800 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2160      	movs	r1, #96	@ 0x60
 8008226:	0018      	movs	r0, r3
 8008228:	f000 fb1c 	bl	8008864 <TIM_ITRx_SetConfig>
      break;
 800822c:	e01e      	b.n	800826c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800823a:	001a      	movs	r2, r3
 800823c:	f000 fab2 	bl	80087a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2140      	movs	r1, #64	@ 0x40
 8008246:	0018      	movs	r0, r3
 8008248:	f000 fb0c 	bl	8008864 <TIM_ITRx_SetConfig>
      break;
 800824c:	e00e      	b.n	800826c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	0019      	movs	r1, r3
 8008258:	0010      	movs	r0, r2
 800825a:	f000 fb03 	bl	8008864 <TIM_ITRx_SetConfig>
      break;
 800825e:	e005      	b.n	800826c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008260:	230f      	movs	r3, #15
 8008262:	18fb      	adds	r3, r7, r3
 8008264:	2201      	movs	r2, #1
 8008266:	701a      	strb	r2, [r3, #0]
      break;
 8008268:	e000      	b.n	800826c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800826a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	223d      	movs	r2, #61	@ 0x3d
 8008270:	2101      	movs	r1, #1
 8008272:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	223c      	movs	r2, #60	@ 0x3c
 8008278:	2100      	movs	r1, #0
 800827a:	5499      	strb	r1, [r3, r2]

  return status;
 800827c:	230f      	movs	r3, #15
 800827e:	18fb      	adds	r3, r7, r3
 8008280:	781b      	ldrb	r3, [r3, #0]
}
 8008282:	0018      	movs	r0, r3
 8008284:	46bd      	mov	sp, r7
 8008286:	b004      	add	sp, #16
 8008288:	bd80      	pop	{r7, pc}
 800828a:	46c0      	nop			@ (mov r8, r8)
 800828c:	ffff00ff 	.word	0xffff00ff

08008290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a3b      	ldr	r2, [pc, #236]	@ (8008390 <TIM_Base_SetConfig+0x100>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d008      	beq.n	80082ba <TIM_Base_SetConfig+0x2a>
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	2380      	movs	r3, #128	@ 0x80
 80082ac:	05db      	lsls	r3, r3, #23
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d003      	beq.n	80082ba <TIM_Base_SetConfig+0x2a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a37      	ldr	r2, [pc, #220]	@ (8008394 <TIM_Base_SetConfig+0x104>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d108      	bne.n	80082cc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2270      	movs	r2, #112	@ 0x70
 80082be:	4393      	bics	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a30      	ldr	r2, [pc, #192]	@ (8008390 <TIM_Base_SetConfig+0x100>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d018      	beq.n	8008306 <TIM_Base_SetConfig+0x76>
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	2380      	movs	r3, #128	@ 0x80
 80082d8:	05db      	lsls	r3, r3, #23
 80082da:	429a      	cmp	r2, r3
 80082dc:	d013      	beq.n	8008306 <TIM_Base_SetConfig+0x76>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a2c      	ldr	r2, [pc, #176]	@ (8008394 <TIM_Base_SetConfig+0x104>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00f      	beq.n	8008306 <TIM_Base_SetConfig+0x76>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a2b      	ldr	r2, [pc, #172]	@ (8008398 <TIM_Base_SetConfig+0x108>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d00b      	beq.n	8008306 <TIM_Base_SetConfig+0x76>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a2a      	ldr	r2, [pc, #168]	@ (800839c <TIM_Base_SetConfig+0x10c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d007      	beq.n	8008306 <TIM_Base_SetConfig+0x76>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a29      	ldr	r2, [pc, #164]	@ (80083a0 <TIM_Base_SetConfig+0x110>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d003      	beq.n	8008306 <TIM_Base_SetConfig+0x76>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a28      	ldr	r2, [pc, #160]	@ (80083a4 <TIM_Base_SetConfig+0x114>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d108      	bne.n	8008318 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4a27      	ldr	r2, [pc, #156]	@ (80083a8 <TIM_Base_SetConfig+0x118>)
 800830a:	4013      	ands	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2280      	movs	r2, #128	@ 0x80
 800831c:	4393      	bics	r3, r2
 800831e:	001a      	movs	r2, r3
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	4313      	orrs	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a13      	ldr	r2, [pc, #76]	@ (8008390 <TIM_Base_SetConfig+0x100>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00b      	beq.n	800835e <TIM_Base_SetConfig+0xce>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a14      	ldr	r2, [pc, #80]	@ (800839c <TIM_Base_SetConfig+0x10c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d007      	beq.n	800835e <TIM_Base_SetConfig+0xce>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a13      	ldr	r2, [pc, #76]	@ (80083a0 <TIM_Base_SetConfig+0x110>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d003      	beq.n	800835e <TIM_Base_SetConfig+0xce>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a12      	ldr	r2, [pc, #72]	@ (80083a4 <TIM_Base_SetConfig+0x114>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d103      	bne.n	8008366 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2201      	movs	r2, #1
 8008372:	4013      	ands	r3, r2
 8008374:	2b01      	cmp	r3, #1
 8008376:	d106      	bne.n	8008386 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	2201      	movs	r2, #1
 800837e:	4393      	bics	r3, r2
 8008380:	001a      	movs	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	611a      	str	r2, [r3, #16]
  }
}
 8008386:	46c0      	nop			@ (mov r8, r8)
 8008388:	46bd      	mov	sp, r7
 800838a:	b004      	add	sp, #16
 800838c:	bd80      	pop	{r7, pc}
 800838e:	46c0      	nop			@ (mov r8, r8)
 8008390:	40012c00 	.word	0x40012c00
 8008394:	40000400 	.word	0x40000400
 8008398:	40002000 	.word	0x40002000
 800839c:	40014000 	.word	0x40014000
 80083a0:	40014400 	.word	0x40014400
 80083a4:	40014800 	.word	0x40014800
 80083a8:	fffffcff 	.word	0xfffffcff

080083ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	2201      	movs	r2, #1
 80083c2:	4393      	bics	r3, r2
 80083c4:	001a      	movs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2270      	movs	r2, #112	@ 0x70
 80083da:	4393      	bics	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2203      	movs	r2, #3
 80083e2:	4393      	bics	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2202      	movs	r2, #2
 80083f4:	4393      	bics	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a27      	ldr	r2, [pc, #156]	@ (80084a4 <TIM_OC1_SetConfig+0xf8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00b      	beq.n	8008422 <TIM_OC1_SetConfig+0x76>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a26      	ldr	r2, [pc, #152]	@ (80084a8 <TIM_OC1_SetConfig+0xfc>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d007      	beq.n	8008422 <TIM_OC1_SetConfig+0x76>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a25      	ldr	r2, [pc, #148]	@ (80084ac <TIM_OC1_SetConfig+0x100>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d003      	beq.n	8008422 <TIM_OC1_SetConfig+0x76>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a24      	ldr	r2, [pc, #144]	@ (80084b0 <TIM_OC1_SetConfig+0x104>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d10c      	bne.n	800843c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2208      	movs	r2, #8
 8008426:	4393      	bics	r3, r2
 8008428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	4313      	orrs	r3, r2
 8008432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2204      	movs	r2, #4
 8008438:	4393      	bics	r3, r2
 800843a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a19      	ldr	r2, [pc, #100]	@ (80084a4 <TIM_OC1_SetConfig+0xf8>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d00b      	beq.n	800845c <TIM_OC1_SetConfig+0xb0>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a18      	ldr	r2, [pc, #96]	@ (80084a8 <TIM_OC1_SetConfig+0xfc>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d007      	beq.n	800845c <TIM_OC1_SetConfig+0xb0>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a17      	ldr	r2, [pc, #92]	@ (80084ac <TIM_OC1_SetConfig+0x100>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d003      	beq.n	800845c <TIM_OC1_SetConfig+0xb0>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a16      	ldr	r2, [pc, #88]	@ (80084b0 <TIM_OC1_SetConfig+0x104>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d111      	bne.n	8008480 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4a15      	ldr	r2, [pc, #84]	@ (80084b4 <TIM_OC1_SetConfig+0x108>)
 8008460:	4013      	ands	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	4a14      	ldr	r2, [pc, #80]	@ (80084b8 <TIM_OC1_SetConfig+0x10c>)
 8008468:	4013      	ands	r3, r2
 800846a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	4313      	orrs	r3, r2
 8008474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	4313      	orrs	r3, r2
 800847e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	621a      	str	r2, [r3, #32]
}
 800849a:	46c0      	nop			@ (mov r8, r8)
 800849c:	46bd      	mov	sp, r7
 800849e:	b006      	add	sp, #24
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	46c0      	nop			@ (mov r8, r8)
 80084a4:	40012c00 	.word	0x40012c00
 80084a8:	40014000 	.word	0x40014000
 80084ac:	40014400 	.word	0x40014400
 80084b0:	40014800 	.word	0x40014800
 80084b4:	fffffeff 	.word	0xfffffeff
 80084b8:	fffffdff 	.word	0xfffffdff

080084bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	2210      	movs	r2, #16
 80084d2:	4393      	bics	r3, r2
 80084d4:	001a      	movs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4a2e      	ldr	r2, [pc, #184]	@ (80085a4 <TIM_OC2_SetConfig+0xe8>)
 80084ea:	4013      	ands	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4a2d      	ldr	r2, [pc, #180]	@ (80085a8 <TIM_OC2_SetConfig+0xec>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	021b      	lsls	r3, r3, #8
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2220      	movs	r2, #32
 8008506:	4393      	bics	r3, r2
 8008508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	4313      	orrs	r3, r2
 8008514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a24      	ldr	r2, [pc, #144]	@ (80085ac <TIM_OC2_SetConfig+0xf0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d10d      	bne.n	800853a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2280      	movs	r2, #128	@ 0x80
 8008522:	4393      	bics	r3, r2
 8008524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	011b      	lsls	r3, r3, #4
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2240      	movs	r2, #64	@ 0x40
 8008536:	4393      	bics	r3, r2
 8008538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a1b      	ldr	r2, [pc, #108]	@ (80085ac <TIM_OC2_SetConfig+0xf0>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d00b      	beq.n	800855a <TIM_OC2_SetConfig+0x9e>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a1a      	ldr	r2, [pc, #104]	@ (80085b0 <TIM_OC2_SetConfig+0xf4>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d007      	beq.n	800855a <TIM_OC2_SetConfig+0x9e>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a19      	ldr	r2, [pc, #100]	@ (80085b4 <TIM_OC2_SetConfig+0xf8>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d003      	beq.n	800855a <TIM_OC2_SetConfig+0x9e>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a18      	ldr	r2, [pc, #96]	@ (80085b8 <TIM_OC2_SetConfig+0xfc>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d113      	bne.n	8008582 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	4a17      	ldr	r2, [pc, #92]	@ (80085bc <TIM_OC2_SetConfig+0x100>)
 800855e:	4013      	ands	r3, r2
 8008560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	4a16      	ldr	r2, [pc, #88]	@ (80085c0 <TIM_OC2_SetConfig+0x104>)
 8008566:	4013      	ands	r3, r2
 8008568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	4313      	orrs	r3, r2
 8008580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	621a      	str	r2, [r3, #32]
}
 800859c:	46c0      	nop			@ (mov r8, r8)
 800859e:	46bd      	mov	sp, r7
 80085a0:	b006      	add	sp, #24
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	ffff8fff 	.word	0xffff8fff
 80085a8:	fffffcff 	.word	0xfffffcff
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40014000 	.word	0x40014000
 80085b4:	40014400 	.word	0x40014400
 80085b8:	40014800 	.word	0x40014800
 80085bc:	fffffbff 	.word	0xfffffbff
 80085c0:	fffff7ff 	.word	0xfffff7ff

080085c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	4a33      	ldr	r2, [pc, #204]	@ (80086a8 <TIM_OC3_SetConfig+0xe4>)
 80085da:	401a      	ands	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2270      	movs	r2, #112	@ 0x70
 80085f0:	4393      	bics	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2203      	movs	r2, #3
 80085f8:	4393      	bics	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	4a28      	ldr	r2, [pc, #160]	@ (80086ac <TIM_OC3_SetConfig+0xe8>)
 800860a:	4013      	ands	r3, r2
 800860c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	4313      	orrs	r3, r2
 8008618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a24      	ldr	r2, [pc, #144]	@ (80086b0 <TIM_OC3_SetConfig+0xec>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d10d      	bne.n	800863e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	4a23      	ldr	r2, [pc, #140]	@ (80086b4 <TIM_OC3_SetConfig+0xf0>)
 8008626:	4013      	ands	r3, r2
 8008628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	4a1f      	ldr	r2, [pc, #124]	@ (80086b8 <TIM_OC3_SetConfig+0xf4>)
 800863a:	4013      	ands	r3, r2
 800863c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a1b      	ldr	r2, [pc, #108]	@ (80086b0 <TIM_OC3_SetConfig+0xec>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00b      	beq.n	800865e <TIM_OC3_SetConfig+0x9a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a1c      	ldr	r2, [pc, #112]	@ (80086bc <TIM_OC3_SetConfig+0xf8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d007      	beq.n	800865e <TIM_OC3_SetConfig+0x9a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a1b      	ldr	r2, [pc, #108]	@ (80086c0 <TIM_OC3_SetConfig+0xfc>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d003      	beq.n	800865e <TIM_OC3_SetConfig+0x9a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a1a      	ldr	r2, [pc, #104]	@ (80086c4 <TIM_OC3_SetConfig+0x100>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d113      	bne.n	8008686 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	4a19      	ldr	r2, [pc, #100]	@ (80086c8 <TIM_OC3_SetConfig+0x104>)
 8008662:	4013      	ands	r3, r2
 8008664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4a18      	ldr	r2, [pc, #96]	@ (80086cc <TIM_OC3_SetConfig+0x108>)
 800866a:	4013      	ands	r3, r2
 800866c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	4313      	orrs	r3, r2
 8008684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	621a      	str	r2, [r3, #32]
}
 80086a0:	46c0      	nop			@ (mov r8, r8)
 80086a2:	46bd      	mov	sp, r7
 80086a4:	b006      	add	sp, #24
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	fffffeff 	.word	0xfffffeff
 80086ac:	fffffdff 	.word	0xfffffdff
 80086b0:	40012c00 	.word	0x40012c00
 80086b4:	fffff7ff 	.word	0xfffff7ff
 80086b8:	fffffbff 	.word	0xfffffbff
 80086bc:	40014000 	.word	0x40014000
 80086c0:	40014400 	.word	0x40014400
 80086c4:	40014800 	.word	0x40014800
 80086c8:	ffffefff 	.word	0xffffefff
 80086cc:	ffffdfff 	.word	0xffffdfff

080086d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	4a26      	ldr	r2, [pc, #152]	@ (8008780 <TIM_OC4_SetConfig+0xb0>)
 80086e6:	401a      	ands	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	4a22      	ldr	r2, [pc, #136]	@ (8008784 <TIM_OC4_SetConfig+0xb4>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a21      	ldr	r2, [pc, #132]	@ (8008788 <TIM_OC4_SetConfig+0xb8>)
 8008704:	4013      	ands	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	021b      	lsls	r3, r3, #8
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	4313      	orrs	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	4a1d      	ldr	r2, [pc, #116]	@ (800878c <TIM_OC4_SetConfig+0xbc>)
 8008718:	4013      	ands	r3, r2
 800871a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	031b      	lsls	r3, r3, #12
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a19      	ldr	r2, [pc, #100]	@ (8008790 <TIM_OC4_SetConfig+0xc0>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d00b      	beq.n	8008748 <TIM_OC4_SetConfig+0x78>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a18      	ldr	r2, [pc, #96]	@ (8008794 <TIM_OC4_SetConfig+0xc4>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d007      	beq.n	8008748 <TIM_OC4_SetConfig+0x78>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a17      	ldr	r2, [pc, #92]	@ (8008798 <TIM_OC4_SetConfig+0xc8>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d003      	beq.n	8008748 <TIM_OC4_SetConfig+0x78>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a16      	ldr	r2, [pc, #88]	@ (800879c <TIM_OC4_SetConfig+0xcc>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d109      	bne.n	800875c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	4a15      	ldr	r2, [pc, #84]	@ (80087a0 <TIM_OC4_SetConfig+0xd0>)
 800874c:	4013      	ands	r3, r2
 800874e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	019b      	lsls	r3, r3, #6
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	621a      	str	r2, [r3, #32]
}
 8008776:	46c0      	nop			@ (mov r8, r8)
 8008778:	46bd      	mov	sp, r7
 800877a:	b006      	add	sp, #24
 800877c:	bd80      	pop	{r7, pc}
 800877e:	46c0      	nop			@ (mov r8, r8)
 8008780:	ffffefff 	.word	0xffffefff
 8008784:	ffff8fff 	.word	0xffff8fff
 8008788:	fffffcff 	.word	0xfffffcff
 800878c:	ffffdfff 	.word	0xffffdfff
 8008790:	40012c00 	.word	0x40012c00
 8008794:	40014000 	.word	0x40014000
 8008798:	40014400 	.word	0x40014400
 800879c:	40014800 	.word	0x40014800
 80087a0:	ffffbfff 	.word	0xffffbfff

080087a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	2201      	movs	r2, #1
 80087bc:	4393      	bics	r3, r2
 80087be:	001a      	movs	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	22f0      	movs	r2, #240	@ 0xf0
 80087ce:	4393      	bics	r3, r2
 80087d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	4313      	orrs	r3, r2
 80087da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	220a      	movs	r2, #10
 80087e0:	4393      	bics	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	621a      	str	r2, [r3, #32]
}
 80087f8:	46c0      	nop			@ (mov r8, r8)
 80087fa:	46bd      	mov	sp, r7
 80087fc:	b006      	add	sp, #24
 80087fe:	bd80      	pop	{r7, pc}

08008800 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	2210      	movs	r2, #16
 8008818:	4393      	bics	r3, r2
 800881a:	001a      	movs	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	4a0d      	ldr	r2, [pc, #52]	@ (8008860 <TIM_TI2_ConfigInputStage+0x60>)
 800882a:	4013      	ands	r3, r2
 800882c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	031b      	lsls	r3, r3, #12
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	4313      	orrs	r3, r2
 8008836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	22a0      	movs	r2, #160	@ 0xa0
 800883c:	4393      	bics	r3, r2
 800883e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	621a      	str	r2, [r3, #32]
}
 8008856:	46c0      	nop			@ (mov r8, r8)
 8008858:	46bd      	mov	sp, r7
 800885a:	b006      	add	sp, #24
 800885c:	bd80      	pop	{r7, pc}
 800885e:	46c0      	nop			@ (mov r8, r8)
 8008860:	ffff0fff 	.word	0xffff0fff

08008864 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2270      	movs	r2, #112	@ 0x70
 8008878:	4393      	bics	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4313      	orrs	r3, r2
 8008882:	2207      	movs	r2, #7
 8008884:	4313      	orrs	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	609a      	str	r2, [r3, #8]
}
 800888e:	46c0      	nop			@ (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b004      	add	sp, #16
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	4a09      	ldr	r2, [pc, #36]	@ (80088d4 <TIM_ETR_SetConfig+0x3c>)
 80088b0:	4013      	ands	r3, r2
 80088b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	021a      	lsls	r2, r3, #8
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	4313      	orrs	r3, r2
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	609a      	str	r2, [r3, #8]
}
 80088cc:	46c0      	nop			@ (mov r8, r8)
 80088ce:	46bd      	mov	sp, r7
 80088d0:	b006      	add	sp, #24
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	ffff00ff 	.word	0xffff00ff

080088d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	221f      	movs	r2, #31
 80088e8:	4013      	ands	r3, r2
 80088ea:	2201      	movs	r2, #1
 80088ec:	409a      	lsls	r2, r3
 80088ee:	0013      	movs	r3, r2
 80088f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	43d2      	mvns	r2, r2
 80088fa:	401a      	ands	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6a1a      	ldr	r2, [r3, #32]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	211f      	movs	r1, #31
 8008908:	400b      	ands	r3, r1
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	4099      	lsls	r1, r3
 800890e:	000b      	movs	r3, r1
 8008910:	431a      	orrs	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	621a      	str	r2, [r3, #32]
}
 8008916:	46c0      	nop			@ (mov r8, r8)
 8008918:	46bd      	mov	sp, r7
 800891a:	b006      	add	sp, #24
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d108      	bne.n	8008942 <HAL_TIMEx_PWMN_Start+0x22>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2242      	movs	r2, #66	@ 0x42
 8008934:	5c9b      	ldrb	r3, [r3, r2]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	3b01      	subs	r3, #1
 800893a:	1e5a      	subs	r2, r3, #1
 800893c:	4193      	sbcs	r3, r2
 800893e:	b2db      	uxtb	r3, r3
 8008940:	e01f      	b.n	8008982 <HAL_TIMEx_PWMN_Start+0x62>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b04      	cmp	r3, #4
 8008946:	d108      	bne.n	800895a <HAL_TIMEx_PWMN_Start+0x3a>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2243      	movs	r2, #67	@ 0x43
 800894c:	5c9b      	ldrb	r3, [r3, r2]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	3b01      	subs	r3, #1
 8008952:	1e5a      	subs	r2, r3, #1
 8008954:	4193      	sbcs	r3, r2
 8008956:	b2db      	uxtb	r3, r3
 8008958:	e013      	b.n	8008982 <HAL_TIMEx_PWMN_Start+0x62>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b08      	cmp	r3, #8
 800895e:	d108      	bne.n	8008972 <HAL_TIMEx_PWMN_Start+0x52>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2244      	movs	r2, #68	@ 0x44
 8008964:	5c9b      	ldrb	r3, [r3, r2]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	3b01      	subs	r3, #1
 800896a:	1e5a      	subs	r2, r3, #1
 800896c:	4193      	sbcs	r3, r2
 800896e:	b2db      	uxtb	r3, r3
 8008970:	e007      	b.n	8008982 <HAL_TIMEx_PWMN_Start+0x62>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2245      	movs	r2, #69	@ 0x45
 8008976:	5c9b      	ldrb	r3, [r3, r2]
 8008978:	b2db      	uxtb	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	1e5a      	subs	r2, r3, #1
 800897e:	4193      	sbcs	r3, r2
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e05b      	b.n	8008a42 <HAL_TIMEx_PWMN_Start+0x122>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d104      	bne.n	800899a <HAL_TIMEx_PWMN_Start+0x7a>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2242      	movs	r2, #66	@ 0x42
 8008994:	2102      	movs	r1, #2
 8008996:	5499      	strb	r1, [r3, r2]
 8008998:	e013      	b.n	80089c2 <HAL_TIMEx_PWMN_Start+0xa2>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b04      	cmp	r3, #4
 800899e:	d104      	bne.n	80089aa <HAL_TIMEx_PWMN_Start+0x8a>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2243      	movs	r2, #67	@ 0x43
 80089a4:	2102      	movs	r1, #2
 80089a6:	5499      	strb	r1, [r3, r2]
 80089a8:	e00b      	b.n	80089c2 <HAL_TIMEx_PWMN_Start+0xa2>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	d104      	bne.n	80089ba <HAL_TIMEx_PWMN_Start+0x9a>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2244      	movs	r2, #68	@ 0x44
 80089b4:	2102      	movs	r1, #2
 80089b6:	5499      	strb	r1, [r3, r2]
 80089b8:	e003      	b.n	80089c2 <HAL_TIMEx_PWMN_Start+0xa2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2245      	movs	r2, #69	@ 0x45
 80089be:	2102      	movs	r1, #2
 80089c0:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	2204      	movs	r2, #4
 80089ca:	0018      	movs	r0, r3
 80089cc:	f000 f8a2 	bl	8008b14 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2180      	movs	r1, #128	@ 0x80
 80089dc:	0209      	lsls	r1, r1, #8
 80089de:	430a      	orrs	r2, r1
 80089e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a19      	ldr	r2, [pc, #100]	@ (8008a4c <HAL_TIMEx_PWMN_Start+0x12c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00f      	beq.n	8008a0c <HAL_TIMEx_PWMN_Start+0xec>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	2380      	movs	r3, #128	@ 0x80
 80089f2:	05db      	lsls	r3, r3, #23
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d009      	beq.n	8008a0c <HAL_TIMEx_PWMN_Start+0xec>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a14      	ldr	r2, [pc, #80]	@ (8008a50 <HAL_TIMEx_PWMN_Start+0x130>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d004      	beq.n	8008a0c <HAL_TIMEx_PWMN_Start+0xec>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a13      	ldr	r2, [pc, #76]	@ (8008a54 <HAL_TIMEx_PWMN_Start+0x134>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d111      	bne.n	8008a30 <HAL_TIMEx_PWMN_Start+0x110>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	2207      	movs	r2, #7
 8008a14:	4013      	ands	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b06      	cmp	r3, #6
 8008a1c:	d010      	beq.n	8008a40 <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2101      	movs	r1, #1
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a2e:	e007      	b.n	8008a40 <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	0018      	movs	r0, r3
 8008a44:	46bd      	mov	sp, r7
 8008a46:	b004      	add	sp, #16
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	46c0      	nop			@ (mov r8, r8)
 8008a4c:	40012c00 	.word	0x40012c00
 8008a50:	40000400 	.word	0x40000400
 8008a54:	40014000 	.word	0x40014000

08008a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	223c      	movs	r2, #60	@ 0x3c
 8008a6a:	5c9b      	ldrb	r3, [r3, r2]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e03e      	b.n	8008af2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	223c      	movs	r2, #60	@ 0x3c
 8008a78:	2101      	movs	r1, #1
 8008a7a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	22ff      	movs	r2, #255	@ 0xff
 8008a80:	4393      	bics	r3, r2
 8008a82:	001a      	movs	r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8008afc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8008a90:	401a      	ands	r2, r3
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4a18      	ldr	r2, [pc, #96]	@ (8008b00 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8008a9e:	401a      	ands	r2, r3
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4a16      	ldr	r2, [pc, #88]	@ (8008b04 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008aac:	401a      	ands	r2, r3
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4a13      	ldr	r2, [pc, #76]	@ (8008b08 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8008aba:	401a      	ands	r2, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4a11      	ldr	r2, [pc, #68]	@ (8008b0c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8008ac8:	401a      	ands	r2, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8008b10 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8008ad6:	401a      	ands	r2, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	223c      	movs	r2, #60	@ 0x3c
 8008aec:	2100      	movs	r1, #0
 8008aee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	0018      	movs	r0, r3
 8008af4:	46bd      	mov	sp, r7
 8008af6:	b004      	add	sp, #16
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	46c0      	nop			@ (mov r8, r8)
 8008afc:	fffffcff 	.word	0xfffffcff
 8008b00:	fffffbff 	.word	0xfffffbff
 8008b04:	fffff7ff 	.word	0xfffff7ff
 8008b08:	ffffefff 	.word	0xffffefff
 8008b0c:	ffffdfff 	.word	0xffffdfff
 8008b10:	ffffbfff 	.word	0xffffbfff

08008b14 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	220f      	movs	r2, #15
 8008b24:	4013      	ands	r3, r2
 8008b26:	2204      	movs	r2, #4
 8008b28:	409a      	lsls	r2, r3
 8008b2a:	0013      	movs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	43d2      	mvns	r2, r2
 8008b36:	401a      	ands	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a1a      	ldr	r2, [r3, #32]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	210f      	movs	r1, #15
 8008b44:	400b      	ands	r3, r1
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	4099      	lsls	r1, r3
 8008b4a:	000b      	movs	r3, r1
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	621a      	str	r2, [r3, #32]
}
 8008b52:	46c0      	nop			@ (mov r8, r8)
 8008b54:	46bd      	mov	sp, r7
 8008b56:	b006      	add	sp, #24
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e044      	b.n	8008bf8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d107      	bne.n	8008b86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2278      	movs	r2, #120	@ 0x78
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7fb ff55 	bl	8004a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2224      	movs	r2, #36	@ 0x24
 8008b8a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2101      	movs	r1, #1
 8008b98:	438a      	bics	r2, r1
 8008b9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f000 fda6 	bl	80096f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f000 fc1a 	bl	80093e8 <UART_SetConfig>
 8008bb4:	0003      	movs	r3, r0
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d101      	bne.n	8008bbe <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e01c      	b.n	8008bf8 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	490d      	ldr	r1, [pc, #52]	@ (8008c00 <HAL_UART_Init+0xa4>)
 8008bca:	400a      	ands	r2, r1
 8008bcc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	212a      	movs	r1, #42	@ 0x2a
 8008bda:	438a      	bics	r2, r1
 8008bdc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2101      	movs	r1, #1
 8008bea:	430a      	orrs	r2, r1
 8008bec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f000 fe35 	bl	8009860 <UART_CheckIdleState>
 8008bf6:	0003      	movs	r3, r0
}
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	b002      	add	sp, #8
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	ffffb7ff 	.word	0xffffb7ff

08008c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08a      	sub	sp, #40	@ 0x28
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	1dbb      	adds	r3, r7, #6
 8008c12:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c18:	2b20      	cmp	r3, #32
 8008c1a:	d000      	beq.n	8008c1e <HAL_UART_Transmit+0x1a>
 8008c1c:	e08c      	b.n	8008d38 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <HAL_UART_Transmit+0x28>
 8008c24:	1dbb      	adds	r3, r7, #6
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e084      	b.n	8008d3a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	2380      	movs	r3, #128	@ 0x80
 8008c36:	015b      	lsls	r3, r3, #5
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d109      	bne.n	8008c50 <HAL_UART_Transmit+0x4c>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2201      	movs	r2, #1
 8008c48:	4013      	ands	r3, r2
 8008c4a:	d001      	beq.n	8008c50 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e074      	b.n	8008d3a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2284      	movs	r2, #132	@ 0x84
 8008c54:	2100      	movs	r1, #0
 8008c56:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2221      	movs	r2, #33	@ 0x21
 8008c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c5e:	f7fc fe9f 	bl	80059a0 <HAL_GetTick>
 8008c62:	0003      	movs	r3, r0
 8008c64:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	1dba      	adds	r2, r7, #6
 8008c6a:	2150      	movs	r1, #80	@ 0x50
 8008c6c:	8812      	ldrh	r2, [r2, #0]
 8008c6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	1dba      	adds	r2, r7, #6
 8008c74:	2152      	movs	r1, #82	@ 0x52
 8008c76:	8812      	ldrh	r2, [r2, #0]
 8008c78:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	2380      	movs	r3, #128	@ 0x80
 8008c80:	015b      	lsls	r3, r3, #5
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d108      	bne.n	8008c98 <HAL_UART_Transmit+0x94>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d104      	bne.n	8008c98 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	61bb      	str	r3, [r7, #24]
 8008c96:	e003      	b.n	8008ca0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ca0:	e02f      	b.n	8008d02 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	0013      	movs	r3, r2
 8008cac:	2200      	movs	r2, #0
 8008cae:	2180      	movs	r1, #128	@ 0x80
 8008cb0:	f000 fe7e 	bl	80099b0 <UART_WaitOnFlagUntilTimeout>
 8008cb4:	1e03      	subs	r3, r0, #0
 8008cb6:	d004      	beq.n	8008cc2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e03b      	b.n	8008d3a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10b      	bne.n	8008ce0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	881a      	ldrh	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	05d2      	lsls	r2, r2, #23
 8008cd2:	0dd2      	lsrs	r2, r2, #23
 8008cd4:	b292      	uxth	r2, r2
 8008cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	3302      	adds	r3, #2
 8008cdc:	61bb      	str	r3, [r7, #24]
 8008cde:	e007      	b.n	8008cf0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	3301      	adds	r3, #1
 8008cee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2252      	movs	r2, #82	@ 0x52
 8008cf4:	5a9b      	ldrh	r3, [r3, r2]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	b299      	uxth	r1, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2252      	movs	r2, #82	@ 0x52
 8008d00:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2252      	movs	r2, #82	@ 0x52
 8008d06:	5a9b      	ldrh	r3, [r3, r2]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1c9      	bne.n	8008ca2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	0013      	movs	r3, r2
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2140      	movs	r1, #64	@ 0x40
 8008d1c:	f000 fe48 	bl	80099b0 <UART_WaitOnFlagUntilTimeout>
 8008d20:	1e03      	subs	r3, r0, #0
 8008d22:	d004      	beq.n	8008d2e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2220      	movs	r2, #32
 8008d28:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e005      	b.n	8008d3a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2220      	movs	r2, #32
 8008d32:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	e000      	b.n	8008d3a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008d38:	2302      	movs	r3, #2
  }
}
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	b008      	add	sp, #32
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b088      	sub	sp, #32
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	60b9      	str	r1, [r7, #8]
 8008d4c:	1dbb      	adds	r3, r7, #6
 8008d4e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2280      	movs	r2, #128	@ 0x80
 8008d54:	589b      	ldr	r3, [r3, r2]
 8008d56:	2b20      	cmp	r3, #32
 8008d58:	d145      	bne.n	8008de6 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <HAL_UART_Receive_IT+0x26>
 8008d60:	1dbb      	adds	r3, r7, #6
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e03d      	b.n	8008de8 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	2380      	movs	r3, #128	@ 0x80
 8008d72:	015b      	lsls	r3, r3, #5
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d109      	bne.n	8008d8c <HAL_UART_Receive_IT+0x4a>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d105      	bne.n	8008d8c <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2201      	movs	r2, #1
 8008d84:	4013      	ands	r3, r2
 8008d86:	d001      	beq.n	8008d8c <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e02d      	b.n	8008de8 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	2380      	movs	r3, #128	@ 0x80
 8008d9a:	041b      	lsls	r3, r3, #16
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	d019      	beq.n	8008dd4 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008da0:	f3ef 8310 	mrs	r3, PRIMASK
 8008da4:	613b      	str	r3, [r7, #16]
  return(result);
 8008da6:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	2301      	movs	r3, #1
 8008dac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f383 8810 	msr	PRIMASK, r3
}
 8008db4:	46c0      	nop			@ (mov r8, r8)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2180      	movs	r1, #128	@ 0x80
 8008dc2:	04c9      	lsls	r1, r1, #19
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	f383 8810 	msr	PRIMASK, r3
}
 8008dd2:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008dd4:	1dbb      	adds	r3, r7, #6
 8008dd6:	881a      	ldrh	r2, [r3, #0]
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f000 fe57 	bl	8009a90 <UART_Start_Receive_IT>
 8008de2:	0003      	movs	r3, r0
 8008de4:	e000      	b.n	8008de8 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8008de6:	2302      	movs	r3, #2
  }
}
 8008de8:	0018      	movs	r0, r3
 8008dea:	46bd      	mov	sp, r7
 8008dec:	b008      	add	sp, #32
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008df0:	b590      	push	{r4, r7, lr}
 8008df2:	b0ab      	sub	sp, #172	@ 0xac
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	22a4      	movs	r2, #164	@ 0xa4
 8008e00:	18b9      	adds	r1, r7, r2
 8008e02:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	20a0      	movs	r0, #160	@ 0xa0
 8008e0c:	1839      	adds	r1, r7, r0
 8008e0e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	219c      	movs	r1, #156	@ 0x9c
 8008e18:	1879      	adds	r1, r7, r1
 8008e1a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e1c:	0011      	movs	r1, r2
 8008e1e:	18bb      	adds	r3, r7, r2
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a99      	ldr	r2, [pc, #612]	@ (8009088 <HAL_UART_IRQHandler+0x298>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	2298      	movs	r2, #152	@ 0x98
 8008e28:	18bc      	adds	r4, r7, r2
 8008e2a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008e2c:	18bb      	adds	r3, r7, r2
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d114      	bne.n	8008e5e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e34:	187b      	adds	r3, r7, r1
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	d00f      	beq.n	8008e5e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e3e:	183b      	adds	r3, r7, r0
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2220      	movs	r2, #32
 8008e44:	4013      	ands	r3, r2
 8008e46:	d00a      	beq.n	8008e5e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d100      	bne.n	8008e52 <HAL_UART_IRQHandler+0x62>
 8008e50:	e29e      	b.n	8009390 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	0010      	movs	r0, r2
 8008e5a:	4798      	blx	r3
      }
      return;
 8008e5c:	e298      	b.n	8009390 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e5e:	2398      	movs	r3, #152	@ 0x98
 8008e60:	18fb      	adds	r3, r7, r3
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d100      	bne.n	8008e6a <HAL_UART_IRQHandler+0x7a>
 8008e68:	e114      	b.n	8009094 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e6a:	239c      	movs	r3, #156	@ 0x9c
 8008e6c:	18fb      	adds	r3, r7, r3
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2201      	movs	r2, #1
 8008e72:	4013      	ands	r3, r2
 8008e74:	d106      	bne.n	8008e84 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008e76:	23a0      	movs	r3, #160	@ 0xa0
 8008e78:	18fb      	adds	r3, r7, r3
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a83      	ldr	r2, [pc, #524]	@ (800908c <HAL_UART_IRQHandler+0x29c>)
 8008e7e:	4013      	ands	r3, r2
 8008e80:	d100      	bne.n	8008e84 <HAL_UART_IRQHandler+0x94>
 8008e82:	e107      	b.n	8009094 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e84:	23a4      	movs	r3, #164	@ 0xa4
 8008e86:	18fb      	adds	r3, r7, r3
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	d012      	beq.n	8008eb6 <HAL_UART_IRQHandler+0xc6>
 8008e90:	23a0      	movs	r3, #160	@ 0xa0
 8008e92:	18fb      	adds	r3, r7, r3
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	2380      	movs	r3, #128	@ 0x80
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	d00b      	beq.n	8008eb6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2284      	movs	r2, #132	@ 0x84
 8008eaa:	589b      	ldr	r3, [r3, r2]
 8008eac:	2201      	movs	r2, #1
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2184      	movs	r1, #132	@ 0x84
 8008eb4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eb6:	23a4      	movs	r3, #164	@ 0xa4
 8008eb8:	18fb      	adds	r3, r7, r3
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	d011      	beq.n	8008ee6 <HAL_UART_IRQHandler+0xf6>
 8008ec2:	239c      	movs	r3, #156	@ 0x9c
 8008ec4:	18fb      	adds	r3, r7, r3
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	4013      	ands	r3, r2
 8008ecc:	d00b      	beq.n	8008ee6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2284      	movs	r2, #132	@ 0x84
 8008eda:	589b      	ldr	r3, [r3, r2]
 8008edc:	2204      	movs	r2, #4
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2184      	movs	r1, #132	@ 0x84
 8008ee4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ee6:	23a4      	movs	r3, #164	@ 0xa4
 8008ee8:	18fb      	adds	r3, r7, r3
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2204      	movs	r2, #4
 8008eee:	4013      	ands	r3, r2
 8008ef0:	d011      	beq.n	8008f16 <HAL_UART_IRQHandler+0x126>
 8008ef2:	239c      	movs	r3, #156	@ 0x9c
 8008ef4:	18fb      	adds	r3, r7, r3
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	4013      	ands	r3, r2
 8008efc:	d00b      	beq.n	8008f16 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2204      	movs	r2, #4
 8008f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2284      	movs	r2, #132	@ 0x84
 8008f0a:	589b      	ldr	r3, [r3, r2]
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2184      	movs	r1, #132	@ 0x84
 8008f14:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f16:	23a4      	movs	r3, #164	@ 0xa4
 8008f18:	18fb      	adds	r3, r7, r3
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2208      	movs	r2, #8
 8008f1e:	4013      	ands	r3, r2
 8008f20:	d017      	beq.n	8008f52 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f22:	23a0      	movs	r3, #160	@ 0xa0
 8008f24:	18fb      	adds	r3, r7, r3
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	d105      	bne.n	8008f3a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008f2e:	239c      	movs	r3, #156	@ 0x9c
 8008f30:	18fb      	adds	r3, r7, r3
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2201      	movs	r2, #1
 8008f36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f38:	d00b      	beq.n	8008f52 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2208      	movs	r2, #8
 8008f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2284      	movs	r2, #132	@ 0x84
 8008f46:	589b      	ldr	r3, [r3, r2]
 8008f48:	2208      	movs	r2, #8
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2184      	movs	r1, #132	@ 0x84
 8008f50:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f52:	23a4      	movs	r3, #164	@ 0xa4
 8008f54:	18fb      	adds	r3, r7, r3
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	2380      	movs	r3, #128	@ 0x80
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	d013      	beq.n	8008f88 <HAL_UART_IRQHandler+0x198>
 8008f60:	23a0      	movs	r3, #160	@ 0xa0
 8008f62:	18fb      	adds	r3, r7, r3
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	2380      	movs	r3, #128	@ 0x80
 8008f68:	04db      	lsls	r3, r3, #19
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	d00c      	beq.n	8008f88 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2280      	movs	r2, #128	@ 0x80
 8008f74:	0112      	lsls	r2, r2, #4
 8008f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2284      	movs	r2, #132	@ 0x84
 8008f7c:	589b      	ldr	r3, [r3, r2]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	431a      	orrs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2184      	movs	r1, #132	@ 0x84
 8008f86:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2284      	movs	r2, #132	@ 0x84
 8008f8c:	589b      	ldr	r3, [r3, r2]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d100      	bne.n	8008f94 <HAL_UART_IRQHandler+0x1a4>
 8008f92:	e1ff      	b.n	8009394 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f94:	23a4      	movs	r3, #164	@ 0xa4
 8008f96:	18fb      	adds	r3, r7, r3
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	d00e      	beq.n	8008fbe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008fa0:	23a0      	movs	r3, #160	@ 0xa0
 8008fa2:	18fb      	adds	r3, r7, r3
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	4013      	ands	r3, r2
 8008faa:	d008      	beq.n	8008fbe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d004      	beq.n	8008fbe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	0010      	movs	r0, r2
 8008fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2284      	movs	r2, #132	@ 0x84
 8008fc2:	589b      	ldr	r3, [r3, r2]
 8008fc4:	2194      	movs	r1, #148	@ 0x94
 8008fc6:	187a      	adds	r2, r7, r1
 8008fc8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	2240      	movs	r2, #64	@ 0x40
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	2b40      	cmp	r3, #64	@ 0x40
 8008fd6:	d004      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fd8:	187b      	adds	r3, r7, r1
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2228      	movs	r2, #40	@ 0x28
 8008fde:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fe0:	d047      	beq.n	8009072 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f000 fe1d 	bl	8009c24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	2240      	movs	r2, #64	@ 0x40
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	2b40      	cmp	r3, #64	@ 0x40
 8008ff6:	d137      	bne.n	8009068 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8008ffc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008ffe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009000:	2090      	movs	r0, #144	@ 0x90
 8009002:	183a      	adds	r2, r7, r0
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	2301      	movs	r3, #1
 8009008:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800900a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800900c:	f383 8810 	msr	PRIMASK, r3
}
 8009010:	46c0      	nop			@ (mov r8, r8)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2140      	movs	r1, #64	@ 0x40
 800901e:	438a      	bics	r2, r1
 8009020:	609a      	str	r2, [r3, #8]
 8009022:	183b      	adds	r3, r7, r0
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800902a:	f383 8810 	msr	PRIMASK, r3
}
 800902e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009034:	2b00      	cmp	r3, #0
 8009036:	d012      	beq.n	800905e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800903c:	4a14      	ldr	r2, [pc, #80]	@ (8009090 <HAL_UART_IRQHandler+0x2a0>)
 800903e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009044:	0018      	movs	r0, r3
 8009046:	f7fd fdab 	bl	8006ba0 <HAL_DMA_Abort_IT>
 800904a:	1e03      	subs	r3, r0, #0
 800904c:	d01a      	beq.n	8009084 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009058:	0018      	movs	r0, r3
 800905a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800905c:	e012      	b.n	8009084 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	0018      	movs	r0, r3
 8009062:	f000 f9ad 	bl	80093c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009066:	e00d      	b.n	8009084 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	0018      	movs	r0, r3
 800906c:	f000 f9a8 	bl	80093c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009070:	e008      	b.n	8009084 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	0018      	movs	r0, r3
 8009076:	f000 f9a3 	bl	80093c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2284      	movs	r2, #132	@ 0x84
 800907e:	2100      	movs	r1, #0
 8009080:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009082:	e187      	b.n	8009394 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009084:	46c0      	nop			@ (mov r8, r8)
    return;
 8009086:	e185      	b.n	8009394 <HAL_UART_IRQHandler+0x5a4>
 8009088:	0000080f 	.word	0x0000080f
 800908c:	04000120 	.word	0x04000120
 8009090:	08009ced 	.word	0x08009ced

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009098:	2b01      	cmp	r3, #1
 800909a:	d000      	beq.n	800909e <HAL_UART_IRQHandler+0x2ae>
 800909c:	e139      	b.n	8009312 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800909e:	23a4      	movs	r3, #164	@ 0xa4
 80090a0:	18fb      	adds	r3, r7, r3
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2210      	movs	r2, #16
 80090a6:	4013      	ands	r3, r2
 80090a8:	d100      	bne.n	80090ac <HAL_UART_IRQHandler+0x2bc>
 80090aa:	e132      	b.n	8009312 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090ac:	23a0      	movs	r3, #160	@ 0xa0
 80090ae:	18fb      	adds	r3, r7, r3
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2210      	movs	r2, #16
 80090b4:	4013      	ands	r3, r2
 80090b6:	d100      	bne.n	80090ba <HAL_UART_IRQHandler+0x2ca>
 80090b8:	e12b      	b.n	8009312 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2210      	movs	r2, #16
 80090c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	2240      	movs	r2, #64	@ 0x40
 80090ca:	4013      	ands	r3, r2
 80090cc:	2b40      	cmp	r3, #64	@ 0x40
 80090ce:	d000      	beq.n	80090d2 <HAL_UART_IRQHandler+0x2e2>
 80090d0:	e09f      	b.n	8009212 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	217e      	movs	r1, #126	@ 0x7e
 80090dc:	187b      	adds	r3, r7, r1
 80090de:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80090e0:	187b      	adds	r3, r7, r1
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d100      	bne.n	80090ea <HAL_UART_IRQHandler+0x2fa>
 80090e8:	e156      	b.n	8009398 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2258      	movs	r2, #88	@ 0x58
 80090ee:	5a9b      	ldrh	r3, [r3, r2]
 80090f0:	187a      	adds	r2, r7, r1
 80090f2:	8812      	ldrh	r2, [r2, #0]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d300      	bcc.n	80090fa <HAL_UART_IRQHandler+0x30a>
 80090f8:	e14e      	b.n	8009398 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	187a      	adds	r2, r7, r1
 80090fe:	215a      	movs	r1, #90	@ 0x5a
 8009100:	8812      	ldrh	r2, [r2, #0]
 8009102:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	2b20      	cmp	r3, #32
 800910c:	d06f      	beq.n	80091ee <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800910e:	f3ef 8310 	mrs	r3, PRIMASK
 8009112:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009116:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009118:	2301      	movs	r3, #1
 800911a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800911c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800911e:	f383 8810 	msr	PRIMASK, r3
}
 8009122:	46c0      	nop			@ (mov r8, r8)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	499e      	ldr	r1, [pc, #632]	@ (80093a8 <HAL_UART_IRQHandler+0x5b8>)
 8009130:	400a      	ands	r2, r1
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009136:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	f383 8810 	msr	PRIMASK, r3
}
 800913e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009140:	f3ef 8310 	mrs	r3, PRIMASK
 8009144:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8009146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009148:	677b      	str	r3, [r7, #116]	@ 0x74
 800914a:	2301      	movs	r3, #1
 800914c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009150:	f383 8810 	msr	PRIMASK, r3
}
 8009154:	46c0      	nop			@ (mov r8, r8)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2101      	movs	r1, #1
 8009162:	438a      	bics	r2, r1
 8009164:	609a      	str	r2, [r3, #8]
 8009166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009168:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800916a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800916c:	f383 8810 	msr	PRIMASK, r3
}
 8009170:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009172:	f3ef 8310 	mrs	r3, PRIMASK
 8009176:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8009178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800917a:	673b      	str	r3, [r7, #112]	@ 0x70
 800917c:	2301      	movs	r3, #1
 800917e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009182:	f383 8810 	msr	PRIMASK, r3
}
 8009186:	46c0      	nop			@ (mov r8, r8)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2140      	movs	r1, #64	@ 0x40
 8009194:	438a      	bics	r2, r1
 8009196:	609a      	str	r2, [r3, #8]
 8009198:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800919a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800919c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800919e:	f383 8810 	msr	PRIMASK, r3
}
 80091a2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2280      	movs	r2, #128	@ 0x80
 80091a8:	2120      	movs	r1, #32
 80091aa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091b2:	f3ef 8310 	mrs	r3, PRIMASK
 80091b6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80091b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091bc:	2301      	movs	r3, #1
 80091be:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80091c2:	f383 8810 	msr	PRIMASK, r3
}
 80091c6:	46c0      	nop			@ (mov r8, r8)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2110      	movs	r1, #16
 80091d4:	438a      	bics	r2, r1
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091de:	f383 8810 	msr	PRIMASK, r3
}
 80091e2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091e8:	0018      	movs	r0, r3
 80091ea:	f7fd fca1 	bl	8006b30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2202      	movs	r2, #2
 80091f2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2258      	movs	r2, #88	@ 0x58
 80091f8:	5a9a      	ldrh	r2, [r3, r2]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	215a      	movs	r1, #90	@ 0x5a
 80091fe:	5a5b      	ldrh	r3, [r3, r1]
 8009200:	b29b      	uxth	r3, r3
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	b29a      	uxth	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	0011      	movs	r1, r2
 800920a:	0018      	movs	r0, r3
 800920c:	f000 f8e0 	bl	80093d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009210:	e0c2      	b.n	8009398 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2258      	movs	r2, #88	@ 0x58
 8009216:	5a99      	ldrh	r1, [r3, r2]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	225a      	movs	r2, #90	@ 0x5a
 800921c:	5a9b      	ldrh	r3, [r3, r2]
 800921e:	b29a      	uxth	r2, r3
 8009220:	208e      	movs	r0, #142	@ 0x8e
 8009222:	183b      	adds	r3, r7, r0
 8009224:	1a8a      	subs	r2, r1, r2
 8009226:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	225a      	movs	r2, #90	@ 0x5a
 800922c:	5a9b      	ldrh	r3, [r3, r2]
 800922e:	b29b      	uxth	r3, r3
 8009230:	2b00      	cmp	r3, #0
 8009232:	d100      	bne.n	8009236 <HAL_UART_IRQHandler+0x446>
 8009234:	e0b2      	b.n	800939c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8009236:	183b      	adds	r3, r7, r0
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d100      	bne.n	8009240 <HAL_UART_IRQHandler+0x450>
 800923e:	e0ad      	b.n	800939c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009240:	f3ef 8310 	mrs	r3, PRIMASK
 8009244:	60fb      	str	r3, [r7, #12]
  return(result);
 8009246:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009248:	2488      	movs	r4, #136	@ 0x88
 800924a:	193a      	adds	r2, r7, r4
 800924c:	6013      	str	r3, [r2, #0]
 800924e:	2301      	movs	r3, #1
 8009250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	f383 8810 	msr	PRIMASK, r3
}
 8009258:	46c0      	nop			@ (mov r8, r8)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4951      	ldr	r1, [pc, #324]	@ (80093ac <HAL_UART_IRQHandler+0x5bc>)
 8009266:	400a      	ands	r2, r1
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	193b      	adds	r3, r7, r4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f383 8810 	msr	PRIMASK, r3
}
 8009276:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009278:	f3ef 8310 	mrs	r3, PRIMASK
 800927c:	61bb      	str	r3, [r7, #24]
  return(result);
 800927e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009280:	2484      	movs	r4, #132	@ 0x84
 8009282:	193a      	adds	r2, r7, r4
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	2301      	movs	r3, #1
 8009288:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	f383 8810 	msr	PRIMASK, r3
}
 8009290:	46c0      	nop			@ (mov r8, r8)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2101      	movs	r1, #1
 800929e:	438a      	bics	r2, r1
 80092a0:	609a      	str	r2, [r3, #8]
 80092a2:	193b      	adds	r3, r7, r4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	f383 8810 	msr	PRIMASK, r3
}
 80092ae:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2280      	movs	r2, #128	@ 0x80
 80092b4:	2120      	movs	r1, #32
 80092b6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c4:	f3ef 8310 	mrs	r3, PRIMASK
 80092c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80092ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092cc:	2480      	movs	r4, #128	@ 0x80
 80092ce:	193a      	adds	r2, r7, r4
 80092d0:	6013      	str	r3, [r2, #0]
 80092d2:	2301      	movs	r3, #1
 80092d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d8:	f383 8810 	msr	PRIMASK, r3
}
 80092dc:	46c0      	nop			@ (mov r8, r8)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2110      	movs	r1, #16
 80092ea:	438a      	bics	r2, r1
 80092ec:	601a      	str	r2, [r3, #0]
 80092ee:	193b      	adds	r3, r7, r4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f6:	f383 8810 	msr	PRIMASK, r3
}
 80092fa:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009302:	183b      	adds	r3, r7, r0
 8009304:	881a      	ldrh	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	0011      	movs	r1, r2
 800930a:	0018      	movs	r0, r3
 800930c:	f000 f860 	bl	80093d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009310:	e044      	b.n	800939c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009312:	23a4      	movs	r3, #164	@ 0xa4
 8009314:	18fb      	adds	r3, r7, r3
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	2380      	movs	r3, #128	@ 0x80
 800931a:	035b      	lsls	r3, r3, #13
 800931c:	4013      	ands	r3, r2
 800931e:	d010      	beq.n	8009342 <HAL_UART_IRQHandler+0x552>
 8009320:	239c      	movs	r3, #156	@ 0x9c
 8009322:	18fb      	adds	r3, r7, r3
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	2380      	movs	r3, #128	@ 0x80
 8009328:	03db      	lsls	r3, r3, #15
 800932a:	4013      	ands	r3, r2
 800932c:	d009      	beq.n	8009342 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2280      	movs	r2, #128	@ 0x80
 8009334:	0352      	lsls	r2, r2, #13
 8009336:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	0018      	movs	r0, r3
 800933c:	f000 fed0 	bl	800a0e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009340:	e02f      	b.n	80093a2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009342:	23a4      	movs	r3, #164	@ 0xa4
 8009344:	18fb      	adds	r3, r7, r3
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2280      	movs	r2, #128	@ 0x80
 800934a:	4013      	ands	r3, r2
 800934c:	d00f      	beq.n	800936e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800934e:	23a0      	movs	r3, #160	@ 0xa0
 8009350:	18fb      	adds	r3, r7, r3
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2280      	movs	r2, #128	@ 0x80
 8009356:	4013      	ands	r3, r2
 8009358:	d009      	beq.n	800936e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d01e      	beq.n	80093a0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	0010      	movs	r0, r2
 800936a:	4798      	blx	r3
    }
    return;
 800936c:	e018      	b.n	80093a0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800936e:	23a4      	movs	r3, #164	@ 0xa4
 8009370:	18fb      	adds	r3, r7, r3
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2240      	movs	r2, #64	@ 0x40
 8009376:	4013      	ands	r3, r2
 8009378:	d013      	beq.n	80093a2 <HAL_UART_IRQHandler+0x5b2>
 800937a:	23a0      	movs	r3, #160	@ 0xa0
 800937c:	18fb      	adds	r3, r7, r3
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2240      	movs	r2, #64	@ 0x40
 8009382:	4013      	ands	r3, r2
 8009384:	d00d      	beq.n	80093a2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	0018      	movs	r0, r3
 800938a:	f000 fcc6 	bl	8009d1a <UART_EndTransmit_IT>
    return;
 800938e:	e008      	b.n	80093a2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8009390:	46c0      	nop			@ (mov r8, r8)
 8009392:	e006      	b.n	80093a2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8009394:	46c0      	nop			@ (mov r8, r8)
 8009396:	e004      	b.n	80093a2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8009398:	46c0      	nop			@ (mov r8, r8)
 800939a:	e002      	b.n	80093a2 <HAL_UART_IRQHandler+0x5b2>
      return;
 800939c:	46c0      	nop			@ (mov r8, r8)
 800939e:	e000      	b.n	80093a2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80093a0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80093a2:	46bd      	mov	sp, r7
 80093a4:	b02b      	add	sp, #172	@ 0xac
 80093a6:	bd90      	pop	{r4, r7, pc}
 80093a8:	fffffeff 	.word	0xfffffeff
 80093ac:	fffffedf 	.word	0xfffffedf

080093b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80093b8:	46c0      	nop			@ (mov r8, r8)
 80093ba:	46bd      	mov	sp, r7
 80093bc:	b002      	add	sp, #8
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093c8:	46c0      	nop			@ (mov r8, r8)
 80093ca:	46bd      	mov	sp, r7
 80093cc:	b002      	add	sp, #8
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	000a      	movs	r2, r1
 80093da:	1cbb      	adds	r3, r7, #2
 80093dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093de:	46c0      	nop			@ (mov r8, r8)
 80093e0:	46bd      	mov	sp, r7
 80093e2:	b002      	add	sp, #8
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b088      	sub	sp, #32
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093f0:	231e      	movs	r3, #30
 80093f2:	18fb      	adds	r3, r7, r3
 80093f4:	2200      	movs	r2, #0
 80093f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	431a      	orrs	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	695b      	ldr	r3, [r3, #20]
 8009406:	431a      	orrs	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	4313      	orrs	r3, r2
 800940e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4aaf      	ldr	r2, [pc, #700]	@ (80096d4 <UART_SetConfig+0x2ec>)
 8009418:	4013      	ands	r3, r2
 800941a:	0019      	movs	r1, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	430a      	orrs	r2, r1
 8009424:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	4aaa      	ldr	r2, [pc, #680]	@ (80096d8 <UART_SetConfig+0x2f0>)
 800942e:	4013      	ands	r3, r2
 8009430:	0019      	movs	r1, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68da      	ldr	r2, [r3, #12]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	4313      	orrs	r3, r2
 800944c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	4aa1      	ldr	r2, [pc, #644]	@ (80096dc <UART_SetConfig+0x2f4>)
 8009456:	4013      	ands	r3, r2
 8009458:	0019      	movs	r1, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	430a      	orrs	r2, r1
 8009462:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a9d      	ldr	r2, [pc, #628]	@ (80096e0 <UART_SetConfig+0x2f8>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d127      	bne.n	80094be <UART_SetConfig+0xd6>
 800946e:	4b9d      	ldr	r3, [pc, #628]	@ (80096e4 <UART_SetConfig+0x2fc>)
 8009470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009472:	2203      	movs	r2, #3
 8009474:	4013      	ands	r3, r2
 8009476:	2b03      	cmp	r3, #3
 8009478:	d00d      	beq.n	8009496 <UART_SetConfig+0xae>
 800947a:	d81b      	bhi.n	80094b4 <UART_SetConfig+0xcc>
 800947c:	2b02      	cmp	r3, #2
 800947e:	d014      	beq.n	80094aa <UART_SetConfig+0xc2>
 8009480:	d818      	bhi.n	80094b4 <UART_SetConfig+0xcc>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <UART_SetConfig+0xa4>
 8009486:	2b01      	cmp	r3, #1
 8009488:	d00a      	beq.n	80094a0 <UART_SetConfig+0xb8>
 800948a:	e013      	b.n	80094b4 <UART_SetConfig+0xcc>
 800948c:	231f      	movs	r3, #31
 800948e:	18fb      	adds	r3, r7, r3
 8009490:	2200      	movs	r2, #0
 8009492:	701a      	strb	r2, [r3, #0]
 8009494:	e065      	b.n	8009562 <UART_SetConfig+0x17a>
 8009496:	231f      	movs	r3, #31
 8009498:	18fb      	adds	r3, r7, r3
 800949a:	2202      	movs	r2, #2
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	e060      	b.n	8009562 <UART_SetConfig+0x17a>
 80094a0:	231f      	movs	r3, #31
 80094a2:	18fb      	adds	r3, r7, r3
 80094a4:	2204      	movs	r2, #4
 80094a6:	701a      	strb	r2, [r3, #0]
 80094a8:	e05b      	b.n	8009562 <UART_SetConfig+0x17a>
 80094aa:	231f      	movs	r3, #31
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	2208      	movs	r2, #8
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	e056      	b.n	8009562 <UART_SetConfig+0x17a>
 80094b4:	231f      	movs	r3, #31
 80094b6:	18fb      	adds	r3, r7, r3
 80094b8:	2210      	movs	r2, #16
 80094ba:	701a      	strb	r2, [r3, #0]
 80094bc:	e051      	b.n	8009562 <UART_SetConfig+0x17a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a89      	ldr	r2, [pc, #548]	@ (80096e8 <UART_SetConfig+0x300>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d134      	bne.n	8009532 <UART_SetConfig+0x14a>
 80094c8:	4b86      	ldr	r3, [pc, #536]	@ (80096e4 <UART_SetConfig+0x2fc>)
 80094ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094cc:	23c0      	movs	r3, #192	@ 0xc0
 80094ce:	029b      	lsls	r3, r3, #10
 80094d0:	4013      	ands	r3, r2
 80094d2:	22c0      	movs	r2, #192	@ 0xc0
 80094d4:	0292      	lsls	r2, r2, #10
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d017      	beq.n	800950a <UART_SetConfig+0x122>
 80094da:	22c0      	movs	r2, #192	@ 0xc0
 80094dc:	0292      	lsls	r2, r2, #10
 80094de:	4293      	cmp	r3, r2
 80094e0:	d822      	bhi.n	8009528 <UART_SetConfig+0x140>
 80094e2:	2280      	movs	r2, #128	@ 0x80
 80094e4:	0292      	lsls	r2, r2, #10
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d019      	beq.n	800951e <UART_SetConfig+0x136>
 80094ea:	2280      	movs	r2, #128	@ 0x80
 80094ec:	0292      	lsls	r2, r2, #10
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d81a      	bhi.n	8009528 <UART_SetConfig+0x140>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <UART_SetConfig+0x118>
 80094f6:	2280      	movs	r2, #128	@ 0x80
 80094f8:	0252      	lsls	r2, r2, #9
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00a      	beq.n	8009514 <UART_SetConfig+0x12c>
 80094fe:	e013      	b.n	8009528 <UART_SetConfig+0x140>
 8009500:	231f      	movs	r3, #31
 8009502:	18fb      	adds	r3, r7, r3
 8009504:	2200      	movs	r2, #0
 8009506:	701a      	strb	r2, [r3, #0]
 8009508:	e02b      	b.n	8009562 <UART_SetConfig+0x17a>
 800950a:	231f      	movs	r3, #31
 800950c:	18fb      	adds	r3, r7, r3
 800950e:	2202      	movs	r2, #2
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	e026      	b.n	8009562 <UART_SetConfig+0x17a>
 8009514:	231f      	movs	r3, #31
 8009516:	18fb      	adds	r3, r7, r3
 8009518:	2204      	movs	r2, #4
 800951a:	701a      	strb	r2, [r3, #0]
 800951c:	e021      	b.n	8009562 <UART_SetConfig+0x17a>
 800951e:	231f      	movs	r3, #31
 8009520:	18fb      	adds	r3, r7, r3
 8009522:	2208      	movs	r2, #8
 8009524:	701a      	strb	r2, [r3, #0]
 8009526:	e01c      	b.n	8009562 <UART_SetConfig+0x17a>
 8009528:	231f      	movs	r3, #31
 800952a:	18fb      	adds	r3, r7, r3
 800952c:	2210      	movs	r2, #16
 800952e:	701a      	strb	r2, [r3, #0]
 8009530:	e017      	b.n	8009562 <UART_SetConfig+0x17a>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a6d      	ldr	r2, [pc, #436]	@ (80096ec <UART_SetConfig+0x304>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d104      	bne.n	8009546 <UART_SetConfig+0x15e>
 800953c:	231f      	movs	r3, #31
 800953e:	18fb      	adds	r3, r7, r3
 8009540:	2200      	movs	r2, #0
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	e00d      	b.n	8009562 <UART_SetConfig+0x17a>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a69      	ldr	r2, [pc, #420]	@ (80096f0 <UART_SetConfig+0x308>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d104      	bne.n	800955a <UART_SetConfig+0x172>
 8009550:	231f      	movs	r3, #31
 8009552:	18fb      	adds	r3, r7, r3
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
 8009558:	e003      	b.n	8009562 <UART_SetConfig+0x17a>
 800955a:	231f      	movs	r3, #31
 800955c:	18fb      	adds	r3, r7, r3
 800955e:	2210      	movs	r2, #16
 8009560:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	69da      	ldr	r2, [r3, #28]
 8009566:	2380      	movs	r3, #128	@ 0x80
 8009568:	021b      	lsls	r3, r3, #8
 800956a:	429a      	cmp	r2, r3
 800956c:	d15c      	bne.n	8009628 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800956e:	231f      	movs	r3, #31
 8009570:	18fb      	adds	r3, r7, r3
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b08      	cmp	r3, #8
 8009576:	d015      	beq.n	80095a4 <UART_SetConfig+0x1bc>
 8009578:	dc18      	bgt.n	80095ac <UART_SetConfig+0x1c4>
 800957a:	2b04      	cmp	r3, #4
 800957c:	d00d      	beq.n	800959a <UART_SetConfig+0x1b2>
 800957e:	dc15      	bgt.n	80095ac <UART_SetConfig+0x1c4>
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <UART_SetConfig+0x1a2>
 8009584:	2b02      	cmp	r3, #2
 8009586:	d005      	beq.n	8009594 <UART_SetConfig+0x1ac>
 8009588:	e010      	b.n	80095ac <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800958a:	f7fe fb71 	bl	8007c70 <HAL_RCC_GetPCLK1Freq>
 800958e:	0003      	movs	r3, r0
 8009590:	61bb      	str	r3, [r7, #24]
        break;
 8009592:	e012      	b.n	80095ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009594:	4b57      	ldr	r3, [pc, #348]	@ (80096f4 <UART_SetConfig+0x30c>)
 8009596:	61bb      	str	r3, [r7, #24]
        break;
 8009598:	e00f      	b.n	80095ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800959a:	f7fe faed 	bl	8007b78 <HAL_RCC_GetSysClockFreq>
 800959e:	0003      	movs	r3, r0
 80095a0:	61bb      	str	r3, [r7, #24]
        break;
 80095a2:	e00a      	b.n	80095ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095a4:	2380      	movs	r3, #128	@ 0x80
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	61bb      	str	r3, [r7, #24]
        break;
 80095aa:	e006      	b.n	80095ba <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80095b0:	231e      	movs	r3, #30
 80095b2:	18fb      	adds	r3, r7, r3
 80095b4:	2201      	movs	r2, #1
 80095b6:	701a      	strb	r2, [r3, #0]
        break;
 80095b8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d100      	bne.n	80095c2 <UART_SetConfig+0x1da>
 80095c0:	e07a      	b.n	80096b8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	005a      	lsls	r2, r3, #1
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	085b      	lsrs	r3, r3, #1
 80095cc:	18d2      	adds	r2, r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	0019      	movs	r1, r3
 80095d4:	0010      	movs	r0, r2
 80095d6:	f7f6 fdbd 	bl	8000154 <__udivsi3>
 80095da:	0003      	movs	r3, r0
 80095dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b0f      	cmp	r3, #15
 80095e2:	d91c      	bls.n	800961e <UART_SetConfig+0x236>
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	2380      	movs	r3, #128	@ 0x80
 80095e8:	025b      	lsls	r3, r3, #9
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d217      	bcs.n	800961e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	200e      	movs	r0, #14
 80095f4:	183b      	adds	r3, r7, r0
 80095f6:	210f      	movs	r1, #15
 80095f8:	438a      	bics	r2, r1
 80095fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	085b      	lsrs	r3, r3, #1
 8009600:	b29b      	uxth	r3, r3
 8009602:	2207      	movs	r2, #7
 8009604:	4013      	ands	r3, r2
 8009606:	b299      	uxth	r1, r3
 8009608:	183b      	adds	r3, r7, r0
 800960a:	183a      	adds	r2, r7, r0
 800960c:	8812      	ldrh	r2, [r2, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	183a      	adds	r2, r7, r0
 8009618:	8812      	ldrh	r2, [r2, #0]
 800961a:	60da      	str	r2, [r3, #12]
 800961c:	e04c      	b.n	80096b8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800961e:	231e      	movs	r3, #30
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	2201      	movs	r2, #1
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	e047      	b.n	80096b8 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009628:	231f      	movs	r3, #31
 800962a:	18fb      	adds	r3, r7, r3
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b08      	cmp	r3, #8
 8009630:	d015      	beq.n	800965e <UART_SetConfig+0x276>
 8009632:	dc18      	bgt.n	8009666 <UART_SetConfig+0x27e>
 8009634:	2b04      	cmp	r3, #4
 8009636:	d00d      	beq.n	8009654 <UART_SetConfig+0x26c>
 8009638:	dc15      	bgt.n	8009666 <UART_SetConfig+0x27e>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <UART_SetConfig+0x25c>
 800963e:	2b02      	cmp	r3, #2
 8009640:	d005      	beq.n	800964e <UART_SetConfig+0x266>
 8009642:	e010      	b.n	8009666 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009644:	f7fe fb14 	bl	8007c70 <HAL_RCC_GetPCLK1Freq>
 8009648:	0003      	movs	r3, r0
 800964a:	61bb      	str	r3, [r7, #24]
        break;
 800964c:	e012      	b.n	8009674 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800964e:	4b29      	ldr	r3, [pc, #164]	@ (80096f4 <UART_SetConfig+0x30c>)
 8009650:	61bb      	str	r3, [r7, #24]
        break;
 8009652:	e00f      	b.n	8009674 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009654:	f7fe fa90 	bl	8007b78 <HAL_RCC_GetSysClockFreq>
 8009658:	0003      	movs	r3, r0
 800965a:	61bb      	str	r3, [r7, #24]
        break;
 800965c:	e00a      	b.n	8009674 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800965e:	2380      	movs	r3, #128	@ 0x80
 8009660:	021b      	lsls	r3, r3, #8
 8009662:	61bb      	str	r3, [r7, #24]
        break;
 8009664:	e006      	b.n	8009674 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800966a:	231e      	movs	r3, #30
 800966c:	18fb      	adds	r3, r7, r3
 800966e:	2201      	movs	r2, #1
 8009670:	701a      	strb	r2, [r3, #0]
        break;
 8009672:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d01e      	beq.n	80096b8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	085a      	lsrs	r2, r3, #1
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	18d2      	adds	r2, r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	0019      	movs	r1, r3
 800968a:	0010      	movs	r0, r2
 800968c:	f7f6 fd62 	bl	8000154 <__udivsi3>
 8009690:	0003      	movs	r3, r0
 8009692:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	2b0f      	cmp	r3, #15
 8009698:	d90a      	bls.n	80096b0 <UART_SetConfig+0x2c8>
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	2380      	movs	r3, #128	@ 0x80
 800969e:	025b      	lsls	r3, r3, #9
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d205      	bcs.n	80096b0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	60da      	str	r2, [r3, #12]
 80096ae:	e003      	b.n	80096b8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80096b0:	231e      	movs	r3, #30
 80096b2:	18fb      	adds	r3, r7, r3
 80096b4:	2201      	movs	r2, #1
 80096b6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80096c4:	231e      	movs	r3, #30
 80096c6:	18fb      	adds	r3, r7, r3
 80096c8:	781b      	ldrb	r3, [r3, #0]
}
 80096ca:	0018      	movs	r0, r3
 80096cc:	46bd      	mov	sp, r7
 80096ce:	b008      	add	sp, #32
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	46c0      	nop			@ (mov r8, r8)
 80096d4:	efff69f3 	.word	0xefff69f3
 80096d8:	ffffcfff 	.word	0xffffcfff
 80096dc:	fffff4ff 	.word	0xfffff4ff
 80096e0:	40013800 	.word	0x40013800
 80096e4:	40021000 	.word	0x40021000
 80096e8:	40004400 	.word	0x40004400
 80096ec:	40004800 	.word	0x40004800
 80096f0:	40004c00 	.word	0x40004c00
 80096f4:	007a1200 	.word	0x007a1200

080096f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009704:	2208      	movs	r2, #8
 8009706:	4013      	ands	r3, r2
 8009708:	d00b      	beq.n	8009722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	4a4a      	ldr	r2, [pc, #296]	@ (800983c <UART_AdvFeatureConfig+0x144>)
 8009712:	4013      	ands	r3, r2
 8009714:	0019      	movs	r1, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009726:	2201      	movs	r2, #1
 8009728:	4013      	ands	r3, r2
 800972a:	d00b      	beq.n	8009744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	4a43      	ldr	r2, [pc, #268]	@ (8009840 <UART_AdvFeatureConfig+0x148>)
 8009734:	4013      	ands	r3, r2
 8009736:	0019      	movs	r1, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	430a      	orrs	r2, r1
 8009742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009748:	2202      	movs	r2, #2
 800974a:	4013      	ands	r3, r2
 800974c:	d00b      	beq.n	8009766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	4a3b      	ldr	r2, [pc, #236]	@ (8009844 <UART_AdvFeatureConfig+0x14c>)
 8009756:	4013      	ands	r3, r2
 8009758:	0019      	movs	r1, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	430a      	orrs	r2, r1
 8009764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800976a:	2204      	movs	r2, #4
 800976c:	4013      	ands	r3, r2
 800976e:	d00b      	beq.n	8009788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	4a34      	ldr	r2, [pc, #208]	@ (8009848 <UART_AdvFeatureConfig+0x150>)
 8009778:	4013      	ands	r3, r2
 800977a:	0019      	movs	r1, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	430a      	orrs	r2, r1
 8009786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978c:	2210      	movs	r2, #16
 800978e:	4013      	ands	r3, r2
 8009790:	d00b      	beq.n	80097aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	4a2c      	ldr	r2, [pc, #176]	@ (800984c <UART_AdvFeatureConfig+0x154>)
 800979a:	4013      	ands	r3, r2
 800979c:	0019      	movs	r1, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ae:	2220      	movs	r2, #32
 80097b0:	4013      	ands	r3, r2
 80097b2:	d00b      	beq.n	80097cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	4a25      	ldr	r2, [pc, #148]	@ (8009850 <UART_AdvFeatureConfig+0x158>)
 80097bc:	4013      	ands	r3, r2
 80097be:	0019      	movs	r1, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d0:	2240      	movs	r2, #64	@ 0x40
 80097d2:	4013      	ands	r3, r2
 80097d4:	d01d      	beq.n	8009812 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009854 <UART_AdvFeatureConfig+0x15c>)
 80097de:	4013      	ands	r3, r2
 80097e0:	0019      	movs	r1, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	430a      	orrs	r2, r1
 80097ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097f2:	2380      	movs	r3, #128	@ 0x80
 80097f4:	035b      	lsls	r3, r3, #13
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d10b      	bne.n	8009812 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4a15      	ldr	r2, [pc, #84]	@ (8009858 <UART_AdvFeatureConfig+0x160>)
 8009802:	4013      	ands	r3, r2
 8009804:	0019      	movs	r1, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009816:	2280      	movs	r2, #128	@ 0x80
 8009818:	4013      	ands	r3, r2
 800981a:	d00b      	beq.n	8009834 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	4a0e      	ldr	r2, [pc, #56]	@ (800985c <UART_AdvFeatureConfig+0x164>)
 8009824:	4013      	ands	r3, r2
 8009826:	0019      	movs	r1, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	605a      	str	r2, [r3, #4]
  }
}
 8009834:	46c0      	nop			@ (mov r8, r8)
 8009836:	46bd      	mov	sp, r7
 8009838:	b002      	add	sp, #8
 800983a:	bd80      	pop	{r7, pc}
 800983c:	ffff7fff 	.word	0xffff7fff
 8009840:	fffdffff 	.word	0xfffdffff
 8009844:	fffeffff 	.word	0xfffeffff
 8009848:	fffbffff 	.word	0xfffbffff
 800984c:	ffffefff 	.word	0xffffefff
 8009850:	ffffdfff 	.word	0xffffdfff
 8009854:	ffefffff 	.word	0xffefffff
 8009858:	ff9fffff 	.word	0xff9fffff
 800985c:	fff7ffff 	.word	0xfff7ffff

08009860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b092      	sub	sp, #72	@ 0x48
 8009864:	af02      	add	r7, sp, #8
 8009866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2284      	movs	r2, #132	@ 0x84
 800986c:	2100      	movs	r1, #0
 800986e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009870:	f7fc f896 	bl	80059a0 <HAL_GetTick>
 8009874:	0003      	movs	r3, r0
 8009876:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2208      	movs	r2, #8
 8009880:	4013      	ands	r3, r2
 8009882:	2b08      	cmp	r3, #8
 8009884:	d12c      	bne.n	80098e0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009888:	2280      	movs	r2, #128	@ 0x80
 800988a:	0391      	lsls	r1, r2, #14
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4a46      	ldr	r2, [pc, #280]	@ (80099a8 <UART_CheckIdleState+0x148>)
 8009890:	9200      	str	r2, [sp, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	f000 f88c 	bl	80099b0 <UART_WaitOnFlagUntilTimeout>
 8009898:	1e03      	subs	r3, r0, #0
 800989a:	d021      	beq.n	80098e0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800989c:	f3ef 8310 	mrs	r3, PRIMASK
 80098a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80098a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80098a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098a6:	2301      	movs	r3, #1
 80098a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ac:	f383 8810 	msr	PRIMASK, r3
}
 80098b0:	46c0      	nop			@ (mov r8, r8)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2180      	movs	r1, #128	@ 0x80
 80098be:	438a      	bics	r2, r1
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c8:	f383 8810 	msr	PRIMASK, r3
}
 80098cc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2220      	movs	r2, #32
 80098d2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2278      	movs	r2, #120	@ 0x78
 80098d8:	2100      	movs	r1, #0
 80098da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e05f      	b.n	80099a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2204      	movs	r2, #4
 80098e8:	4013      	ands	r3, r2
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	d146      	bne.n	800997c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f0:	2280      	movs	r2, #128	@ 0x80
 80098f2:	03d1      	lsls	r1, r2, #15
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4a2c      	ldr	r2, [pc, #176]	@ (80099a8 <UART_CheckIdleState+0x148>)
 80098f8:	9200      	str	r2, [sp, #0]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f000 f858 	bl	80099b0 <UART_WaitOnFlagUntilTimeout>
 8009900:	1e03      	subs	r3, r0, #0
 8009902:	d03b      	beq.n	800997c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009904:	f3ef 8310 	mrs	r3, PRIMASK
 8009908:	60fb      	str	r3, [r7, #12]
  return(result);
 800990a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800990c:	637b      	str	r3, [r7, #52]	@ 0x34
 800990e:	2301      	movs	r3, #1
 8009910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	f383 8810 	msr	PRIMASK, r3
}
 8009918:	46c0      	nop			@ (mov r8, r8)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4921      	ldr	r1, [pc, #132]	@ (80099ac <UART_CheckIdleState+0x14c>)
 8009926:	400a      	ands	r2, r1
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800992c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f383 8810 	msr	PRIMASK, r3
}
 8009934:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009936:	f3ef 8310 	mrs	r3, PRIMASK
 800993a:	61bb      	str	r3, [r7, #24]
  return(result);
 800993c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800993e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009940:	2301      	movs	r3, #1
 8009942:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	f383 8810 	msr	PRIMASK, r3
}
 800994a:	46c0      	nop			@ (mov r8, r8)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2101      	movs	r1, #1
 8009958:	438a      	bics	r2, r1
 800995a:	609a      	str	r2, [r3, #8]
 800995c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	f383 8810 	msr	PRIMASK, r3
}
 8009966:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2280      	movs	r2, #128	@ 0x80
 800996c:	2120      	movs	r1, #32
 800996e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2278      	movs	r2, #120	@ 0x78
 8009974:	2100      	movs	r1, #0
 8009976:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009978:	2303      	movs	r3, #3
 800997a:	e011      	b.n	80099a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2220      	movs	r2, #32
 8009980:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2280      	movs	r2, #128	@ 0x80
 8009986:	2120      	movs	r1, #32
 8009988:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2278      	movs	r2, #120	@ 0x78
 800999a:	2100      	movs	r1, #0
 800999c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	0018      	movs	r0, r3
 80099a2:	46bd      	mov	sp, r7
 80099a4:	b010      	add	sp, #64	@ 0x40
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	01ffffff 	.word	0x01ffffff
 80099ac:	fffffedf 	.word	0xfffffedf

080099b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	1dfb      	adds	r3, r7, #7
 80099be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099c0:	e051      	b.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	3301      	adds	r3, #1
 80099c6:	d04e      	beq.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099c8:	f7fb ffea 	bl	80059a0 <HAL_GetTick>
 80099cc:	0002      	movs	r2, r0
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	69ba      	ldr	r2, [r7, #24]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d302      	bcc.n	80099de <UART_WaitOnFlagUntilTimeout+0x2e>
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e051      	b.n	8009a86 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2204      	movs	r2, #4
 80099ea:	4013      	ands	r3, r2
 80099ec:	d03b      	beq.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb6>
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2b80      	cmp	r3, #128	@ 0x80
 80099f2:	d038      	beq.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb6>
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b40      	cmp	r3, #64	@ 0x40
 80099f8:	d035      	beq.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	2208      	movs	r2, #8
 8009a02:	4013      	ands	r3, r2
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d111      	bne.n	8009a2c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	0018      	movs	r0, r3
 8009a14:	f000 f906 	bl	8009c24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2284      	movs	r2, #132	@ 0x84
 8009a1c:	2108      	movs	r1, #8
 8009a1e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2278      	movs	r2, #120	@ 0x78
 8009a24:	2100      	movs	r1, #0
 8009a26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e02c      	b.n	8009a86 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	69da      	ldr	r2, [r3, #28]
 8009a32:	2380      	movs	r3, #128	@ 0x80
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	401a      	ands	r2, r3
 8009a38:	2380      	movs	r3, #128	@ 0x80
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d112      	bne.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2280      	movs	r2, #128	@ 0x80
 8009a46:	0112      	lsls	r2, r2, #4
 8009a48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	0018      	movs	r0, r3
 8009a4e:	f000 f8e9 	bl	8009c24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2284      	movs	r2, #132	@ 0x84
 8009a56:	2120      	movs	r1, #32
 8009a58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2278      	movs	r2, #120	@ 0x78
 8009a5e:	2100      	movs	r1, #0
 8009a60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e00f      	b.n	8009a86 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	425a      	negs	r2, r3
 8009a76:	4153      	adcs	r3, r2
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	001a      	movs	r2, r3
 8009a7c:	1dfb      	adds	r3, r7, #7
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d09e      	beq.n	80099c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	0018      	movs	r0, r3
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	b004      	add	sp, #16
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b090      	sub	sp, #64	@ 0x40
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	1dbb      	adds	r3, r7, #6
 8009a9c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	1dba      	adds	r2, r7, #6
 8009aa8:	2158      	movs	r1, #88	@ 0x58
 8009aaa:	8812      	ldrh	r2, [r2, #0]
 8009aac:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	1dba      	adds	r2, r7, #6
 8009ab2:	215a      	movs	r1, #90	@ 0x5a
 8009ab4:	8812      	ldrh	r2, [r2, #0]
 8009ab6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	689a      	ldr	r2, [r3, #8]
 8009ac2:	2380      	movs	r3, #128	@ 0x80
 8009ac4:	015b      	lsls	r3, r3, #5
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d10d      	bne.n	8009ae6 <UART_Start_Receive_IT+0x56>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d104      	bne.n	8009adc <UART_Start_Receive_IT+0x4c>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	225c      	movs	r2, #92	@ 0x5c
 8009ad6:	4950      	ldr	r1, [pc, #320]	@ (8009c18 <UART_Start_Receive_IT+0x188>)
 8009ad8:	5299      	strh	r1, [r3, r2]
 8009ada:	e02e      	b.n	8009b3a <UART_Start_Receive_IT+0xaa>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	225c      	movs	r2, #92	@ 0x5c
 8009ae0:	21ff      	movs	r1, #255	@ 0xff
 8009ae2:	5299      	strh	r1, [r3, r2]
 8009ae4:	e029      	b.n	8009b3a <UART_Start_Receive_IT+0xaa>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10d      	bne.n	8009b0a <UART_Start_Receive_IT+0x7a>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d104      	bne.n	8009b00 <UART_Start_Receive_IT+0x70>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	225c      	movs	r2, #92	@ 0x5c
 8009afa:	21ff      	movs	r1, #255	@ 0xff
 8009afc:	5299      	strh	r1, [r3, r2]
 8009afe:	e01c      	b.n	8009b3a <UART_Start_Receive_IT+0xaa>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	225c      	movs	r2, #92	@ 0x5c
 8009b04:	217f      	movs	r1, #127	@ 0x7f
 8009b06:	5299      	strh	r1, [r3, r2]
 8009b08:	e017      	b.n	8009b3a <UART_Start_Receive_IT+0xaa>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	689a      	ldr	r2, [r3, #8]
 8009b0e:	2380      	movs	r3, #128	@ 0x80
 8009b10:	055b      	lsls	r3, r3, #21
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d10d      	bne.n	8009b32 <UART_Start_Receive_IT+0xa2>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d104      	bne.n	8009b28 <UART_Start_Receive_IT+0x98>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	225c      	movs	r2, #92	@ 0x5c
 8009b22:	217f      	movs	r1, #127	@ 0x7f
 8009b24:	5299      	strh	r1, [r3, r2]
 8009b26:	e008      	b.n	8009b3a <UART_Start_Receive_IT+0xaa>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	225c      	movs	r2, #92	@ 0x5c
 8009b2c:	213f      	movs	r1, #63	@ 0x3f
 8009b2e:	5299      	strh	r1, [r3, r2]
 8009b30:	e003      	b.n	8009b3a <UART_Start_Receive_IT+0xaa>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	225c      	movs	r2, #92	@ 0x5c
 8009b36:	2100      	movs	r1, #0
 8009b38:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2284      	movs	r2, #132	@ 0x84
 8009b3e:	2100      	movs	r1, #0
 8009b40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2280      	movs	r2, #128	@ 0x80
 8009b46:	2122      	movs	r1, #34	@ 0x22
 8009b48:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b54:	2301      	movs	r3, #1
 8009b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5a:	f383 8810 	msr	PRIMASK, r3
}
 8009b5e:	46c0      	nop			@ (mov r8, r8)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	609a      	str	r2, [r3, #8]
 8009b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b72:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b76:	f383 8810 	msr	PRIMASK, r3
}
 8009b7a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	2380      	movs	r3, #128	@ 0x80
 8009b82:	015b      	lsls	r3, r3, #5
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d107      	bne.n	8009b98 <UART_Start_Receive_IT+0x108>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d103      	bne.n	8009b98 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4a22      	ldr	r2, [pc, #136]	@ (8009c1c <UART_Start_Receive_IT+0x18c>)
 8009b94:	669a      	str	r2, [r3, #104]	@ 0x68
 8009b96:	e002      	b.n	8009b9e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4a21      	ldr	r2, [pc, #132]	@ (8009c20 <UART_Start_Receive_IT+0x190>)
 8009b9c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d019      	beq.n	8009bda <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8009baa:	61fb      	str	r3, [r7, #28]
  return(result);
 8009bac:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	f383 8810 	msr	PRIMASK, r3
}
 8009bba:	46c0      	nop			@ (mov r8, r8)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2190      	movs	r1, #144	@ 0x90
 8009bc8:	0049      	lsls	r1, r1, #1
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd4:	f383 8810 	msr	PRIMASK, r3
}
 8009bd8:	e018      	b.n	8009c0c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bda:	f3ef 8310 	mrs	r3, PRIMASK
 8009bde:	613b      	str	r3, [r7, #16]
  return(result);
 8009be0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009be4:	2301      	movs	r3, #1
 8009be6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f383 8810 	msr	PRIMASK, r3
}
 8009bee:	46c0      	nop			@ (mov r8, r8)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2120      	movs	r1, #32
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	f383 8810 	msr	PRIMASK, r3
}
 8009c0a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	0018      	movs	r0, r3
 8009c10:	46bd      	mov	sp, r7
 8009c12:	b010      	add	sp, #64	@ 0x40
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	46c0      	nop			@ (mov r8, r8)
 8009c18:	000001ff 	.word	0x000001ff
 8009c1c:	08009f29 	.word	0x08009f29
 8009c20:	08009d71 	.word	0x08009d71

08009c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08e      	sub	sp, #56	@ 0x38
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c30:	617b      	str	r3, [r7, #20]
  return(result);
 8009c32:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c36:	2301      	movs	r3, #1
 8009c38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	f383 8810 	msr	PRIMASK, r3
}
 8009c40:	46c0      	nop			@ (mov r8, r8)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4926      	ldr	r1, [pc, #152]	@ (8009ce8 <UART_EndRxTransfer+0xc4>)
 8009c4e:	400a      	ands	r2, r1
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	f383 8810 	msr	PRIMASK, r3
}
 8009c5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8009c62:	623b      	str	r3, [r7, #32]
  return(result);
 8009c64:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c68:	2301      	movs	r3, #1
 8009c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6e:	f383 8810 	msr	PRIMASK, r3
}
 8009c72:	46c0      	nop			@ (mov r8, r8)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689a      	ldr	r2, [r3, #8]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2101      	movs	r1, #1
 8009c80:	438a      	bics	r2, r1
 8009c82:	609a      	str	r2, [r3, #8]
 8009c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8a:	f383 8810 	msr	PRIMASK, r3
}
 8009c8e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d118      	bne.n	8009cca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c98:	f3ef 8310 	mrs	r3, PRIMASK
 8009c9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f383 8810 	msr	PRIMASK, r3
}
 8009cac:	46c0      	nop			@ (mov r8, r8)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2110      	movs	r1, #16
 8009cba:	438a      	bics	r2, r1
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f383 8810 	msr	PRIMASK, r3
}
 8009cc8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2280      	movs	r2, #128	@ 0x80
 8009cce:	2120      	movs	r1, #32
 8009cd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009cde:	46c0      	nop			@ (mov r8, r8)
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	b00e      	add	sp, #56	@ 0x38
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	46c0      	nop			@ (mov r8, r8)
 8009ce8:	fffffedf 	.word	0xfffffedf

08009cec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	225a      	movs	r2, #90	@ 0x5a
 8009cfe:	2100      	movs	r1, #0
 8009d00:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2252      	movs	r2, #82	@ 0x52
 8009d06:	2100      	movs	r1, #0
 8009d08:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	f7ff fb57 	bl	80093c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d12:	46c0      	nop			@ (mov r8, r8)
 8009d14:	46bd      	mov	sp, r7
 8009d16:	b004      	add	sp, #16
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b086      	sub	sp, #24
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d22:	f3ef 8310 	mrs	r3, PRIMASK
 8009d26:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d28:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f383 8810 	msr	PRIMASK, r3
}
 8009d36:	46c0      	nop			@ (mov r8, r8)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2140      	movs	r1, #64	@ 0x40
 8009d44:	438a      	bics	r2, r1
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f383 8810 	msr	PRIMASK, r3
}
 8009d52:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2220      	movs	r2, #32
 8009d58:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	0018      	movs	r0, r3
 8009d64:	f7ff fb24 	bl	80093b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d68:	46c0      	nop			@ (mov r8, r8)
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	b006      	add	sp, #24
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b094      	sub	sp, #80	@ 0x50
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009d78:	204e      	movs	r0, #78	@ 0x4e
 8009d7a:	183b      	adds	r3, r7, r0
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	215c      	movs	r1, #92	@ 0x5c
 8009d80:	5a52      	ldrh	r2, [r2, r1]
 8009d82:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2280      	movs	r2, #128	@ 0x80
 8009d88:	589b      	ldr	r3, [r3, r2]
 8009d8a:	2b22      	cmp	r3, #34	@ 0x22
 8009d8c:	d000      	beq.n	8009d90 <UART_RxISR_8BIT+0x20>
 8009d8e:	e0ba      	b.n	8009f06 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	214c      	movs	r1, #76	@ 0x4c
 8009d96:	187b      	adds	r3, r7, r1
 8009d98:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8009d9a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d9c:	187b      	adds	r3, r7, r1
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	183b      	adds	r3, r7, r0
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	b2d9      	uxtb	r1, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dac:	400a      	ands	r2, r1
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	225a      	movs	r2, #90	@ 0x5a
 8009dc0:	5a9b      	ldrh	r3, [r3, r2]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	b299      	uxth	r1, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	225a      	movs	r2, #90	@ 0x5a
 8009dcc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	225a      	movs	r2, #90	@ 0x5a
 8009dd2:	5a9b      	ldrh	r3, [r3, r2]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d000      	beq.n	8009ddc <UART_RxISR_8BIT+0x6c>
 8009dda:	e09c      	b.n	8009f16 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8009de0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009de6:	2301      	movs	r3, #1
 8009de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dec:	f383 8810 	msr	PRIMASK, r3
}
 8009df0:	46c0      	nop			@ (mov r8, r8)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4948      	ldr	r1, [pc, #288]	@ (8009f20 <UART_RxISR_8BIT+0x1b0>)
 8009dfe:	400a      	ands	r2, r1
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e08:	f383 8810 	msr	PRIMASK, r3
}
 8009e0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e12:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e18:	2301      	movs	r3, #1
 8009e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e1e:	f383 8810 	msr	PRIMASK, r3
}
 8009e22:	46c0      	nop			@ (mov r8, r8)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689a      	ldr	r2, [r3, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2101      	movs	r1, #1
 8009e30:	438a      	bics	r2, r1
 8009e32:	609a      	str	r2, [r3, #8]
 8009e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e36:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3a:	f383 8810 	msr	PRIMASK, r3
}
 8009e3e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2280      	movs	r2, #128	@ 0x80
 8009e44:	2120      	movs	r1, #32
 8009e46:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	2380      	movs	r3, #128	@ 0x80
 8009e5c:	041b      	lsls	r3, r3, #16
 8009e5e:	4013      	ands	r3, r2
 8009e60:	d018      	beq.n	8009e94 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e62:	f3ef 8310 	mrs	r3, PRIMASK
 8009e66:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e68:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	f383 8810 	msr	PRIMASK, r3
}
 8009e76:	46c0      	nop			@ (mov r8, r8)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4928      	ldr	r1, [pc, #160]	@ (8009f24 <UART_RxISR_8BIT+0x1b4>)
 8009e84:	400a      	ands	r2, r1
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	f383 8810 	msr	PRIMASK, r3
}
 8009e92:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d12f      	bne.n	8009efc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ea6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ea8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eac:	2301      	movs	r3, #1
 8009eae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f383 8810 	msr	PRIMASK, r3
}
 8009eb6:	46c0      	nop			@ (mov r8, r8)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2110      	movs	r1, #16
 8009ec4:	438a      	bics	r2, r1
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f383 8810 	msr	PRIMASK, r3
}
 8009ed2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	2210      	movs	r2, #16
 8009edc:	4013      	ands	r3, r2
 8009ede:	2b10      	cmp	r3, #16
 8009ee0:	d103      	bne.n	8009eea <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2210      	movs	r2, #16
 8009ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2258      	movs	r2, #88	@ 0x58
 8009eee:	5a9a      	ldrh	r2, [r3, r2]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	0011      	movs	r1, r2
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f7ff fa6b 	bl	80093d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009efa:	e00c      	b.n	8009f16 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	0018      	movs	r0, r3
 8009f00:	f7fb fbb4 	bl	800566c <HAL_UART_RxCpltCallback>
}
 8009f04:	e007      	b.n	8009f16 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	699a      	ldr	r2, [r3, #24]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2108      	movs	r1, #8
 8009f12:	430a      	orrs	r2, r1
 8009f14:	619a      	str	r2, [r3, #24]
}
 8009f16:	46c0      	nop			@ (mov r8, r8)
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	b014      	add	sp, #80	@ 0x50
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	46c0      	nop			@ (mov r8, r8)
 8009f20:	fffffedf 	.word	0xfffffedf
 8009f24:	fbffffff 	.word	0xfbffffff

08009f28 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b094      	sub	sp, #80	@ 0x50
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f30:	204e      	movs	r0, #78	@ 0x4e
 8009f32:	183b      	adds	r3, r7, r0
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	215c      	movs	r1, #92	@ 0x5c
 8009f38:	5a52      	ldrh	r2, [r2, r1]
 8009f3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2280      	movs	r2, #128	@ 0x80
 8009f40:	589b      	ldr	r3, [r3, r2]
 8009f42:	2b22      	cmp	r3, #34	@ 0x22
 8009f44:	d000      	beq.n	8009f48 <UART_RxISR_16BIT+0x20>
 8009f46:	e0ba      	b.n	800a0be <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	214c      	movs	r1, #76	@ 0x4c
 8009f4e:	187b      	adds	r3, r7, r1
 8009f50:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8009f52:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f58:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f5a:	187b      	adds	r3, r7, r1
 8009f5c:	183a      	adds	r2, r7, r0
 8009f5e:	881b      	ldrh	r3, [r3, #0]
 8009f60:	8812      	ldrh	r2, [r2, #0]
 8009f62:	4013      	ands	r3, r2
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f6e:	1c9a      	adds	r2, r3, #2
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	225a      	movs	r2, #90	@ 0x5a
 8009f78:	5a9b      	ldrh	r3, [r3, r2]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	b299      	uxth	r1, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	225a      	movs	r2, #90	@ 0x5a
 8009f84:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	225a      	movs	r2, #90	@ 0x5a
 8009f8a:	5a9b      	ldrh	r3, [r3, r2]
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d000      	beq.n	8009f94 <UART_RxISR_16BIT+0x6c>
 8009f92:	e09c      	b.n	800a0ce <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f94:	f3ef 8310 	mrs	r3, PRIMASK
 8009f98:	623b      	str	r3, [r7, #32]
  return(result);
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa4:	f383 8810 	msr	PRIMASK, r3
}
 8009fa8:	46c0      	nop			@ (mov r8, r8)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4948      	ldr	r1, [pc, #288]	@ (800a0d8 <UART_RxISR_16BIT+0x1b0>)
 8009fb6:	400a      	ands	r2, r1
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc0:	f383 8810 	msr	PRIMASK, r3
}
 8009fc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8009fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8009fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fce:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd6:	f383 8810 	msr	PRIMASK, r3
}
 8009fda:	46c0      	nop			@ (mov r8, r8)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689a      	ldr	r2, [r3, #8]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	438a      	bics	r2, r1
 8009fea:	609a      	str	r2, [r3, #8]
 8009fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff2:	f383 8810 	msr	PRIMASK, r3
}
 8009ff6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2280      	movs	r2, #128	@ 0x80
 8009ffc:	2120      	movs	r1, #32
 8009ffe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	2380      	movs	r3, #128	@ 0x80
 800a014:	041b      	lsls	r3, r3, #16
 800a016:	4013      	ands	r3, r2
 800a018:	d018      	beq.n	800a04c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a01a:	f3ef 8310 	mrs	r3, PRIMASK
 800a01e:	617b      	str	r3, [r7, #20]
  return(result);
 800a020:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a024:	2301      	movs	r3, #1
 800a026:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	f383 8810 	msr	PRIMASK, r3
}
 800a02e:	46c0      	nop			@ (mov r8, r8)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4928      	ldr	r1, [pc, #160]	@ (800a0dc <UART_RxISR_16BIT+0x1b4>)
 800a03c:	400a      	ands	r2, r1
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a042:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	f383 8810 	msr	PRIMASK, r3
}
 800a04a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a050:	2b01      	cmp	r3, #1
 800a052:	d12f      	bne.n	800a0b4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a05a:	f3ef 8310 	mrs	r3, PRIMASK
 800a05e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a060:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a062:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a064:	2301      	movs	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f383 8810 	msr	PRIMASK, r3
}
 800a06e:	46c0      	nop			@ (mov r8, r8)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2110      	movs	r1, #16
 800a07c:	438a      	bics	r2, r1
 800a07e:	601a      	str	r2, [r3, #0]
 800a080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f383 8810 	msr	PRIMASK, r3
}
 800a08a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	2210      	movs	r2, #16
 800a094:	4013      	ands	r3, r2
 800a096:	2b10      	cmp	r3, #16
 800a098:	d103      	bne.n	800a0a2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2210      	movs	r2, #16
 800a0a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2258      	movs	r2, #88	@ 0x58
 800a0a6:	5a9a      	ldrh	r2, [r3, r2]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	0011      	movs	r1, r2
 800a0ac:	0018      	movs	r0, r3
 800a0ae:	f7ff f98f 	bl	80093d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0b2:	e00c      	b.n	800a0ce <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	f7fb fad8 	bl	800566c <HAL_UART_RxCpltCallback>
}
 800a0bc:	e007      	b.n	800a0ce <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	699a      	ldr	r2, [r3, #24]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2108      	movs	r1, #8
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	619a      	str	r2, [r3, #24]
}
 800a0ce:	46c0      	nop			@ (mov r8, r8)
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	b014      	add	sp, #80	@ 0x50
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	46c0      	nop			@ (mov r8, r8)
 800a0d8:	fffffedf 	.word	0xfffffedf
 800a0dc:	fbffffff 	.word	0xfbffffff

0800a0e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0e8:	46c0      	nop			@ (mov r8, r8)
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	b002      	add	sp, #8
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <atof>:
 800a0f0:	b510      	push	{r4, lr}
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	f000 fe12 	bl	800ad1c <strtod>
 800a0f8:	bd10      	pop	{r4, pc}

0800a0fa <atoi>:
 800a0fa:	b510      	push	{r4, lr}
 800a0fc:	220a      	movs	r2, #10
 800a0fe:	2100      	movs	r1, #0
 800a100:	f000 fea4 	bl	800ae4c <strtol>
 800a104:	bd10      	pop	{r4, pc}
	...

0800a108 <sulp>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	0016      	movs	r6, r2
 800a10c:	000d      	movs	r5, r1
 800a10e:	f002 f947 	bl	800c3a0 <__ulp>
 800a112:	2e00      	cmp	r6, #0
 800a114:	d00d      	beq.n	800a132 <sulp+0x2a>
 800a116:	236b      	movs	r3, #107	@ 0x6b
 800a118:	006a      	lsls	r2, r5, #1
 800a11a:	0d52      	lsrs	r2, r2, #21
 800a11c:	1a9b      	subs	r3, r3, r2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	dd07      	ble.n	800a132 <sulp+0x2a>
 800a122:	2400      	movs	r4, #0
 800a124:	4a03      	ldr	r2, [pc, #12]	@ (800a134 <sulp+0x2c>)
 800a126:	051b      	lsls	r3, r3, #20
 800a128:	189d      	adds	r5, r3, r2
 800a12a:	002b      	movs	r3, r5
 800a12c:	0022      	movs	r2, r4
 800a12e:	f7f7 ff2f 	bl	8001f90 <__aeabi_dmul>
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	3ff00000 	.word	0x3ff00000

0800a138 <_strtod_l>:
 800a138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a13a:	b0a3      	sub	sp, #140	@ 0x8c
 800a13c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800a13e:	2200      	movs	r2, #0
 800a140:	2600      	movs	r6, #0
 800a142:	2700      	movs	r7, #0
 800a144:	9005      	str	r0, [sp, #20]
 800a146:	9109      	str	r1, [sp, #36]	@ 0x24
 800a148:	921e      	str	r2, [sp, #120]	@ 0x78
 800a14a:	911d      	str	r1, [sp, #116]	@ 0x74
 800a14c:	780a      	ldrb	r2, [r1, #0]
 800a14e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a150:	d053      	beq.n	800a1fa <_strtod_l+0xc2>
 800a152:	d83f      	bhi.n	800a1d4 <_strtod_l+0x9c>
 800a154:	2a0d      	cmp	r2, #13
 800a156:	d839      	bhi.n	800a1cc <_strtod_l+0x94>
 800a158:	2a08      	cmp	r2, #8
 800a15a:	d839      	bhi.n	800a1d0 <_strtod_l+0x98>
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	d042      	beq.n	800a1e6 <_strtod_l+0xae>
 800a160:	2200      	movs	r2, #0
 800a162:	9212      	str	r2, [sp, #72]	@ 0x48
 800a164:	2100      	movs	r1, #0
 800a166:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800a168:	910c      	str	r1, [sp, #48]	@ 0x30
 800a16a:	782a      	ldrb	r2, [r5, #0]
 800a16c:	2a30      	cmp	r2, #48	@ 0x30
 800a16e:	d000      	beq.n	800a172 <_strtod_l+0x3a>
 800a170:	e083      	b.n	800a27a <_strtod_l+0x142>
 800a172:	786a      	ldrb	r2, [r5, #1]
 800a174:	3120      	adds	r1, #32
 800a176:	438a      	bics	r2, r1
 800a178:	2a58      	cmp	r2, #88	@ 0x58
 800a17a:	d000      	beq.n	800a17e <_strtod_l+0x46>
 800a17c:	e073      	b.n	800a266 <_strtod_l+0x12e>
 800a17e:	9302      	str	r3, [sp, #8]
 800a180:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a182:	4a95      	ldr	r2, [pc, #596]	@ (800a3d8 <_strtod_l+0x2a0>)
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	ab1e      	add	r3, sp, #120	@ 0x78
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	9805      	ldr	r0, [sp, #20]
 800a18c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a18e:	a91d      	add	r1, sp, #116	@ 0x74
 800a190:	f001 f9b6 	bl	800b500 <__gethex>
 800a194:	230f      	movs	r3, #15
 800a196:	0002      	movs	r2, r0
 800a198:	401a      	ands	r2, r3
 800a19a:	0004      	movs	r4, r0
 800a19c:	9206      	str	r2, [sp, #24]
 800a19e:	4218      	tst	r0, r3
 800a1a0:	d005      	beq.n	800a1ae <_strtod_l+0x76>
 800a1a2:	2a06      	cmp	r2, #6
 800a1a4:	d12b      	bne.n	800a1fe <_strtod_l+0xc6>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	3501      	adds	r5, #1
 800a1aa:	951d      	str	r5, [sp, #116]	@ 0x74
 800a1ac:	9312      	str	r3, [sp, #72]	@ 0x48
 800a1ae:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <_strtod_l+0x82>
 800a1b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d019      	beq.n	800a1f4 <_strtod_l+0xbc>
 800a1c0:	2380      	movs	r3, #128	@ 0x80
 800a1c2:	0030      	movs	r0, r6
 800a1c4:	061b      	lsls	r3, r3, #24
 800a1c6:	18f9      	adds	r1, r7, r3
 800a1c8:	b023      	add	sp, #140	@ 0x8c
 800a1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1cc:	2a20      	cmp	r2, #32
 800a1ce:	d1c7      	bne.n	800a160 <_strtod_l+0x28>
 800a1d0:	3101      	adds	r1, #1
 800a1d2:	e7ba      	b.n	800a14a <_strtod_l+0x12>
 800a1d4:	2a2d      	cmp	r2, #45	@ 0x2d
 800a1d6:	d1c3      	bne.n	800a160 <_strtod_l+0x28>
 800a1d8:	3a2c      	subs	r2, #44	@ 0x2c
 800a1da:	9212      	str	r2, [sp, #72]	@ 0x48
 800a1dc:	1c4a      	adds	r2, r1, #1
 800a1de:	921d      	str	r2, [sp, #116]	@ 0x74
 800a1e0:	784a      	ldrb	r2, [r1, #1]
 800a1e2:	2a00      	cmp	r2, #0
 800a1e4:	d1be      	bne.n	800a164 <_strtod_l+0x2c>
 800a1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e8:	931d      	str	r3, [sp, #116]	@ 0x74
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	9312      	str	r3, [sp, #72]	@ 0x48
 800a1ee:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1df      	bne.n	800a1b4 <_strtod_l+0x7c>
 800a1f4:	0030      	movs	r0, r6
 800a1f6:	0039      	movs	r1, r7
 800a1f8:	e7e6      	b.n	800a1c8 <_strtod_l+0x90>
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	e7ed      	b.n	800a1da <_strtod_l+0xa2>
 800a1fe:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a200:	2a00      	cmp	r2, #0
 800a202:	d007      	beq.n	800a214 <_strtod_l+0xdc>
 800a204:	2135      	movs	r1, #53	@ 0x35
 800a206:	a820      	add	r0, sp, #128	@ 0x80
 800a208:	f002 f9c0 	bl	800c58c <__copybits>
 800a20c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a20e:	9805      	ldr	r0, [sp, #20]
 800a210:	f001 fd7a 	bl	800bd08 <_Bfree>
 800a214:	9806      	ldr	r0, [sp, #24]
 800a216:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a218:	3801      	subs	r0, #1
 800a21a:	2804      	cmp	r0, #4
 800a21c:	d806      	bhi.n	800a22c <_strtod_l+0xf4>
 800a21e:	f7f5 ff85 	bl	800012c <__gnu_thumb1_case_uqi>
 800a222:	0312      	.short	0x0312
 800a224:	1e1c      	.short	0x1e1c
 800a226:	12          	.byte	0x12
 800a227:	00          	.byte	0x00
 800a228:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a22a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800a22c:	05e4      	lsls	r4, r4, #23
 800a22e:	d502      	bpl.n	800a236 <_strtod_l+0xfe>
 800a230:	2380      	movs	r3, #128	@ 0x80
 800a232:	061b      	lsls	r3, r3, #24
 800a234:	431f      	orrs	r7, r3
 800a236:	4b69      	ldr	r3, [pc, #420]	@ (800a3dc <_strtod_l+0x2a4>)
 800a238:	423b      	tst	r3, r7
 800a23a:	d1b8      	bne.n	800a1ae <_strtod_l+0x76>
 800a23c:	f001 f854 	bl	800b2e8 <__errno>
 800a240:	2322      	movs	r3, #34	@ 0x22
 800a242:	6003      	str	r3, [r0, #0]
 800a244:	e7b3      	b.n	800a1ae <_strtod_l+0x76>
 800a246:	4966      	ldr	r1, [pc, #408]	@ (800a3e0 <_strtod_l+0x2a8>)
 800a248:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a24a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a24c:	400a      	ands	r2, r1
 800a24e:	4965      	ldr	r1, [pc, #404]	@ (800a3e4 <_strtod_l+0x2ac>)
 800a250:	185b      	adds	r3, r3, r1
 800a252:	051b      	lsls	r3, r3, #20
 800a254:	431a      	orrs	r2, r3
 800a256:	0017      	movs	r7, r2
 800a258:	e7e8      	b.n	800a22c <_strtod_l+0xf4>
 800a25a:	4f60      	ldr	r7, [pc, #384]	@ (800a3dc <_strtod_l+0x2a4>)
 800a25c:	e7e6      	b.n	800a22c <_strtod_l+0xf4>
 800a25e:	2601      	movs	r6, #1
 800a260:	4f61      	ldr	r7, [pc, #388]	@ (800a3e8 <_strtod_l+0x2b0>)
 800a262:	4276      	negs	r6, r6
 800a264:	e7e2      	b.n	800a22c <_strtod_l+0xf4>
 800a266:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	921d      	str	r2, [sp, #116]	@ 0x74
 800a26c:	785b      	ldrb	r3, [r3, #1]
 800a26e:	2b30      	cmp	r3, #48	@ 0x30
 800a270:	d0f9      	beq.n	800a266 <_strtod_l+0x12e>
 800a272:	2b00      	cmp	r3, #0
 800a274:	d09b      	beq.n	800a1ae <_strtod_l+0x76>
 800a276:	2301      	movs	r3, #1
 800a278:	930c      	str	r3, [sp, #48]	@ 0x30
 800a27a:	2500      	movs	r5, #0
 800a27c:	220a      	movs	r2, #10
 800a27e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a280:	950d      	str	r5, [sp, #52]	@ 0x34
 800a282:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a284:	9508      	str	r5, [sp, #32]
 800a286:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800a288:	7804      	ldrb	r4, [r0, #0]
 800a28a:	0023      	movs	r3, r4
 800a28c:	3b30      	subs	r3, #48	@ 0x30
 800a28e:	b2d9      	uxtb	r1, r3
 800a290:	2909      	cmp	r1, #9
 800a292:	d927      	bls.n	800a2e4 <_strtod_l+0x1ac>
 800a294:	2201      	movs	r2, #1
 800a296:	4955      	ldr	r1, [pc, #340]	@ (800a3ec <_strtod_l+0x2b4>)
 800a298:	f000 ff3e 	bl	800b118 <strncmp>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d031      	beq.n	800a304 <_strtod_l+0x1cc>
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	0023      	movs	r3, r4
 800a2a4:	4684      	mov	ip, r0
 800a2a6:	9a08      	ldr	r2, [sp, #32]
 800a2a8:	900e      	str	r0, [sp, #56]	@ 0x38
 800a2aa:	9206      	str	r2, [sp, #24]
 800a2ac:	2220      	movs	r2, #32
 800a2ae:	0019      	movs	r1, r3
 800a2b0:	4391      	bics	r1, r2
 800a2b2:	000a      	movs	r2, r1
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	9107      	str	r1, [sp, #28]
 800a2b8:	2a45      	cmp	r2, #69	@ 0x45
 800a2ba:	d000      	beq.n	800a2be <_strtod_l+0x186>
 800a2bc:	e0c0      	b.n	800a440 <_strtod_l+0x308>
 800a2be:	9b06      	ldr	r3, [sp, #24]
 800a2c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a2c2:	4303      	orrs	r3, r0
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	428b      	cmp	r3, r1
 800a2c8:	d08d      	beq.n	800a1e6 <_strtod_l+0xae>
 800a2ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a2cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	931d      	str	r3, [sp, #116]	@ 0x74
 800a2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d4:	785b      	ldrb	r3, [r3, #1]
 800a2d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a2d8:	d070      	beq.n	800a3bc <_strtod_l+0x284>
 800a2da:	000c      	movs	r4, r1
 800a2dc:	2b2d      	cmp	r3, #45	@ 0x2d
 800a2de:	d173      	bne.n	800a3c8 <_strtod_l+0x290>
 800a2e0:	2401      	movs	r4, #1
 800a2e2:	e06c      	b.n	800a3be <_strtod_l+0x286>
 800a2e4:	9908      	ldr	r1, [sp, #32]
 800a2e6:	2908      	cmp	r1, #8
 800a2e8:	dc09      	bgt.n	800a2fe <_strtod_l+0x1c6>
 800a2ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a2ec:	4351      	muls	r1, r2
 800a2ee:	185b      	adds	r3, r3, r1
 800a2f0:	930d      	str	r3, [sp, #52]	@ 0x34
 800a2f2:	9b08      	ldr	r3, [sp, #32]
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	9308      	str	r3, [sp, #32]
 800a2fa:	901d      	str	r0, [sp, #116]	@ 0x74
 800a2fc:	e7c3      	b.n	800a286 <_strtod_l+0x14e>
 800a2fe:	4355      	muls	r5, r2
 800a300:	195d      	adds	r5, r3, r5
 800a302:	e7f6      	b.n	800a2f2 <_strtod_l+0x1ba>
 800a304:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	921d      	str	r2, [sp, #116]	@ 0x74
 800a30a:	9a08      	ldr	r2, [sp, #32]
 800a30c:	785b      	ldrb	r3, [r3, #1]
 800a30e:	2a00      	cmp	r2, #0
 800a310:	d03a      	beq.n	800a388 <_strtod_l+0x250>
 800a312:	900e      	str	r0, [sp, #56]	@ 0x38
 800a314:	9206      	str	r2, [sp, #24]
 800a316:	001a      	movs	r2, r3
 800a318:	3a30      	subs	r2, #48	@ 0x30
 800a31a:	2a09      	cmp	r2, #9
 800a31c:	d912      	bls.n	800a344 <_strtod_l+0x20c>
 800a31e:	2201      	movs	r2, #1
 800a320:	4694      	mov	ip, r2
 800a322:	e7c3      	b.n	800a2ac <_strtod_l+0x174>
 800a324:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a326:	3001      	adds	r0, #1
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	921d      	str	r2, [sp, #116]	@ 0x74
 800a32c:	785b      	ldrb	r3, [r3, #1]
 800a32e:	2b30      	cmp	r3, #48	@ 0x30
 800a330:	d0f8      	beq.n	800a324 <_strtod_l+0x1ec>
 800a332:	001a      	movs	r2, r3
 800a334:	3a31      	subs	r2, #49	@ 0x31
 800a336:	2a08      	cmp	r2, #8
 800a338:	d83b      	bhi.n	800a3b2 <_strtod_l+0x27a>
 800a33a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a33c:	2000      	movs	r0, #0
 800a33e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a340:	9006      	str	r0, [sp, #24]
 800a342:	9213      	str	r2, [sp, #76]	@ 0x4c
 800a344:	001a      	movs	r2, r3
 800a346:	1c41      	adds	r1, r0, #1
 800a348:	3a30      	subs	r2, #48	@ 0x30
 800a34a:	2b30      	cmp	r3, #48	@ 0x30
 800a34c:	d016      	beq.n	800a37c <_strtod_l+0x244>
 800a34e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a350:	185b      	adds	r3, r3, r1
 800a352:	930e      	str	r3, [sp, #56]	@ 0x38
 800a354:	9b06      	ldr	r3, [sp, #24]
 800a356:	210a      	movs	r1, #10
 800a358:	469c      	mov	ip, r3
 800a35a:	4484      	add	ip, r0
 800a35c:	459c      	cmp	ip, r3
 800a35e:	d115      	bne.n	800a38c <_strtod_l+0x254>
 800a360:	9906      	ldr	r1, [sp, #24]
 800a362:	9b06      	ldr	r3, [sp, #24]
 800a364:	3101      	adds	r1, #1
 800a366:	1809      	adds	r1, r1, r0
 800a368:	181b      	adds	r3, r3, r0
 800a36a:	9106      	str	r1, [sp, #24]
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	dc19      	bgt.n	800a3a4 <_strtod_l+0x26c>
 800a370:	230a      	movs	r3, #10
 800a372:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a374:	434b      	muls	r3, r1
 800a376:	2100      	movs	r1, #0
 800a378:	18d3      	adds	r3, r2, r3
 800a37a:	930d      	str	r3, [sp, #52]	@ 0x34
 800a37c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a37e:	0008      	movs	r0, r1
 800a380:	1c5a      	adds	r2, r3, #1
 800a382:	921d      	str	r2, [sp, #116]	@ 0x74
 800a384:	785b      	ldrb	r3, [r3, #1]
 800a386:	e7c6      	b.n	800a316 <_strtod_l+0x1de>
 800a388:	9808      	ldr	r0, [sp, #32]
 800a38a:	e7d0      	b.n	800a32e <_strtod_l+0x1f6>
 800a38c:	1c5c      	adds	r4, r3, #1
 800a38e:	2b08      	cmp	r3, #8
 800a390:	dc04      	bgt.n	800a39c <_strtod_l+0x264>
 800a392:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a394:	434b      	muls	r3, r1
 800a396:	930d      	str	r3, [sp, #52]	@ 0x34
 800a398:	0023      	movs	r3, r4
 800a39a:	e7df      	b.n	800a35c <_strtod_l+0x224>
 800a39c:	2c10      	cmp	r4, #16
 800a39e:	dcfb      	bgt.n	800a398 <_strtod_l+0x260>
 800a3a0:	434d      	muls	r5, r1
 800a3a2:	e7f9      	b.n	800a398 <_strtod_l+0x260>
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	2b0f      	cmp	r3, #15
 800a3a8:	dce8      	bgt.n	800a37c <_strtod_l+0x244>
 800a3aa:	230a      	movs	r3, #10
 800a3ac:	435d      	muls	r5, r3
 800a3ae:	1955      	adds	r5, r2, r5
 800a3b0:	e7e4      	b.n	800a37c <_strtod_l+0x244>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3b6:	9206      	str	r2, [sp, #24]
 800a3b8:	3201      	adds	r2, #1
 800a3ba:	e7b1      	b.n	800a320 <_strtod_l+0x1e8>
 800a3bc:	2400      	movs	r4, #0
 800a3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c0:	3302      	adds	r3, #2
 800a3c2:	931d      	str	r3, [sp, #116]	@ 0x74
 800a3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c6:	789b      	ldrb	r3, [r3, #2]
 800a3c8:	001a      	movs	r2, r3
 800a3ca:	3a30      	subs	r2, #48	@ 0x30
 800a3cc:	2a09      	cmp	r2, #9
 800a3ce:	d913      	bls.n	800a3f8 <_strtod_l+0x2c0>
 800a3d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3d2:	921d      	str	r2, [sp, #116]	@ 0x74
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	e032      	b.n	800a43e <_strtod_l+0x306>
 800a3d8:	0800d748 	.word	0x0800d748
 800a3dc:	7ff00000 	.word	0x7ff00000
 800a3e0:	ffefffff 	.word	0xffefffff
 800a3e4:	00000433 	.word	0x00000433
 800a3e8:	7fffffff 	.word	0x7fffffff
 800a3ec:	0800d724 	.word	0x0800d724
 800a3f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	921d      	str	r2, [sp, #116]	@ 0x74
 800a3f6:	785b      	ldrb	r3, [r3, #1]
 800a3f8:	2b30      	cmp	r3, #48	@ 0x30
 800a3fa:	d0f9      	beq.n	800a3f0 <_strtod_l+0x2b8>
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	9207      	str	r2, [sp, #28]
 800a400:	001a      	movs	r2, r3
 800a402:	3a31      	subs	r2, #49	@ 0x31
 800a404:	2a08      	cmp	r2, #8
 800a406:	d81b      	bhi.n	800a440 <_strtod_l+0x308>
 800a408:	3b30      	subs	r3, #48	@ 0x30
 800a40a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a40c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a40e:	9307      	str	r3, [sp, #28]
 800a410:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a412:	1c59      	adds	r1, r3, #1
 800a414:	911d      	str	r1, [sp, #116]	@ 0x74
 800a416:	785b      	ldrb	r3, [r3, #1]
 800a418:	001a      	movs	r2, r3
 800a41a:	3a30      	subs	r2, #48	@ 0x30
 800a41c:	2a09      	cmp	r2, #9
 800a41e:	d93a      	bls.n	800a496 <_strtod_l+0x35e>
 800a420:	9a07      	ldr	r2, [sp, #28]
 800a422:	1a8a      	subs	r2, r1, r2
 800a424:	49b4      	ldr	r1, [pc, #720]	@ (800a6f8 <_strtod_l+0x5c0>)
 800a426:	9107      	str	r1, [sp, #28]
 800a428:	2a08      	cmp	r2, #8
 800a42a:	dc04      	bgt.n	800a436 <_strtod_l+0x2fe>
 800a42c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a42e:	9207      	str	r2, [sp, #28]
 800a430:	428a      	cmp	r2, r1
 800a432:	dd00      	ble.n	800a436 <_strtod_l+0x2fe>
 800a434:	9107      	str	r1, [sp, #28]
 800a436:	2c00      	cmp	r4, #0
 800a438:	d002      	beq.n	800a440 <_strtod_l+0x308>
 800a43a:	9a07      	ldr	r2, [sp, #28]
 800a43c:	4252      	negs	r2, r2
 800a43e:	9207      	str	r2, [sp, #28]
 800a440:	9a06      	ldr	r2, [sp, #24]
 800a442:	2a00      	cmp	r2, #0
 800a444:	d14d      	bne.n	800a4e2 <_strtod_l+0x3aa>
 800a446:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a448:	4310      	orrs	r0, r2
 800a44a:	d000      	beq.n	800a44e <_strtod_l+0x316>
 800a44c:	e6af      	b.n	800a1ae <_strtod_l+0x76>
 800a44e:	4662      	mov	r2, ip
 800a450:	2a00      	cmp	r2, #0
 800a452:	d000      	beq.n	800a456 <_strtod_l+0x31e>
 800a454:	e6c7      	b.n	800a1e6 <_strtod_l+0xae>
 800a456:	2b69      	cmp	r3, #105	@ 0x69
 800a458:	d027      	beq.n	800a4aa <_strtod_l+0x372>
 800a45a:	dc23      	bgt.n	800a4a4 <_strtod_l+0x36c>
 800a45c:	2b49      	cmp	r3, #73	@ 0x49
 800a45e:	d024      	beq.n	800a4aa <_strtod_l+0x372>
 800a460:	2b4e      	cmp	r3, #78	@ 0x4e
 800a462:	d000      	beq.n	800a466 <_strtod_l+0x32e>
 800a464:	e6bf      	b.n	800a1e6 <_strtod_l+0xae>
 800a466:	49a5      	ldr	r1, [pc, #660]	@ (800a6fc <_strtod_l+0x5c4>)
 800a468:	a81d      	add	r0, sp, #116	@ 0x74
 800a46a:	f001 fa7f 	bl	800b96c <__match>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d100      	bne.n	800a474 <_strtod_l+0x33c>
 800a472:	e6b8      	b.n	800a1e6 <_strtod_l+0xae>
 800a474:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b28      	cmp	r3, #40	@ 0x28
 800a47a:	d12c      	bne.n	800a4d6 <_strtod_l+0x39e>
 800a47c:	49a0      	ldr	r1, [pc, #640]	@ (800a700 <_strtod_l+0x5c8>)
 800a47e:	aa20      	add	r2, sp, #128	@ 0x80
 800a480:	a81d      	add	r0, sp, #116	@ 0x74
 800a482:	f001 fa87 	bl	800b994 <__hexnan>
 800a486:	2805      	cmp	r0, #5
 800a488:	d125      	bne.n	800a4d6 <_strtod_l+0x39e>
 800a48a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a48c:	4a9d      	ldr	r2, [pc, #628]	@ (800a704 <_strtod_l+0x5cc>)
 800a48e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a490:	431a      	orrs	r2, r3
 800a492:	0017      	movs	r7, r2
 800a494:	e68b      	b.n	800a1ae <_strtod_l+0x76>
 800a496:	220a      	movs	r2, #10
 800a498:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a49a:	434a      	muls	r2, r1
 800a49c:	18d2      	adds	r2, r2, r3
 800a49e:	3a30      	subs	r2, #48	@ 0x30
 800a4a0:	9210      	str	r2, [sp, #64]	@ 0x40
 800a4a2:	e7b5      	b.n	800a410 <_strtod_l+0x2d8>
 800a4a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a4a6:	d0de      	beq.n	800a466 <_strtod_l+0x32e>
 800a4a8:	e69d      	b.n	800a1e6 <_strtod_l+0xae>
 800a4aa:	4997      	ldr	r1, [pc, #604]	@ (800a708 <_strtod_l+0x5d0>)
 800a4ac:	a81d      	add	r0, sp, #116	@ 0x74
 800a4ae:	f001 fa5d 	bl	800b96c <__match>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d100      	bne.n	800a4b8 <_strtod_l+0x380>
 800a4b6:	e696      	b.n	800a1e6 <_strtod_l+0xae>
 800a4b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a4ba:	4994      	ldr	r1, [pc, #592]	@ (800a70c <_strtod_l+0x5d4>)
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	a81d      	add	r0, sp, #116	@ 0x74
 800a4c0:	931d      	str	r3, [sp, #116]	@ 0x74
 800a4c2:	f001 fa53 	bl	800b96c <__match>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d102      	bne.n	800a4d0 <_strtod_l+0x398>
 800a4ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	931d      	str	r3, [sp, #116]	@ 0x74
 800a4d0:	2600      	movs	r6, #0
 800a4d2:	4f8c      	ldr	r7, [pc, #560]	@ (800a704 <_strtod_l+0x5cc>)
 800a4d4:	e66b      	b.n	800a1ae <_strtod_l+0x76>
 800a4d6:	488e      	ldr	r0, [pc, #568]	@ (800a710 <_strtod_l+0x5d8>)
 800a4d8:	f000 ff3c 	bl	800b354 <nan>
 800a4dc:	0006      	movs	r6, r0
 800a4de:	000f      	movs	r7, r1
 800a4e0:	e665      	b.n	800a1ae <_strtod_l+0x76>
 800a4e2:	9b07      	ldr	r3, [sp, #28]
 800a4e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4e6:	1a9b      	subs	r3, r3, r2
 800a4e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4ea:	9b08      	ldr	r3, [sp, #32]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <_strtod_l+0x3bc>
 800a4f0:	9b06      	ldr	r3, [sp, #24]
 800a4f2:	9308      	str	r3, [sp, #32]
 800a4f4:	9c06      	ldr	r4, [sp, #24]
 800a4f6:	2c10      	cmp	r4, #16
 800a4f8:	dd00      	ble.n	800a4fc <_strtod_l+0x3c4>
 800a4fa:	2410      	movs	r4, #16
 800a4fc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a4fe:	f7f8 fc15 	bl	8002d2c <__aeabi_ui2d>
 800a502:	9b06      	ldr	r3, [sp, #24]
 800a504:	0006      	movs	r6, r0
 800a506:	000f      	movs	r7, r1
 800a508:	2b09      	cmp	r3, #9
 800a50a:	dc13      	bgt.n	800a534 <_strtod_l+0x3fc>
 800a50c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d100      	bne.n	800a514 <_strtod_l+0x3dc>
 800a512:	e64c      	b.n	800a1ae <_strtod_l+0x76>
 800a514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a516:	2b00      	cmp	r3, #0
 800a518:	dc00      	bgt.n	800a51c <_strtod_l+0x3e4>
 800a51a:	e07e      	b.n	800a61a <_strtod_l+0x4e2>
 800a51c:	2b16      	cmp	r3, #22
 800a51e:	dc63      	bgt.n	800a5e8 <_strtod_l+0x4b0>
 800a520:	497c      	ldr	r1, [pc, #496]	@ (800a714 <_strtod_l+0x5dc>)
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	18c9      	adds	r1, r1, r3
 800a526:	0032      	movs	r2, r6
 800a528:	6808      	ldr	r0, [r1, #0]
 800a52a:	6849      	ldr	r1, [r1, #4]
 800a52c:	003b      	movs	r3, r7
 800a52e:	f7f7 fd2f 	bl	8001f90 <__aeabi_dmul>
 800a532:	e7d3      	b.n	800a4dc <_strtod_l+0x3a4>
 800a534:	0022      	movs	r2, r4
 800a536:	4b77      	ldr	r3, [pc, #476]	@ (800a714 <_strtod_l+0x5dc>)
 800a538:	3a09      	subs	r2, #9
 800a53a:	00d2      	lsls	r2, r2, #3
 800a53c:	189b      	adds	r3, r3, r2
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f7f7 fd25 	bl	8001f90 <__aeabi_dmul>
 800a546:	0006      	movs	r6, r0
 800a548:	0028      	movs	r0, r5
 800a54a:	000f      	movs	r7, r1
 800a54c:	f7f8 fbee 	bl	8002d2c <__aeabi_ui2d>
 800a550:	000b      	movs	r3, r1
 800a552:	0002      	movs	r2, r0
 800a554:	0039      	movs	r1, r7
 800a556:	0030      	movs	r0, r6
 800a558:	f7f6 fd72 	bl	8001040 <__aeabi_dadd>
 800a55c:	9b06      	ldr	r3, [sp, #24]
 800a55e:	0006      	movs	r6, r0
 800a560:	000f      	movs	r7, r1
 800a562:	2b0f      	cmp	r3, #15
 800a564:	ddd2      	ble.n	800a50c <_strtod_l+0x3d4>
 800a566:	9b06      	ldr	r3, [sp, #24]
 800a568:	1b1c      	subs	r4, r3, r4
 800a56a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a56c:	18e4      	adds	r4, r4, r3
 800a56e:	2c00      	cmp	r4, #0
 800a570:	dc00      	bgt.n	800a574 <_strtod_l+0x43c>
 800a572:	e09b      	b.n	800a6ac <_strtod_l+0x574>
 800a574:	220f      	movs	r2, #15
 800a576:	0023      	movs	r3, r4
 800a578:	4013      	ands	r3, r2
 800a57a:	4214      	tst	r4, r2
 800a57c:	d00a      	beq.n	800a594 <_strtod_l+0x45c>
 800a57e:	4965      	ldr	r1, [pc, #404]	@ (800a714 <_strtod_l+0x5dc>)
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	18c9      	adds	r1, r1, r3
 800a584:	0032      	movs	r2, r6
 800a586:	6808      	ldr	r0, [r1, #0]
 800a588:	6849      	ldr	r1, [r1, #4]
 800a58a:	003b      	movs	r3, r7
 800a58c:	f7f7 fd00 	bl	8001f90 <__aeabi_dmul>
 800a590:	0006      	movs	r6, r0
 800a592:	000f      	movs	r7, r1
 800a594:	230f      	movs	r3, #15
 800a596:	439c      	bics	r4, r3
 800a598:	d073      	beq.n	800a682 <_strtod_l+0x54a>
 800a59a:	3326      	adds	r3, #38	@ 0x26
 800a59c:	33ff      	adds	r3, #255	@ 0xff
 800a59e:	429c      	cmp	r4, r3
 800a5a0:	dd4b      	ble.n	800a63a <_strtod_l+0x502>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	9306      	str	r3, [sp, #24]
 800a5a6:	9307      	str	r3, [sp, #28]
 800a5a8:	930d      	str	r3, [sp, #52]	@ 0x34
 800a5aa:	9308      	str	r3, [sp, #32]
 800a5ac:	2322      	movs	r3, #34	@ 0x22
 800a5ae:	2600      	movs	r6, #0
 800a5b0:	9a05      	ldr	r2, [sp, #20]
 800a5b2:	4f54      	ldr	r7, [pc, #336]	@ (800a704 <_strtod_l+0x5cc>)
 800a5b4:	6013      	str	r3, [r2, #0]
 800a5b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5b8:	42b3      	cmp	r3, r6
 800a5ba:	d100      	bne.n	800a5be <_strtod_l+0x486>
 800a5bc:	e5f7      	b.n	800a1ae <_strtod_l+0x76>
 800a5be:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a5c0:	9805      	ldr	r0, [sp, #20]
 800a5c2:	f001 fba1 	bl	800bd08 <_Bfree>
 800a5c6:	9908      	ldr	r1, [sp, #32]
 800a5c8:	9805      	ldr	r0, [sp, #20]
 800a5ca:	f001 fb9d 	bl	800bd08 <_Bfree>
 800a5ce:	9907      	ldr	r1, [sp, #28]
 800a5d0:	9805      	ldr	r0, [sp, #20]
 800a5d2:	f001 fb99 	bl	800bd08 <_Bfree>
 800a5d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a5d8:	9805      	ldr	r0, [sp, #20]
 800a5da:	f001 fb95 	bl	800bd08 <_Bfree>
 800a5de:	9906      	ldr	r1, [sp, #24]
 800a5e0:	9805      	ldr	r0, [sp, #20]
 800a5e2:	f001 fb91 	bl	800bd08 <_Bfree>
 800a5e6:	e5e2      	b.n	800a1ae <_strtod_l+0x76>
 800a5e8:	2325      	movs	r3, #37	@ 0x25
 800a5ea:	9a06      	ldr	r2, [sp, #24]
 800a5ec:	1a9b      	subs	r3, r3, r2
 800a5ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	dbb8      	blt.n	800a566 <_strtod_l+0x42e>
 800a5f4:	240f      	movs	r4, #15
 800a5f6:	9b06      	ldr	r3, [sp, #24]
 800a5f8:	4d46      	ldr	r5, [pc, #280]	@ (800a714 <_strtod_l+0x5dc>)
 800a5fa:	1ae4      	subs	r4, r4, r3
 800a5fc:	00e1      	lsls	r1, r4, #3
 800a5fe:	1869      	adds	r1, r5, r1
 800a600:	0032      	movs	r2, r6
 800a602:	6808      	ldr	r0, [r1, #0]
 800a604:	6849      	ldr	r1, [r1, #4]
 800a606:	003b      	movs	r3, r7
 800a608:	f7f7 fcc2 	bl	8001f90 <__aeabi_dmul>
 800a60c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a60e:	1b1c      	subs	r4, r3, r4
 800a610:	00e4      	lsls	r4, r4, #3
 800a612:	192d      	adds	r5, r5, r4
 800a614:	682a      	ldr	r2, [r5, #0]
 800a616:	686b      	ldr	r3, [r5, #4]
 800a618:	e789      	b.n	800a52e <_strtod_l+0x3f6>
 800a61a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a61c:	3316      	adds	r3, #22
 800a61e:	dba2      	blt.n	800a566 <_strtod_l+0x42e>
 800a620:	9907      	ldr	r1, [sp, #28]
 800a622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a624:	4b3b      	ldr	r3, [pc, #236]	@ (800a714 <_strtod_l+0x5dc>)
 800a626:	1a52      	subs	r2, r2, r1
 800a628:	00d2      	lsls	r2, r2, #3
 800a62a:	189b      	adds	r3, r3, r2
 800a62c:	0030      	movs	r0, r6
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	0039      	movs	r1, r7
 800a634:	f7f7 f868 	bl	8001708 <__aeabi_ddiv>
 800a638:	e750      	b.n	800a4dc <_strtod_l+0x3a4>
 800a63a:	2300      	movs	r3, #0
 800a63c:	0030      	movs	r0, r6
 800a63e:	0039      	movs	r1, r7
 800a640:	4d35      	ldr	r5, [pc, #212]	@ (800a718 <_strtod_l+0x5e0>)
 800a642:	1124      	asrs	r4, r4, #4
 800a644:	9309      	str	r3, [sp, #36]	@ 0x24
 800a646:	2c01      	cmp	r4, #1
 800a648:	dc1e      	bgt.n	800a688 <_strtod_l+0x550>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <_strtod_l+0x51a>
 800a64e:	0006      	movs	r6, r0
 800a650:	000f      	movs	r7, r1
 800a652:	4b32      	ldr	r3, [pc, #200]	@ (800a71c <_strtod_l+0x5e4>)
 800a654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a656:	18ff      	adds	r7, r7, r3
 800a658:	4b2f      	ldr	r3, [pc, #188]	@ (800a718 <_strtod_l+0x5e0>)
 800a65a:	00d5      	lsls	r5, r2, #3
 800a65c:	195d      	adds	r5, r3, r5
 800a65e:	0032      	movs	r2, r6
 800a660:	6828      	ldr	r0, [r5, #0]
 800a662:	6869      	ldr	r1, [r5, #4]
 800a664:	003b      	movs	r3, r7
 800a666:	f7f7 fc93 	bl	8001f90 <__aeabi_dmul>
 800a66a:	4b26      	ldr	r3, [pc, #152]	@ (800a704 <_strtod_l+0x5cc>)
 800a66c:	4a2c      	ldr	r2, [pc, #176]	@ (800a720 <_strtod_l+0x5e8>)
 800a66e:	0006      	movs	r6, r0
 800a670:	400b      	ands	r3, r1
 800a672:	4293      	cmp	r3, r2
 800a674:	d895      	bhi.n	800a5a2 <_strtod_l+0x46a>
 800a676:	4a2b      	ldr	r2, [pc, #172]	@ (800a724 <_strtod_l+0x5ec>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d913      	bls.n	800a6a4 <_strtod_l+0x56c>
 800a67c:	2601      	movs	r6, #1
 800a67e:	4f2a      	ldr	r7, [pc, #168]	@ (800a728 <_strtod_l+0x5f0>)
 800a680:	4276      	negs	r6, r6
 800a682:	2300      	movs	r3, #0
 800a684:	9309      	str	r3, [sp, #36]	@ 0x24
 800a686:	e086      	b.n	800a796 <_strtod_l+0x65e>
 800a688:	2201      	movs	r2, #1
 800a68a:	4214      	tst	r4, r2
 800a68c:	d004      	beq.n	800a698 <_strtod_l+0x560>
 800a68e:	682a      	ldr	r2, [r5, #0]
 800a690:	686b      	ldr	r3, [r5, #4]
 800a692:	f7f7 fc7d 	bl	8001f90 <__aeabi_dmul>
 800a696:	2301      	movs	r3, #1
 800a698:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a69a:	1064      	asrs	r4, r4, #1
 800a69c:	3201      	adds	r2, #1
 800a69e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6a0:	3508      	adds	r5, #8
 800a6a2:	e7d0      	b.n	800a646 <_strtod_l+0x50e>
 800a6a4:	23d4      	movs	r3, #212	@ 0xd4
 800a6a6:	049b      	lsls	r3, r3, #18
 800a6a8:	18cf      	adds	r7, r1, r3
 800a6aa:	e7ea      	b.n	800a682 <_strtod_l+0x54a>
 800a6ac:	2c00      	cmp	r4, #0
 800a6ae:	d0e8      	beq.n	800a682 <_strtod_l+0x54a>
 800a6b0:	4264      	negs	r4, r4
 800a6b2:	230f      	movs	r3, #15
 800a6b4:	0022      	movs	r2, r4
 800a6b6:	401a      	ands	r2, r3
 800a6b8:	421c      	tst	r4, r3
 800a6ba:	d00a      	beq.n	800a6d2 <_strtod_l+0x59a>
 800a6bc:	4b15      	ldr	r3, [pc, #84]	@ (800a714 <_strtod_l+0x5dc>)
 800a6be:	00d2      	lsls	r2, r2, #3
 800a6c0:	189b      	adds	r3, r3, r2
 800a6c2:	0030      	movs	r0, r6
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	0039      	movs	r1, r7
 800a6ca:	f7f7 f81d 	bl	8001708 <__aeabi_ddiv>
 800a6ce:	0006      	movs	r6, r0
 800a6d0:	000f      	movs	r7, r1
 800a6d2:	1124      	asrs	r4, r4, #4
 800a6d4:	d0d5      	beq.n	800a682 <_strtod_l+0x54a>
 800a6d6:	2c1f      	cmp	r4, #31
 800a6d8:	dd28      	ble.n	800a72c <_strtod_l+0x5f4>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9306      	str	r3, [sp, #24]
 800a6de:	9307      	str	r3, [sp, #28]
 800a6e0:	930d      	str	r3, [sp, #52]	@ 0x34
 800a6e2:	9308      	str	r3, [sp, #32]
 800a6e4:	2322      	movs	r3, #34	@ 0x22
 800a6e6:	9a05      	ldr	r2, [sp, #20]
 800a6e8:	2600      	movs	r6, #0
 800a6ea:	6013      	str	r3, [r2, #0]
 800a6ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6ee:	2700      	movs	r7, #0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d000      	beq.n	800a6f6 <_strtod_l+0x5be>
 800a6f4:	e763      	b.n	800a5be <_strtod_l+0x486>
 800a6f6:	e55a      	b.n	800a1ae <_strtod_l+0x76>
 800a6f8:	00004e1f 	.word	0x00004e1f
 800a6fc:	0800d72f 	.word	0x0800d72f
 800a700:	0800d734 	.word	0x0800d734
 800a704:	7ff00000 	.word	0x7ff00000
 800a708:	0800d726 	.word	0x0800d726
 800a70c:	0800d729 	.word	0x0800d729
 800a710:	0800d93d 	.word	0x0800d93d
 800a714:	0800da40 	.word	0x0800da40
 800a718:	0800da18 	.word	0x0800da18
 800a71c:	fcb00000 	.word	0xfcb00000
 800a720:	7ca00000 	.word	0x7ca00000
 800a724:	7c900000 	.word	0x7c900000
 800a728:	7fefffff 	.word	0x7fefffff
 800a72c:	2310      	movs	r3, #16
 800a72e:	0022      	movs	r2, r4
 800a730:	401a      	ands	r2, r3
 800a732:	9209      	str	r2, [sp, #36]	@ 0x24
 800a734:	421c      	tst	r4, r3
 800a736:	d001      	beq.n	800a73c <_strtod_l+0x604>
 800a738:	335a      	adds	r3, #90	@ 0x5a
 800a73a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a73c:	0030      	movs	r0, r6
 800a73e:	0039      	movs	r1, r7
 800a740:	2300      	movs	r3, #0
 800a742:	4dbf      	ldr	r5, [pc, #764]	@ (800aa40 <_strtod_l+0x908>)
 800a744:	2201      	movs	r2, #1
 800a746:	4214      	tst	r4, r2
 800a748:	d004      	beq.n	800a754 <_strtod_l+0x61c>
 800a74a:	682a      	ldr	r2, [r5, #0]
 800a74c:	686b      	ldr	r3, [r5, #4]
 800a74e:	f7f7 fc1f 	bl	8001f90 <__aeabi_dmul>
 800a752:	2301      	movs	r3, #1
 800a754:	1064      	asrs	r4, r4, #1
 800a756:	3508      	adds	r5, #8
 800a758:	2c00      	cmp	r4, #0
 800a75a:	d1f3      	bne.n	800a744 <_strtod_l+0x60c>
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <_strtod_l+0x62c>
 800a760:	0006      	movs	r6, r0
 800a762:	000f      	movs	r7, r1
 800a764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00d      	beq.n	800a786 <_strtod_l+0x64e>
 800a76a:	236b      	movs	r3, #107	@ 0x6b
 800a76c:	007a      	lsls	r2, r7, #1
 800a76e:	0d52      	lsrs	r2, r2, #21
 800a770:	0039      	movs	r1, r7
 800a772:	1a9b      	subs	r3, r3, r2
 800a774:	2b00      	cmp	r3, #0
 800a776:	dd06      	ble.n	800a786 <_strtod_l+0x64e>
 800a778:	2b1f      	cmp	r3, #31
 800a77a:	dd5a      	ble.n	800a832 <_strtod_l+0x6fa>
 800a77c:	2600      	movs	r6, #0
 800a77e:	2b34      	cmp	r3, #52	@ 0x34
 800a780:	dd50      	ble.n	800a824 <_strtod_l+0x6ec>
 800a782:	27dc      	movs	r7, #220	@ 0xdc
 800a784:	04bf      	lsls	r7, r7, #18
 800a786:	2200      	movs	r2, #0
 800a788:	2300      	movs	r3, #0
 800a78a:	0030      	movs	r0, r6
 800a78c:	0039      	movs	r1, r7
 800a78e:	f7f5 fe67 	bl	8000460 <__aeabi_dcmpeq>
 800a792:	2800      	cmp	r0, #0
 800a794:	d1a1      	bne.n	800a6da <_strtod_l+0x5a2>
 800a796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a798:	9a08      	ldr	r2, [sp, #32]
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a79e:	9b06      	ldr	r3, [sp, #24]
 800a7a0:	9805      	ldr	r0, [sp, #20]
 800a7a2:	f001 fb19 	bl	800bdd8 <__s2b>
 800a7a6:	900d      	str	r0, [sp, #52]	@ 0x34
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d100      	bne.n	800a7ae <_strtod_l+0x676>
 800a7ac:	e6f9      	b.n	800a5a2 <_strtod_l+0x46a>
 800a7ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7b0:	9907      	ldr	r1, [sp, #28]
 800a7b2:	17da      	asrs	r2, r3, #31
 800a7b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7b6:	1a5b      	subs	r3, r3, r1
 800a7b8:	401a      	ands	r2, r3
 800a7ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7bc:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a7be:	43db      	mvns	r3, r3
 800a7c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a7c2:	17db      	asrs	r3, r3, #31
 800a7c4:	401a      	ands	r2, r3
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	921a      	str	r2, [sp, #104]	@ 0x68
 800a7ca:	9306      	str	r3, [sp, #24]
 800a7cc:	9307      	str	r3, [sp, #28]
 800a7ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7d0:	9805      	ldr	r0, [sp, #20]
 800a7d2:	6859      	ldr	r1, [r3, #4]
 800a7d4:	f001 fa54 	bl	800bc80 <_Balloc>
 800a7d8:	9008      	str	r0, [sp, #32]
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d100      	bne.n	800a7e0 <_strtod_l+0x6a8>
 800a7de:	e6e5      	b.n	800a5ac <_strtod_l+0x474>
 800a7e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7e2:	300c      	adds	r0, #12
 800a7e4:	0019      	movs	r1, r3
 800a7e6:	691a      	ldr	r2, [r3, #16]
 800a7e8:	310c      	adds	r1, #12
 800a7ea:	3202      	adds	r2, #2
 800a7ec:	0092      	lsls	r2, r2, #2
 800a7ee:	f000 fda8 	bl	800b342 <memcpy>
 800a7f2:	ab20      	add	r3, sp, #128	@ 0x80
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	0032      	movs	r2, r6
 800a7fc:	003b      	movs	r3, r7
 800a7fe:	9805      	ldr	r0, [sp, #20]
 800a800:	9610      	str	r6, [sp, #64]	@ 0x40
 800a802:	9711      	str	r7, [sp, #68]	@ 0x44
 800a804:	f001 fe38 	bl	800c478 <__d2b>
 800a808:	901e      	str	r0, [sp, #120]	@ 0x78
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d100      	bne.n	800a810 <_strtod_l+0x6d8>
 800a80e:	e6cd      	b.n	800a5ac <_strtod_l+0x474>
 800a810:	2101      	movs	r1, #1
 800a812:	9805      	ldr	r0, [sp, #20]
 800a814:	f001 fb7c 	bl	800bf10 <__i2b>
 800a818:	9007      	str	r0, [sp, #28]
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d10e      	bne.n	800a83c <_strtod_l+0x704>
 800a81e:	2300      	movs	r3, #0
 800a820:	9307      	str	r3, [sp, #28]
 800a822:	e6c3      	b.n	800a5ac <_strtod_l+0x474>
 800a824:	234b      	movs	r3, #75	@ 0x4b
 800a826:	1a9a      	subs	r2, r3, r2
 800a828:	3b4c      	subs	r3, #76	@ 0x4c
 800a82a:	4093      	lsls	r3, r2
 800a82c:	4019      	ands	r1, r3
 800a82e:	000f      	movs	r7, r1
 800a830:	e7a9      	b.n	800a786 <_strtod_l+0x64e>
 800a832:	2201      	movs	r2, #1
 800a834:	4252      	negs	r2, r2
 800a836:	409a      	lsls	r2, r3
 800a838:	4016      	ands	r6, r2
 800a83a:	e7a4      	b.n	800a786 <_strtod_l+0x64e>
 800a83c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a83e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a840:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800a842:	1ad4      	subs	r4, r2, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	db01      	blt.n	800a84c <_strtod_l+0x714>
 800a848:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800a84a:	195d      	adds	r5, r3, r5
 800a84c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a84e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a850:	1a5b      	subs	r3, r3, r1
 800a852:	2136      	movs	r1, #54	@ 0x36
 800a854:	189b      	adds	r3, r3, r2
 800a856:	1a8a      	subs	r2, r1, r2
 800a858:	497a      	ldr	r1, [pc, #488]	@ (800aa44 <_strtod_l+0x90c>)
 800a85a:	2001      	movs	r0, #1
 800a85c:	468c      	mov	ip, r1
 800a85e:	2100      	movs	r1, #0
 800a860:	3b01      	subs	r3, #1
 800a862:	9116      	str	r1, [sp, #88]	@ 0x58
 800a864:	9014      	str	r0, [sp, #80]	@ 0x50
 800a866:	4563      	cmp	r3, ip
 800a868:	da06      	bge.n	800a878 <_strtod_l+0x740>
 800a86a:	4661      	mov	r1, ip
 800a86c:	1ac9      	subs	r1, r1, r3
 800a86e:	1a52      	subs	r2, r2, r1
 800a870:	291f      	cmp	r1, #31
 800a872:	dc3f      	bgt.n	800a8f4 <_strtod_l+0x7bc>
 800a874:	4088      	lsls	r0, r1
 800a876:	9014      	str	r0, [sp, #80]	@ 0x50
 800a878:	18ab      	adds	r3, r5, r2
 800a87a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a87c:	18a4      	adds	r4, r4, r2
 800a87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a880:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a882:	191c      	adds	r4, r3, r4
 800a884:	002b      	movs	r3, r5
 800a886:	4295      	cmp	r5, r2
 800a888:	dd00      	ble.n	800a88c <_strtod_l+0x754>
 800a88a:	0013      	movs	r3, r2
 800a88c:	42a3      	cmp	r3, r4
 800a88e:	dd00      	ble.n	800a892 <_strtod_l+0x75a>
 800a890:	0023      	movs	r3, r4
 800a892:	2b00      	cmp	r3, #0
 800a894:	dd04      	ble.n	800a8a0 <_strtod_l+0x768>
 800a896:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a898:	1ae4      	subs	r4, r4, r3
 800a89a:	1ad2      	subs	r2, r2, r3
 800a89c:	920e      	str	r2, [sp, #56]	@ 0x38
 800a89e:	1aed      	subs	r5, r5, r3
 800a8a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	dd16      	ble.n	800a8d4 <_strtod_l+0x79c>
 800a8a6:	001a      	movs	r2, r3
 800a8a8:	9907      	ldr	r1, [sp, #28]
 800a8aa:	9805      	ldr	r0, [sp, #20]
 800a8ac:	f001 fbfa 	bl	800c0a4 <__pow5mult>
 800a8b0:	9007      	str	r0, [sp, #28]
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d0b3      	beq.n	800a81e <_strtod_l+0x6e6>
 800a8b6:	0001      	movs	r1, r0
 800a8b8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a8ba:	9805      	ldr	r0, [sp, #20]
 800a8bc:	f001 fb40 	bl	800bf40 <__multiply>
 800a8c0:	9013      	str	r0, [sp, #76]	@ 0x4c
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d100      	bne.n	800a8c8 <_strtod_l+0x790>
 800a8c6:	e671      	b.n	800a5ac <_strtod_l+0x474>
 800a8c8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a8ca:	9805      	ldr	r0, [sp, #20]
 800a8cc:	f001 fa1c 	bl	800bd08 <_Bfree>
 800a8d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8d2:	931e      	str	r3, [sp, #120]	@ 0x78
 800a8d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	dc12      	bgt.n	800a900 <_strtod_l+0x7c8>
 800a8da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	dd18      	ble.n	800a912 <_strtod_l+0x7da>
 800a8e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8e2:	9908      	ldr	r1, [sp, #32]
 800a8e4:	9805      	ldr	r0, [sp, #20]
 800a8e6:	f001 fbdd 	bl	800c0a4 <__pow5mult>
 800a8ea:	9008      	str	r0, [sp, #32]
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d110      	bne.n	800a912 <_strtod_l+0x7da>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	e65a      	b.n	800a5aa <_strtod_l+0x472>
 800a8f4:	4954      	ldr	r1, [pc, #336]	@ (800aa48 <_strtod_l+0x910>)
 800a8f6:	1acb      	subs	r3, r1, r3
 800a8f8:	0001      	movs	r1, r0
 800a8fa:	4099      	lsls	r1, r3
 800a8fc:	9116      	str	r1, [sp, #88]	@ 0x58
 800a8fe:	e7ba      	b.n	800a876 <_strtod_l+0x73e>
 800a900:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a902:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a904:	9805      	ldr	r0, [sp, #20]
 800a906:	f001 fc29 	bl	800c15c <__lshift>
 800a90a:	901e      	str	r0, [sp, #120]	@ 0x78
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d1e4      	bne.n	800a8da <_strtod_l+0x7a2>
 800a910:	e64c      	b.n	800a5ac <_strtod_l+0x474>
 800a912:	2c00      	cmp	r4, #0
 800a914:	dd07      	ble.n	800a926 <_strtod_l+0x7ee>
 800a916:	0022      	movs	r2, r4
 800a918:	9908      	ldr	r1, [sp, #32]
 800a91a:	9805      	ldr	r0, [sp, #20]
 800a91c:	f001 fc1e 	bl	800c15c <__lshift>
 800a920:	9008      	str	r0, [sp, #32]
 800a922:	2800      	cmp	r0, #0
 800a924:	d0e4      	beq.n	800a8f0 <_strtod_l+0x7b8>
 800a926:	2d00      	cmp	r5, #0
 800a928:	dd08      	ble.n	800a93c <_strtod_l+0x804>
 800a92a:	002a      	movs	r2, r5
 800a92c:	9907      	ldr	r1, [sp, #28]
 800a92e:	9805      	ldr	r0, [sp, #20]
 800a930:	f001 fc14 	bl	800c15c <__lshift>
 800a934:	9007      	str	r0, [sp, #28]
 800a936:	2800      	cmp	r0, #0
 800a938:	d100      	bne.n	800a93c <_strtod_l+0x804>
 800a93a:	e637      	b.n	800a5ac <_strtod_l+0x474>
 800a93c:	9a08      	ldr	r2, [sp, #32]
 800a93e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a940:	9805      	ldr	r0, [sp, #20]
 800a942:	f001 fc93 	bl	800c26c <__mdiff>
 800a946:	9006      	str	r0, [sp, #24]
 800a948:	2800      	cmp	r0, #0
 800a94a:	d100      	bne.n	800a94e <_strtod_l+0x816>
 800a94c:	e62e      	b.n	800a5ac <_strtod_l+0x474>
 800a94e:	68c3      	ldr	r3, [r0, #12]
 800a950:	9907      	ldr	r1, [sp, #28]
 800a952:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a954:	2300      	movs	r3, #0
 800a956:	60c3      	str	r3, [r0, #12]
 800a958:	f001 fc6c 	bl	800c234 <__mcmp>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	da3b      	bge.n	800a9d8 <_strtod_l+0x8a0>
 800a960:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a962:	4333      	orrs	r3, r6
 800a964:	d167      	bne.n	800aa36 <_strtod_l+0x8fe>
 800a966:	033b      	lsls	r3, r7, #12
 800a968:	d165      	bne.n	800aa36 <_strtod_l+0x8fe>
 800a96a:	22d6      	movs	r2, #214	@ 0xd6
 800a96c:	4b37      	ldr	r3, [pc, #220]	@ (800aa4c <_strtod_l+0x914>)
 800a96e:	04d2      	lsls	r2, r2, #19
 800a970:	403b      	ands	r3, r7
 800a972:	4293      	cmp	r3, r2
 800a974:	d95f      	bls.n	800aa36 <_strtod_l+0x8fe>
 800a976:	9b06      	ldr	r3, [sp, #24]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d103      	bne.n	800a986 <_strtod_l+0x84e>
 800a97e:	9b06      	ldr	r3, [sp, #24]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	2b01      	cmp	r3, #1
 800a984:	dd57      	ble.n	800aa36 <_strtod_l+0x8fe>
 800a986:	9906      	ldr	r1, [sp, #24]
 800a988:	2201      	movs	r2, #1
 800a98a:	9805      	ldr	r0, [sp, #20]
 800a98c:	f001 fbe6 	bl	800c15c <__lshift>
 800a990:	9907      	ldr	r1, [sp, #28]
 800a992:	9006      	str	r0, [sp, #24]
 800a994:	f001 fc4e 	bl	800c234 <__mcmp>
 800a998:	2800      	cmp	r0, #0
 800a99a:	dd4c      	ble.n	800aa36 <_strtod_l+0x8fe>
 800a99c:	4b2b      	ldr	r3, [pc, #172]	@ (800aa4c <_strtod_l+0x914>)
 800a99e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9a0:	403b      	ands	r3, r7
 800a9a2:	2a00      	cmp	r2, #0
 800a9a4:	d074      	beq.n	800aa90 <_strtod_l+0x958>
 800a9a6:	22d6      	movs	r2, #214	@ 0xd6
 800a9a8:	04d2      	lsls	r2, r2, #19
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d870      	bhi.n	800aa90 <_strtod_l+0x958>
 800a9ae:	22dc      	movs	r2, #220	@ 0xdc
 800a9b0:	0492      	lsls	r2, r2, #18
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d800      	bhi.n	800a9b8 <_strtod_l+0x880>
 800a9b6:	e695      	b.n	800a6e4 <_strtod_l+0x5ac>
 800a9b8:	0030      	movs	r0, r6
 800a9ba:	0039      	movs	r1, r7
 800a9bc:	4b24      	ldr	r3, [pc, #144]	@ (800aa50 <_strtod_l+0x918>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f7f7 fae6 	bl	8001f90 <__aeabi_dmul>
 800a9c4:	4b21      	ldr	r3, [pc, #132]	@ (800aa4c <_strtod_l+0x914>)
 800a9c6:	0006      	movs	r6, r0
 800a9c8:	000f      	movs	r7, r1
 800a9ca:	420b      	tst	r3, r1
 800a9cc:	d000      	beq.n	800a9d0 <_strtod_l+0x898>
 800a9ce:	e5f6      	b.n	800a5be <_strtod_l+0x486>
 800a9d0:	2322      	movs	r3, #34	@ 0x22
 800a9d2:	9a05      	ldr	r2, [sp, #20]
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	e5f2      	b.n	800a5be <_strtod_l+0x486>
 800a9d8:	970e      	str	r7, [sp, #56]	@ 0x38
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d175      	bne.n	800aaca <_strtod_l+0x992>
 800a9de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9e0:	033b      	lsls	r3, r7, #12
 800a9e2:	0b1b      	lsrs	r3, r3, #12
 800a9e4:	2a00      	cmp	r2, #0
 800a9e6:	d039      	beq.n	800aa5c <_strtod_l+0x924>
 800a9e8:	4a1a      	ldr	r2, [pc, #104]	@ (800aa54 <_strtod_l+0x91c>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d138      	bne.n	800aa60 <_strtod_l+0x928>
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f2:	4249      	negs	r1, r1
 800a9f4:	0032      	movs	r2, r6
 800a9f6:	0008      	movs	r0, r1
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00b      	beq.n	800aa14 <_strtod_l+0x8dc>
 800a9fc:	24d4      	movs	r4, #212	@ 0xd4
 800a9fe:	4b13      	ldr	r3, [pc, #76]	@ (800aa4c <_strtod_l+0x914>)
 800aa00:	0008      	movs	r0, r1
 800aa02:	403b      	ands	r3, r7
 800aa04:	04e4      	lsls	r4, r4, #19
 800aa06:	42a3      	cmp	r3, r4
 800aa08:	d804      	bhi.n	800aa14 <_strtod_l+0x8dc>
 800aa0a:	306c      	adds	r0, #108	@ 0x6c
 800aa0c:	0d1b      	lsrs	r3, r3, #20
 800aa0e:	1ac3      	subs	r3, r0, r3
 800aa10:	4099      	lsls	r1, r3
 800aa12:	0008      	movs	r0, r1
 800aa14:	4282      	cmp	r2, r0
 800aa16:	d123      	bne.n	800aa60 <_strtod_l+0x928>
 800aa18:	4b0f      	ldr	r3, [pc, #60]	@ (800aa58 <_strtod_l+0x920>)
 800aa1a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aa1c:	4299      	cmp	r1, r3
 800aa1e:	d102      	bne.n	800aa26 <_strtod_l+0x8ee>
 800aa20:	3201      	adds	r2, #1
 800aa22:	d100      	bne.n	800aa26 <_strtod_l+0x8ee>
 800aa24:	e5c2      	b.n	800a5ac <_strtod_l+0x474>
 800aa26:	4b09      	ldr	r3, [pc, #36]	@ (800aa4c <_strtod_l+0x914>)
 800aa28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa2a:	2600      	movs	r6, #0
 800aa2c:	401a      	ands	r2, r3
 800aa2e:	0013      	movs	r3, r2
 800aa30:	2280      	movs	r2, #128	@ 0x80
 800aa32:	0352      	lsls	r2, r2, #13
 800aa34:	189f      	adds	r7, r3, r2
 800aa36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1bd      	bne.n	800a9b8 <_strtod_l+0x880>
 800aa3c:	e5bf      	b.n	800a5be <_strtod_l+0x486>
 800aa3e:	46c0      	nop			@ (mov r8, r8)
 800aa40:	0800d760 	.word	0x0800d760
 800aa44:	fffffc02 	.word	0xfffffc02
 800aa48:	fffffbe2 	.word	0xfffffbe2
 800aa4c:	7ff00000 	.word	0x7ff00000
 800aa50:	39500000 	.word	0x39500000
 800aa54:	000fffff 	.word	0x000fffff
 800aa58:	7fefffff 	.word	0x7fefffff
 800aa5c:	4333      	orrs	r3, r6
 800aa5e:	d09d      	beq.n	800a99c <_strtod_l+0x864>
 800aa60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d01c      	beq.n	800aaa0 <_strtod_l+0x968>
 800aa66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa68:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa6a:	4213      	tst	r3, r2
 800aa6c:	d0e3      	beq.n	800aa36 <_strtod_l+0x8fe>
 800aa6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa70:	0030      	movs	r0, r6
 800aa72:	0039      	movs	r1, r7
 800aa74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d016      	beq.n	800aaa8 <_strtod_l+0x970>
 800aa7a:	f7ff fb45 	bl	800a108 <sulp>
 800aa7e:	0002      	movs	r2, r0
 800aa80:	000b      	movs	r3, r1
 800aa82:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aa84:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800aa86:	f7f6 fadb 	bl	8001040 <__aeabi_dadd>
 800aa8a:	0006      	movs	r6, r0
 800aa8c:	000f      	movs	r7, r1
 800aa8e:	e7d2      	b.n	800aa36 <_strtod_l+0x8fe>
 800aa90:	2601      	movs	r6, #1
 800aa92:	4a92      	ldr	r2, [pc, #584]	@ (800acdc <_strtod_l+0xba4>)
 800aa94:	4276      	negs	r6, r6
 800aa96:	189b      	adds	r3, r3, r2
 800aa98:	4a91      	ldr	r2, [pc, #580]	@ (800ace0 <_strtod_l+0xba8>)
 800aa9a:	431a      	orrs	r2, r3
 800aa9c:	0017      	movs	r7, r2
 800aa9e:	e7ca      	b.n	800aa36 <_strtod_l+0x8fe>
 800aaa0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aaa2:	4233      	tst	r3, r6
 800aaa4:	d0c7      	beq.n	800aa36 <_strtod_l+0x8fe>
 800aaa6:	e7e2      	b.n	800aa6e <_strtod_l+0x936>
 800aaa8:	f7ff fb2e 	bl	800a108 <sulp>
 800aaac:	0002      	movs	r2, r0
 800aaae:	000b      	movs	r3, r1
 800aab0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aab2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800aab4:	f7f7 fd34 	bl	8002520 <__aeabi_dsub>
 800aab8:	2200      	movs	r2, #0
 800aaba:	2300      	movs	r3, #0
 800aabc:	0006      	movs	r6, r0
 800aabe:	000f      	movs	r7, r1
 800aac0:	f7f5 fcce 	bl	8000460 <__aeabi_dcmpeq>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d0b6      	beq.n	800aa36 <_strtod_l+0x8fe>
 800aac8:	e60c      	b.n	800a6e4 <_strtod_l+0x5ac>
 800aaca:	9907      	ldr	r1, [sp, #28]
 800aacc:	9806      	ldr	r0, [sp, #24]
 800aace:	f001 fd33 	bl	800c538 <__ratio>
 800aad2:	2380      	movs	r3, #128	@ 0x80
 800aad4:	2200      	movs	r2, #0
 800aad6:	05db      	lsls	r3, r3, #23
 800aad8:	0004      	movs	r4, r0
 800aada:	000d      	movs	r5, r1
 800aadc:	f7f5 fcd0 	bl	8000480 <__aeabi_dcmple>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d06c      	beq.n	800abbe <_strtod_l+0xa86>
 800aae4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d177      	bne.n	800abda <_strtod_l+0xaa2>
 800aaea:	2e00      	cmp	r6, #0
 800aaec:	d157      	bne.n	800ab9e <_strtod_l+0xa66>
 800aaee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaf0:	031b      	lsls	r3, r3, #12
 800aaf2:	d15a      	bne.n	800abaa <_strtod_l+0xa72>
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	0020      	movs	r0, r4
 800aaf8:	0029      	movs	r1, r5
 800aafa:	4b7a      	ldr	r3, [pc, #488]	@ (800ace4 <_strtod_l+0xbac>)
 800aafc:	f7f5 fcb6 	bl	800046c <__aeabi_dcmplt>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d159      	bne.n	800abb8 <_strtod_l+0xa80>
 800ab04:	0020      	movs	r0, r4
 800ab06:	0029      	movs	r1, r5
 800ab08:	2200      	movs	r2, #0
 800ab0a:	4b77      	ldr	r3, [pc, #476]	@ (800ace8 <_strtod_l+0xbb0>)
 800ab0c:	f7f7 fa40 	bl	8001f90 <__aeabi_dmul>
 800ab10:	0004      	movs	r4, r0
 800ab12:	000d      	movs	r5, r1
 800ab14:	2380      	movs	r3, #128	@ 0x80
 800ab16:	061b      	lsls	r3, r3, #24
 800ab18:	18eb      	adds	r3, r5, r3
 800ab1a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ab1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab22:	9214      	str	r2, [sp, #80]	@ 0x50
 800ab24:	9315      	str	r3, [sp, #84]	@ 0x54
 800ab26:	4a71      	ldr	r2, [pc, #452]	@ (800acec <_strtod_l+0xbb4>)
 800ab28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	9316      	str	r3, [sp, #88]	@ 0x58
 800ab2e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ab30:	4b6f      	ldr	r3, [pc, #444]	@ (800acf0 <_strtod_l+0xbb8>)
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d000      	beq.n	800ab38 <_strtod_l+0xa00>
 800ab36:	e087      	b.n	800ac48 <_strtod_l+0xb10>
 800ab38:	4a6e      	ldr	r2, [pc, #440]	@ (800acf4 <_strtod_l+0xbbc>)
 800ab3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab3c:	4694      	mov	ip, r2
 800ab3e:	4463      	add	r3, ip
 800ab40:	001f      	movs	r7, r3
 800ab42:	0030      	movs	r0, r6
 800ab44:	0019      	movs	r1, r3
 800ab46:	f001 fc2b 	bl	800c3a0 <__ulp>
 800ab4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab4e:	f7f7 fa1f 	bl	8001f90 <__aeabi_dmul>
 800ab52:	0032      	movs	r2, r6
 800ab54:	003b      	movs	r3, r7
 800ab56:	f7f6 fa73 	bl	8001040 <__aeabi_dadd>
 800ab5a:	4a64      	ldr	r2, [pc, #400]	@ (800acec <_strtod_l+0xbb4>)
 800ab5c:	4b66      	ldr	r3, [pc, #408]	@ (800acf8 <_strtod_l+0xbc0>)
 800ab5e:	0006      	movs	r6, r0
 800ab60:	400a      	ands	r2, r1
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d940      	bls.n	800abe8 <_strtod_l+0xab0>
 800ab66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab68:	4a64      	ldr	r2, [pc, #400]	@ (800acfc <_strtod_l+0xbc4>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d103      	bne.n	800ab76 <_strtod_l+0xa3e>
 800ab6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab70:	3301      	adds	r3, #1
 800ab72:	d100      	bne.n	800ab76 <_strtod_l+0xa3e>
 800ab74:	e51a      	b.n	800a5ac <_strtod_l+0x474>
 800ab76:	2601      	movs	r6, #1
 800ab78:	4f60      	ldr	r7, [pc, #384]	@ (800acfc <_strtod_l+0xbc4>)
 800ab7a:	4276      	negs	r6, r6
 800ab7c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ab7e:	9805      	ldr	r0, [sp, #20]
 800ab80:	f001 f8c2 	bl	800bd08 <_Bfree>
 800ab84:	9908      	ldr	r1, [sp, #32]
 800ab86:	9805      	ldr	r0, [sp, #20]
 800ab88:	f001 f8be 	bl	800bd08 <_Bfree>
 800ab8c:	9907      	ldr	r1, [sp, #28]
 800ab8e:	9805      	ldr	r0, [sp, #20]
 800ab90:	f001 f8ba 	bl	800bd08 <_Bfree>
 800ab94:	9906      	ldr	r1, [sp, #24]
 800ab96:	9805      	ldr	r0, [sp, #20]
 800ab98:	f001 f8b6 	bl	800bd08 <_Bfree>
 800ab9c:	e617      	b.n	800a7ce <_strtod_l+0x696>
 800ab9e:	2e01      	cmp	r6, #1
 800aba0:	d103      	bne.n	800abaa <_strtod_l+0xa72>
 800aba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d100      	bne.n	800abaa <_strtod_l+0xa72>
 800aba8:	e59c      	b.n	800a6e4 <_strtod_l+0x5ac>
 800abaa:	2300      	movs	r3, #0
 800abac:	4c54      	ldr	r4, [pc, #336]	@ (800ad00 <_strtod_l+0xbc8>)
 800abae:	4d4d      	ldr	r5, [pc, #308]	@ (800ace4 <_strtod_l+0xbac>)
 800abb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800abb2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abb4:	2400      	movs	r4, #0
 800abb6:	e7b2      	b.n	800ab1e <_strtod_l+0x9e6>
 800abb8:	2400      	movs	r4, #0
 800abba:	4d4b      	ldr	r5, [pc, #300]	@ (800ace8 <_strtod_l+0xbb0>)
 800abbc:	e7aa      	b.n	800ab14 <_strtod_l+0x9dc>
 800abbe:	0020      	movs	r0, r4
 800abc0:	0029      	movs	r1, r5
 800abc2:	4b49      	ldr	r3, [pc, #292]	@ (800ace8 <_strtod_l+0xbb0>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	f7f7 f9e3 	bl	8001f90 <__aeabi_dmul>
 800abca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abcc:	0004      	movs	r4, r0
 800abce:	000d      	movs	r5, r1
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d09f      	beq.n	800ab14 <_strtod_l+0x9dc>
 800abd4:	940a      	str	r4, [sp, #40]	@ 0x28
 800abd6:	950b      	str	r5, [sp, #44]	@ 0x2c
 800abd8:	e7a1      	b.n	800ab1e <_strtod_l+0x9e6>
 800abda:	2300      	movs	r3, #0
 800abdc:	4c41      	ldr	r4, [pc, #260]	@ (800ace4 <_strtod_l+0xbac>)
 800abde:	0025      	movs	r5, r4
 800abe0:	930a      	str	r3, [sp, #40]	@ 0x28
 800abe2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abe4:	001c      	movs	r4, r3
 800abe6:	e79a      	b.n	800ab1e <_strtod_l+0x9e6>
 800abe8:	23d4      	movs	r3, #212	@ 0xd4
 800abea:	049b      	lsls	r3, r3, #18
 800abec:	18cf      	adds	r7, r1, r3
 800abee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abf0:	9710      	str	r7, [sp, #64]	@ 0x40
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1c2      	bne.n	800ab7c <_strtod_l+0xa44>
 800abf6:	4b3d      	ldr	r3, [pc, #244]	@ (800acec <_strtod_l+0xbb4>)
 800abf8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800abfa:	403b      	ands	r3, r7
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d1bd      	bne.n	800ab7c <_strtod_l+0xa44>
 800ac00:	0020      	movs	r0, r4
 800ac02:	0029      	movs	r1, r5
 800ac04:	f7f5 fcb2 	bl	800056c <__aeabi_d2lz>
 800ac08:	f7f5 fcea 	bl	80005e0 <__aeabi_l2d>
 800ac0c:	0002      	movs	r2, r0
 800ac0e:	000b      	movs	r3, r1
 800ac10:	0020      	movs	r0, r4
 800ac12:	0029      	movs	r1, r5
 800ac14:	f7f7 fc84 	bl	8002520 <__aeabi_dsub>
 800ac18:	033c      	lsls	r4, r7, #12
 800ac1a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac1c:	0b24      	lsrs	r4, r4, #12
 800ac1e:	4334      	orrs	r4, r6
 800ac20:	900e      	str	r0, [sp, #56]	@ 0x38
 800ac22:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ac24:	4a37      	ldr	r2, [pc, #220]	@ (800ad04 <_strtod_l+0xbcc>)
 800ac26:	431c      	orrs	r4, r3
 800ac28:	d052      	beq.n	800acd0 <_strtod_l+0xb98>
 800ac2a:	4b37      	ldr	r3, [pc, #220]	@ (800ad08 <_strtod_l+0xbd0>)
 800ac2c:	f7f5 fc1e 	bl	800046c <__aeabi_dcmplt>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d000      	beq.n	800ac36 <_strtod_l+0xafe>
 800ac34:	e4c3      	b.n	800a5be <_strtod_l+0x486>
 800ac36:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800ac38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac3a:	4a34      	ldr	r2, [pc, #208]	@ (800ad0c <_strtod_l+0xbd4>)
 800ac3c:	4b2a      	ldr	r3, [pc, #168]	@ (800ace8 <_strtod_l+0xbb0>)
 800ac3e:	f7f5 fc29 	bl	8000494 <__aeabi_dcmpgt>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d09a      	beq.n	800ab7c <_strtod_l+0xa44>
 800ac46:	e4ba      	b.n	800a5be <_strtod_l+0x486>
 800ac48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d02a      	beq.n	800aca4 <_strtod_l+0xb6c>
 800ac4e:	23d4      	movs	r3, #212	@ 0xd4
 800ac50:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ac52:	04db      	lsls	r3, r3, #19
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d825      	bhi.n	800aca4 <_strtod_l+0xb6c>
 800ac58:	0020      	movs	r0, r4
 800ac5a:	0029      	movs	r1, r5
 800ac5c:	4a2c      	ldr	r2, [pc, #176]	@ (800ad10 <_strtod_l+0xbd8>)
 800ac5e:	4b2d      	ldr	r3, [pc, #180]	@ (800ad14 <_strtod_l+0xbdc>)
 800ac60:	f7f5 fc0e 	bl	8000480 <__aeabi_dcmple>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d016      	beq.n	800ac96 <_strtod_l+0xb5e>
 800ac68:	0020      	movs	r0, r4
 800ac6a:	0029      	movs	r1, r5
 800ac6c:	f7f5 fc60 	bl	8000530 <__aeabi_d2uiz>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d100      	bne.n	800ac76 <_strtod_l+0xb3e>
 800ac74:	3001      	adds	r0, #1
 800ac76:	f7f8 f859 	bl	8002d2c <__aeabi_ui2d>
 800ac7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac7c:	0004      	movs	r4, r0
 800ac7e:	000d      	movs	r5, r1
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d122      	bne.n	800acca <_strtod_l+0xb92>
 800ac84:	2380      	movs	r3, #128	@ 0x80
 800ac86:	061b      	lsls	r3, r3, #24
 800ac88:	18cb      	adds	r3, r1, r3
 800ac8a:	9018      	str	r0, [sp, #96]	@ 0x60
 800ac8c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac8e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ac90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac92:	9214      	str	r2, [sp, #80]	@ 0x50
 800ac94:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac96:	22d6      	movs	r2, #214	@ 0xd6
 800ac98:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac9a:	04d2      	lsls	r2, r2, #19
 800ac9c:	189b      	adds	r3, r3, r2
 800ac9e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aca0:	1a9b      	subs	r3, r3, r2
 800aca2:	9315      	str	r3, [sp, #84]	@ 0x54
 800aca4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aca6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800aca8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800acaa:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800acac:	f001 fb78 	bl	800c3a0 <__ulp>
 800acb0:	0002      	movs	r2, r0
 800acb2:	000b      	movs	r3, r1
 800acb4:	0030      	movs	r0, r6
 800acb6:	0039      	movs	r1, r7
 800acb8:	f7f7 f96a 	bl	8001f90 <__aeabi_dmul>
 800acbc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800acbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800acc0:	f7f6 f9be 	bl	8001040 <__aeabi_dadd>
 800acc4:	0006      	movs	r6, r0
 800acc6:	000f      	movs	r7, r1
 800acc8:	e791      	b.n	800abee <_strtod_l+0xab6>
 800acca:	9418      	str	r4, [sp, #96]	@ 0x60
 800accc:	9519      	str	r5, [sp, #100]	@ 0x64
 800acce:	e7de      	b.n	800ac8e <_strtod_l+0xb56>
 800acd0:	4b11      	ldr	r3, [pc, #68]	@ (800ad18 <_strtod_l+0xbe0>)
 800acd2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800acd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800acd6:	f7f5 fbc9 	bl	800046c <__aeabi_dcmplt>
 800acda:	e7b2      	b.n	800ac42 <_strtod_l+0xb0a>
 800acdc:	fff00000 	.word	0xfff00000
 800ace0:	000fffff 	.word	0x000fffff
 800ace4:	3ff00000 	.word	0x3ff00000
 800ace8:	3fe00000 	.word	0x3fe00000
 800acec:	7ff00000 	.word	0x7ff00000
 800acf0:	7fe00000 	.word	0x7fe00000
 800acf4:	fcb00000 	.word	0xfcb00000
 800acf8:	7c9fffff 	.word	0x7c9fffff
 800acfc:	7fefffff 	.word	0x7fefffff
 800ad00:	bff00000 	.word	0xbff00000
 800ad04:	94a03595 	.word	0x94a03595
 800ad08:	3fdfffff 	.word	0x3fdfffff
 800ad0c:	35afe535 	.word	0x35afe535
 800ad10:	ffc00000 	.word	0xffc00000
 800ad14:	41dfffff 	.word	0x41dfffff
 800ad18:	3fcfffff 	.word	0x3fcfffff

0800ad1c <strtod>:
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	4c04      	ldr	r4, [pc, #16]	@ (800ad30 <strtod+0x14>)
 800ad20:	000a      	movs	r2, r1
 800ad22:	0001      	movs	r1, r0
 800ad24:	4b03      	ldr	r3, [pc, #12]	@ (800ad34 <strtod+0x18>)
 800ad26:	6820      	ldr	r0, [r4, #0]
 800ad28:	f7ff fa06 	bl	800a138 <_strtod_l>
 800ad2c:	bd10      	pop	{r4, pc}
 800ad2e:	46c0      	nop			@ (mov r8, r8)
 800ad30:	200001cc 	.word	0x200001cc
 800ad34:	20000060 	.word	0x20000060

0800ad38 <_strtol_l.constprop.0>:
 800ad38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	0017      	movs	r7, r2
 800ad3e:	001e      	movs	r6, r3
 800ad40:	9003      	str	r0, [sp, #12]
 800ad42:	9101      	str	r1, [sp, #4]
 800ad44:	2b24      	cmp	r3, #36	@ 0x24
 800ad46:	d844      	bhi.n	800add2 <_strtol_l.constprop.0+0x9a>
 800ad48:	000c      	movs	r4, r1
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d041      	beq.n	800add2 <_strtol_l.constprop.0+0x9a>
 800ad4e:	4b3d      	ldr	r3, [pc, #244]	@ (800ae44 <_strtol_l.constprop.0+0x10c>)
 800ad50:	2208      	movs	r2, #8
 800ad52:	469c      	mov	ip, r3
 800ad54:	0023      	movs	r3, r4
 800ad56:	4661      	mov	r1, ip
 800ad58:	781d      	ldrb	r5, [r3, #0]
 800ad5a:	3401      	adds	r4, #1
 800ad5c:	5d48      	ldrb	r0, [r1, r5]
 800ad5e:	0001      	movs	r1, r0
 800ad60:	4011      	ands	r1, r2
 800ad62:	4210      	tst	r0, r2
 800ad64:	d1f6      	bne.n	800ad54 <_strtol_l.constprop.0+0x1c>
 800ad66:	2d2d      	cmp	r5, #45	@ 0x2d
 800ad68:	d13a      	bne.n	800ade0 <_strtol_l.constprop.0+0xa8>
 800ad6a:	7825      	ldrb	r5, [r4, #0]
 800ad6c:	1c9c      	adds	r4, r3, #2
 800ad6e:	2301      	movs	r3, #1
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	2210      	movs	r2, #16
 800ad74:	0033      	movs	r3, r6
 800ad76:	4393      	bics	r3, r2
 800ad78:	d109      	bne.n	800ad8e <_strtol_l.constprop.0+0x56>
 800ad7a:	2d30      	cmp	r5, #48	@ 0x30
 800ad7c:	d136      	bne.n	800adec <_strtol_l.constprop.0+0xb4>
 800ad7e:	2120      	movs	r1, #32
 800ad80:	7823      	ldrb	r3, [r4, #0]
 800ad82:	438b      	bics	r3, r1
 800ad84:	2b58      	cmp	r3, #88	@ 0x58
 800ad86:	d131      	bne.n	800adec <_strtol_l.constprop.0+0xb4>
 800ad88:	0016      	movs	r6, r2
 800ad8a:	7865      	ldrb	r5, [r4, #1]
 800ad8c:	3402      	adds	r4, #2
 800ad8e:	4a2e      	ldr	r2, [pc, #184]	@ (800ae48 <_strtol_l.constprop.0+0x110>)
 800ad90:	9b00      	ldr	r3, [sp, #0]
 800ad92:	4694      	mov	ip, r2
 800ad94:	4463      	add	r3, ip
 800ad96:	0031      	movs	r1, r6
 800ad98:	0018      	movs	r0, r3
 800ad9a:	9302      	str	r3, [sp, #8]
 800ad9c:	f7f5 fa60 	bl	8000260 <__aeabi_uidivmod>
 800ada0:	2200      	movs	r2, #0
 800ada2:	4684      	mov	ip, r0
 800ada4:	0010      	movs	r0, r2
 800ada6:	002b      	movs	r3, r5
 800ada8:	3b30      	subs	r3, #48	@ 0x30
 800adaa:	2b09      	cmp	r3, #9
 800adac:	d825      	bhi.n	800adfa <_strtol_l.constprop.0+0xc2>
 800adae:	001d      	movs	r5, r3
 800adb0:	42ae      	cmp	r6, r5
 800adb2:	dd31      	ble.n	800ae18 <_strtol_l.constprop.0+0xe0>
 800adb4:	1c53      	adds	r3, r2, #1
 800adb6:	d009      	beq.n	800adcc <_strtol_l.constprop.0+0x94>
 800adb8:	2201      	movs	r2, #1
 800adba:	4252      	negs	r2, r2
 800adbc:	4584      	cmp	ip, r0
 800adbe:	d305      	bcc.n	800adcc <_strtol_l.constprop.0+0x94>
 800adc0:	d101      	bne.n	800adc6 <_strtol_l.constprop.0+0x8e>
 800adc2:	42a9      	cmp	r1, r5
 800adc4:	db25      	blt.n	800ae12 <_strtol_l.constprop.0+0xda>
 800adc6:	2201      	movs	r2, #1
 800adc8:	4370      	muls	r0, r6
 800adca:	1828      	adds	r0, r5, r0
 800adcc:	7825      	ldrb	r5, [r4, #0]
 800adce:	3401      	adds	r4, #1
 800add0:	e7e9      	b.n	800ada6 <_strtol_l.constprop.0+0x6e>
 800add2:	f000 fa89 	bl	800b2e8 <__errno>
 800add6:	2316      	movs	r3, #22
 800add8:	6003      	str	r3, [r0, #0]
 800adda:	2000      	movs	r0, #0
 800addc:	b005      	add	sp, #20
 800adde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade0:	9100      	str	r1, [sp, #0]
 800ade2:	2d2b      	cmp	r5, #43	@ 0x2b
 800ade4:	d1c5      	bne.n	800ad72 <_strtol_l.constprop.0+0x3a>
 800ade6:	7825      	ldrb	r5, [r4, #0]
 800ade8:	1c9c      	adds	r4, r3, #2
 800adea:	e7c2      	b.n	800ad72 <_strtol_l.constprop.0+0x3a>
 800adec:	2e00      	cmp	r6, #0
 800adee:	d1ce      	bne.n	800ad8e <_strtol_l.constprop.0+0x56>
 800adf0:	3608      	adds	r6, #8
 800adf2:	2d30      	cmp	r5, #48	@ 0x30
 800adf4:	d0cb      	beq.n	800ad8e <_strtol_l.constprop.0+0x56>
 800adf6:	3602      	adds	r6, #2
 800adf8:	e7c9      	b.n	800ad8e <_strtol_l.constprop.0+0x56>
 800adfa:	002b      	movs	r3, r5
 800adfc:	3b41      	subs	r3, #65	@ 0x41
 800adfe:	2b19      	cmp	r3, #25
 800ae00:	d801      	bhi.n	800ae06 <_strtol_l.constprop.0+0xce>
 800ae02:	3d37      	subs	r5, #55	@ 0x37
 800ae04:	e7d4      	b.n	800adb0 <_strtol_l.constprop.0+0x78>
 800ae06:	002b      	movs	r3, r5
 800ae08:	3b61      	subs	r3, #97	@ 0x61
 800ae0a:	2b19      	cmp	r3, #25
 800ae0c:	d804      	bhi.n	800ae18 <_strtol_l.constprop.0+0xe0>
 800ae0e:	3d57      	subs	r5, #87	@ 0x57
 800ae10:	e7ce      	b.n	800adb0 <_strtol_l.constprop.0+0x78>
 800ae12:	2201      	movs	r2, #1
 800ae14:	4252      	negs	r2, r2
 800ae16:	e7d9      	b.n	800adcc <_strtol_l.constprop.0+0x94>
 800ae18:	1c53      	adds	r3, r2, #1
 800ae1a:	d108      	bne.n	800ae2e <_strtol_l.constprop.0+0xf6>
 800ae1c:	2322      	movs	r3, #34	@ 0x22
 800ae1e:	9a03      	ldr	r2, [sp, #12]
 800ae20:	9802      	ldr	r0, [sp, #8]
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	2f00      	cmp	r7, #0
 800ae26:	d0d9      	beq.n	800addc <_strtol_l.constprop.0+0xa4>
 800ae28:	1e63      	subs	r3, r4, #1
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	e007      	b.n	800ae3e <_strtol_l.constprop.0+0x106>
 800ae2e:	9b00      	ldr	r3, [sp, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d000      	beq.n	800ae36 <_strtol_l.constprop.0+0xfe>
 800ae34:	4240      	negs	r0, r0
 800ae36:	2f00      	cmp	r7, #0
 800ae38:	d0d0      	beq.n	800addc <_strtol_l.constprop.0+0xa4>
 800ae3a:	2a00      	cmp	r2, #0
 800ae3c:	d1f4      	bne.n	800ae28 <_strtol_l.constprop.0+0xf0>
 800ae3e:	9b01      	ldr	r3, [sp, #4]
 800ae40:	603b      	str	r3, [r7, #0]
 800ae42:	e7cb      	b.n	800addc <_strtol_l.constprop.0+0xa4>
 800ae44:	0800d789 	.word	0x0800d789
 800ae48:	7fffffff 	.word	0x7fffffff

0800ae4c <strtol>:
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	4c04      	ldr	r4, [pc, #16]	@ (800ae60 <strtol+0x14>)
 800ae50:	0013      	movs	r3, r2
 800ae52:	000a      	movs	r2, r1
 800ae54:	0001      	movs	r1, r0
 800ae56:	6820      	ldr	r0, [r4, #0]
 800ae58:	f7ff ff6e 	bl	800ad38 <_strtol_l.constprop.0>
 800ae5c:	bd10      	pop	{r4, pc}
 800ae5e:	46c0      	nop			@ (mov r8, r8)
 800ae60:	200001cc 	.word	0x200001cc

0800ae64 <std>:
 800ae64:	2300      	movs	r3, #0
 800ae66:	b510      	push	{r4, lr}
 800ae68:	0004      	movs	r4, r0
 800ae6a:	6003      	str	r3, [r0, #0]
 800ae6c:	6043      	str	r3, [r0, #4]
 800ae6e:	6083      	str	r3, [r0, #8]
 800ae70:	8181      	strh	r1, [r0, #12]
 800ae72:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae74:	81c2      	strh	r2, [r0, #14]
 800ae76:	6103      	str	r3, [r0, #16]
 800ae78:	6143      	str	r3, [r0, #20]
 800ae7a:	6183      	str	r3, [r0, #24]
 800ae7c:	0019      	movs	r1, r3
 800ae7e:	2208      	movs	r2, #8
 800ae80:	305c      	adds	r0, #92	@ 0x5c
 800ae82:	f000 f933 	bl	800b0ec <memset>
 800ae86:	4b0b      	ldr	r3, [pc, #44]	@ (800aeb4 <std+0x50>)
 800ae88:	6224      	str	r4, [r4, #32]
 800ae8a:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae8c:	4b0a      	ldr	r3, [pc, #40]	@ (800aeb8 <std+0x54>)
 800ae8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae90:	4b0a      	ldr	r3, [pc, #40]	@ (800aebc <std+0x58>)
 800ae92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae94:	4b0a      	ldr	r3, [pc, #40]	@ (800aec0 <std+0x5c>)
 800ae96:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae98:	4b0a      	ldr	r3, [pc, #40]	@ (800aec4 <std+0x60>)
 800ae9a:	429c      	cmp	r4, r3
 800ae9c:	d005      	beq.n	800aeaa <std+0x46>
 800ae9e:	4b0a      	ldr	r3, [pc, #40]	@ (800aec8 <std+0x64>)
 800aea0:	429c      	cmp	r4, r3
 800aea2:	d002      	beq.n	800aeaa <std+0x46>
 800aea4:	4b09      	ldr	r3, [pc, #36]	@ (800aecc <std+0x68>)
 800aea6:	429c      	cmp	r4, r3
 800aea8:	d103      	bne.n	800aeb2 <std+0x4e>
 800aeaa:	0020      	movs	r0, r4
 800aeac:	3058      	adds	r0, #88	@ 0x58
 800aeae:	f000 fa45 	bl	800b33c <__retarget_lock_init_recursive>
 800aeb2:	bd10      	pop	{r4, pc}
 800aeb4:	0800b055 	.word	0x0800b055
 800aeb8:	0800b07d 	.word	0x0800b07d
 800aebc:	0800b0b5 	.word	0x0800b0b5
 800aec0:	0800b0e1 	.word	0x0800b0e1
 800aec4:	2000068c 	.word	0x2000068c
 800aec8:	200006f4 	.word	0x200006f4
 800aecc:	2000075c 	.word	0x2000075c

0800aed0 <stdio_exit_handler>:
 800aed0:	b510      	push	{r4, lr}
 800aed2:	4a03      	ldr	r2, [pc, #12]	@ (800aee0 <stdio_exit_handler+0x10>)
 800aed4:	4903      	ldr	r1, [pc, #12]	@ (800aee4 <stdio_exit_handler+0x14>)
 800aed6:	4804      	ldr	r0, [pc, #16]	@ (800aee8 <stdio_exit_handler+0x18>)
 800aed8:	f000 f86c 	bl	800afb4 <_fwalk_sglue>
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	46c0      	nop			@ (mov r8, r8)
 800aee0:	20000054 	.word	0x20000054
 800aee4:	0800ccf5 	.word	0x0800ccf5
 800aee8:	200001d0 	.word	0x200001d0

0800aeec <cleanup_stdio>:
 800aeec:	6841      	ldr	r1, [r0, #4]
 800aeee:	4b0b      	ldr	r3, [pc, #44]	@ (800af1c <cleanup_stdio+0x30>)
 800aef0:	b510      	push	{r4, lr}
 800aef2:	0004      	movs	r4, r0
 800aef4:	4299      	cmp	r1, r3
 800aef6:	d001      	beq.n	800aefc <cleanup_stdio+0x10>
 800aef8:	f001 fefc 	bl	800ccf4 <_fflush_r>
 800aefc:	68a1      	ldr	r1, [r4, #8]
 800aefe:	4b08      	ldr	r3, [pc, #32]	@ (800af20 <cleanup_stdio+0x34>)
 800af00:	4299      	cmp	r1, r3
 800af02:	d002      	beq.n	800af0a <cleanup_stdio+0x1e>
 800af04:	0020      	movs	r0, r4
 800af06:	f001 fef5 	bl	800ccf4 <_fflush_r>
 800af0a:	68e1      	ldr	r1, [r4, #12]
 800af0c:	4b05      	ldr	r3, [pc, #20]	@ (800af24 <cleanup_stdio+0x38>)
 800af0e:	4299      	cmp	r1, r3
 800af10:	d002      	beq.n	800af18 <cleanup_stdio+0x2c>
 800af12:	0020      	movs	r0, r4
 800af14:	f001 feee 	bl	800ccf4 <_fflush_r>
 800af18:	bd10      	pop	{r4, pc}
 800af1a:	46c0      	nop			@ (mov r8, r8)
 800af1c:	2000068c 	.word	0x2000068c
 800af20:	200006f4 	.word	0x200006f4
 800af24:	2000075c 	.word	0x2000075c

0800af28 <global_stdio_init.part.0>:
 800af28:	b510      	push	{r4, lr}
 800af2a:	4b09      	ldr	r3, [pc, #36]	@ (800af50 <global_stdio_init.part.0+0x28>)
 800af2c:	4a09      	ldr	r2, [pc, #36]	@ (800af54 <global_stdio_init.part.0+0x2c>)
 800af2e:	2104      	movs	r1, #4
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	4809      	ldr	r0, [pc, #36]	@ (800af58 <global_stdio_init.part.0+0x30>)
 800af34:	2200      	movs	r2, #0
 800af36:	f7ff ff95 	bl	800ae64 <std>
 800af3a:	2201      	movs	r2, #1
 800af3c:	2109      	movs	r1, #9
 800af3e:	4807      	ldr	r0, [pc, #28]	@ (800af5c <global_stdio_init.part.0+0x34>)
 800af40:	f7ff ff90 	bl	800ae64 <std>
 800af44:	2202      	movs	r2, #2
 800af46:	2112      	movs	r1, #18
 800af48:	4805      	ldr	r0, [pc, #20]	@ (800af60 <global_stdio_init.part.0+0x38>)
 800af4a:	f7ff ff8b 	bl	800ae64 <std>
 800af4e:	bd10      	pop	{r4, pc}
 800af50:	200007c4 	.word	0x200007c4
 800af54:	0800aed1 	.word	0x0800aed1
 800af58:	2000068c 	.word	0x2000068c
 800af5c:	200006f4 	.word	0x200006f4
 800af60:	2000075c 	.word	0x2000075c

0800af64 <__sfp_lock_acquire>:
 800af64:	b510      	push	{r4, lr}
 800af66:	4802      	ldr	r0, [pc, #8]	@ (800af70 <__sfp_lock_acquire+0xc>)
 800af68:	f000 f9e9 	bl	800b33e <__retarget_lock_acquire_recursive>
 800af6c:	bd10      	pop	{r4, pc}
 800af6e:	46c0      	nop			@ (mov r8, r8)
 800af70:	200007cd 	.word	0x200007cd

0800af74 <__sfp_lock_release>:
 800af74:	b510      	push	{r4, lr}
 800af76:	4802      	ldr	r0, [pc, #8]	@ (800af80 <__sfp_lock_release+0xc>)
 800af78:	f000 f9e2 	bl	800b340 <__retarget_lock_release_recursive>
 800af7c:	bd10      	pop	{r4, pc}
 800af7e:	46c0      	nop			@ (mov r8, r8)
 800af80:	200007cd 	.word	0x200007cd

0800af84 <__sinit>:
 800af84:	b510      	push	{r4, lr}
 800af86:	0004      	movs	r4, r0
 800af88:	f7ff ffec 	bl	800af64 <__sfp_lock_acquire>
 800af8c:	6a23      	ldr	r3, [r4, #32]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <__sinit+0x14>
 800af92:	f7ff ffef 	bl	800af74 <__sfp_lock_release>
 800af96:	bd10      	pop	{r4, pc}
 800af98:	4b04      	ldr	r3, [pc, #16]	@ (800afac <__sinit+0x28>)
 800af9a:	6223      	str	r3, [r4, #32]
 800af9c:	4b04      	ldr	r3, [pc, #16]	@ (800afb0 <__sinit+0x2c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1f6      	bne.n	800af92 <__sinit+0xe>
 800afa4:	f7ff ffc0 	bl	800af28 <global_stdio_init.part.0>
 800afa8:	e7f3      	b.n	800af92 <__sinit+0xe>
 800afaa:	46c0      	nop			@ (mov r8, r8)
 800afac:	0800aeed 	.word	0x0800aeed
 800afb0:	200007c4 	.word	0x200007c4

0800afb4 <_fwalk_sglue>:
 800afb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afb6:	0014      	movs	r4, r2
 800afb8:	2600      	movs	r6, #0
 800afba:	9000      	str	r0, [sp, #0]
 800afbc:	9101      	str	r1, [sp, #4]
 800afbe:	68a5      	ldr	r5, [r4, #8]
 800afc0:	6867      	ldr	r7, [r4, #4]
 800afc2:	3f01      	subs	r7, #1
 800afc4:	d504      	bpl.n	800afd0 <_fwalk_sglue+0x1c>
 800afc6:	6824      	ldr	r4, [r4, #0]
 800afc8:	2c00      	cmp	r4, #0
 800afca:	d1f8      	bne.n	800afbe <_fwalk_sglue+0xa>
 800afcc:	0030      	movs	r0, r6
 800afce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800afd0:	89ab      	ldrh	r3, [r5, #12]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d908      	bls.n	800afe8 <_fwalk_sglue+0x34>
 800afd6:	220e      	movs	r2, #14
 800afd8:	5eab      	ldrsh	r3, [r5, r2]
 800afda:	3301      	adds	r3, #1
 800afdc:	d004      	beq.n	800afe8 <_fwalk_sglue+0x34>
 800afde:	0029      	movs	r1, r5
 800afe0:	9800      	ldr	r0, [sp, #0]
 800afe2:	9b01      	ldr	r3, [sp, #4]
 800afe4:	4798      	blx	r3
 800afe6:	4306      	orrs	r6, r0
 800afe8:	3568      	adds	r5, #104	@ 0x68
 800afea:	e7ea      	b.n	800afc2 <_fwalk_sglue+0xe>

0800afec <sniprintf>:
 800afec:	b40c      	push	{r2, r3}
 800afee:	b530      	push	{r4, r5, lr}
 800aff0:	4b17      	ldr	r3, [pc, #92]	@ (800b050 <sniprintf+0x64>)
 800aff2:	000c      	movs	r4, r1
 800aff4:	681d      	ldr	r5, [r3, #0]
 800aff6:	b09d      	sub	sp, #116	@ 0x74
 800aff8:	2900      	cmp	r1, #0
 800affa:	da08      	bge.n	800b00e <sniprintf+0x22>
 800affc:	238b      	movs	r3, #139	@ 0x8b
 800affe:	2001      	movs	r0, #1
 800b000:	602b      	str	r3, [r5, #0]
 800b002:	4240      	negs	r0, r0
 800b004:	b01d      	add	sp, #116	@ 0x74
 800b006:	bc30      	pop	{r4, r5}
 800b008:	bc08      	pop	{r3}
 800b00a:	b002      	add	sp, #8
 800b00c:	4718      	bx	r3
 800b00e:	2382      	movs	r3, #130	@ 0x82
 800b010:	466a      	mov	r2, sp
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	8293      	strh	r3, [r2, #20]
 800b016:	2300      	movs	r3, #0
 800b018:	9002      	str	r0, [sp, #8]
 800b01a:	9006      	str	r0, [sp, #24]
 800b01c:	4299      	cmp	r1, r3
 800b01e:	d000      	beq.n	800b022 <sniprintf+0x36>
 800b020:	1e4b      	subs	r3, r1, #1
 800b022:	9304      	str	r3, [sp, #16]
 800b024:	9307      	str	r3, [sp, #28]
 800b026:	2301      	movs	r3, #1
 800b028:	466a      	mov	r2, sp
 800b02a:	425b      	negs	r3, r3
 800b02c:	82d3      	strh	r3, [r2, #22]
 800b02e:	0028      	movs	r0, r5
 800b030:	ab21      	add	r3, sp, #132	@ 0x84
 800b032:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b034:	a902      	add	r1, sp, #8
 800b036:	9301      	str	r3, [sp, #4]
 800b038:	f001 fb5a 	bl	800c6f0 <_svfiprintf_r>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	da01      	bge.n	800b044 <sniprintf+0x58>
 800b040:	238b      	movs	r3, #139	@ 0x8b
 800b042:	602b      	str	r3, [r5, #0]
 800b044:	2c00      	cmp	r4, #0
 800b046:	d0dd      	beq.n	800b004 <sniprintf+0x18>
 800b048:	2200      	movs	r2, #0
 800b04a:	9b02      	ldr	r3, [sp, #8]
 800b04c:	701a      	strb	r2, [r3, #0]
 800b04e:	e7d9      	b.n	800b004 <sniprintf+0x18>
 800b050:	200001cc 	.word	0x200001cc

0800b054 <__sread>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	000c      	movs	r4, r1
 800b058:	250e      	movs	r5, #14
 800b05a:	5f49      	ldrsh	r1, [r1, r5]
 800b05c:	f000 f91c 	bl	800b298 <_read_r>
 800b060:	2800      	cmp	r0, #0
 800b062:	db03      	blt.n	800b06c <__sread+0x18>
 800b064:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b066:	181b      	adds	r3, r3, r0
 800b068:	6563      	str	r3, [r4, #84]	@ 0x54
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	4a02      	ldr	r2, [pc, #8]	@ (800b078 <__sread+0x24>)
 800b070:	4013      	ands	r3, r2
 800b072:	81a3      	strh	r3, [r4, #12]
 800b074:	e7f9      	b.n	800b06a <__sread+0x16>
 800b076:	46c0      	nop			@ (mov r8, r8)
 800b078:	ffffefff 	.word	0xffffefff

0800b07c <__swrite>:
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	001f      	movs	r7, r3
 800b080:	898b      	ldrh	r3, [r1, #12]
 800b082:	0005      	movs	r5, r0
 800b084:	000c      	movs	r4, r1
 800b086:	0016      	movs	r6, r2
 800b088:	05db      	lsls	r3, r3, #23
 800b08a:	d505      	bpl.n	800b098 <__swrite+0x1c>
 800b08c:	230e      	movs	r3, #14
 800b08e:	5ec9      	ldrsh	r1, [r1, r3]
 800b090:	2200      	movs	r2, #0
 800b092:	2302      	movs	r3, #2
 800b094:	f000 f8ec 	bl	800b270 <_lseek_r>
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	4a05      	ldr	r2, [pc, #20]	@ (800b0b0 <__swrite+0x34>)
 800b09c:	0028      	movs	r0, r5
 800b09e:	4013      	ands	r3, r2
 800b0a0:	81a3      	strh	r3, [r4, #12]
 800b0a2:	0032      	movs	r2, r6
 800b0a4:	230e      	movs	r3, #14
 800b0a6:	5ee1      	ldrsh	r1, [r4, r3]
 800b0a8:	003b      	movs	r3, r7
 800b0aa:	f000 f909 	bl	800b2c0 <_write_r>
 800b0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b0:	ffffefff 	.word	0xffffefff

0800b0b4 <__sseek>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	000c      	movs	r4, r1
 800b0b8:	250e      	movs	r5, #14
 800b0ba:	5f49      	ldrsh	r1, [r1, r5]
 800b0bc:	f000 f8d8 	bl	800b270 <_lseek_r>
 800b0c0:	89a3      	ldrh	r3, [r4, #12]
 800b0c2:	1c42      	adds	r2, r0, #1
 800b0c4:	d103      	bne.n	800b0ce <__sseek+0x1a>
 800b0c6:	4a05      	ldr	r2, [pc, #20]	@ (800b0dc <__sseek+0x28>)
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	81a3      	strh	r3, [r4, #12]
 800b0cc:	bd70      	pop	{r4, r5, r6, pc}
 800b0ce:	2280      	movs	r2, #128	@ 0x80
 800b0d0:	0152      	lsls	r2, r2, #5
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	81a3      	strh	r3, [r4, #12]
 800b0d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0d8:	e7f8      	b.n	800b0cc <__sseek+0x18>
 800b0da:	46c0      	nop			@ (mov r8, r8)
 800b0dc:	ffffefff 	.word	0xffffefff

0800b0e0 <__sclose>:
 800b0e0:	b510      	push	{r4, lr}
 800b0e2:	230e      	movs	r3, #14
 800b0e4:	5ec9      	ldrsh	r1, [r1, r3]
 800b0e6:	f000 f8b1 	bl	800b24c <_close_r>
 800b0ea:	bd10      	pop	{r4, pc}

0800b0ec <memset>:
 800b0ec:	0003      	movs	r3, r0
 800b0ee:	1882      	adds	r2, r0, r2
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d100      	bne.n	800b0f6 <memset+0xa>
 800b0f4:	4770      	bx	lr
 800b0f6:	7019      	strb	r1, [r3, #0]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	e7f9      	b.n	800b0f0 <memset+0x4>

0800b0fc <strchr>:
 800b0fc:	b2c9      	uxtb	r1, r1
 800b0fe:	7803      	ldrb	r3, [r0, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d004      	beq.n	800b10e <strchr+0x12>
 800b104:	428b      	cmp	r3, r1
 800b106:	d100      	bne.n	800b10a <strchr+0xe>
 800b108:	4770      	bx	lr
 800b10a:	3001      	adds	r0, #1
 800b10c:	e7f7      	b.n	800b0fe <strchr+0x2>
 800b10e:	424b      	negs	r3, r1
 800b110:	4159      	adcs	r1, r3
 800b112:	4249      	negs	r1, r1
 800b114:	4008      	ands	r0, r1
 800b116:	e7f7      	b.n	800b108 <strchr+0xc>

0800b118 <strncmp>:
 800b118:	b530      	push	{r4, r5, lr}
 800b11a:	0005      	movs	r5, r0
 800b11c:	1e10      	subs	r0, r2, #0
 800b11e:	d00b      	beq.n	800b138 <strncmp+0x20>
 800b120:	2400      	movs	r4, #0
 800b122:	3a01      	subs	r2, #1
 800b124:	5d2b      	ldrb	r3, [r5, r4]
 800b126:	5d08      	ldrb	r0, [r1, r4]
 800b128:	4283      	cmp	r3, r0
 800b12a:	d104      	bne.n	800b136 <strncmp+0x1e>
 800b12c:	42a2      	cmp	r2, r4
 800b12e:	d002      	beq.n	800b136 <strncmp+0x1e>
 800b130:	3401      	adds	r4, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1f6      	bne.n	800b124 <strncmp+0xc>
 800b136:	1a18      	subs	r0, r3, r0
 800b138:	bd30      	pop	{r4, r5, pc}

0800b13a <strncpy>:
 800b13a:	0003      	movs	r3, r0
 800b13c:	b530      	push	{r4, r5, lr}
 800b13e:	001d      	movs	r5, r3
 800b140:	2a00      	cmp	r2, #0
 800b142:	d006      	beq.n	800b152 <strncpy+0x18>
 800b144:	780c      	ldrb	r4, [r1, #0]
 800b146:	3a01      	subs	r2, #1
 800b148:	3301      	adds	r3, #1
 800b14a:	702c      	strb	r4, [r5, #0]
 800b14c:	3101      	adds	r1, #1
 800b14e:	2c00      	cmp	r4, #0
 800b150:	d1f5      	bne.n	800b13e <strncpy+0x4>
 800b152:	2100      	movs	r1, #0
 800b154:	189a      	adds	r2, r3, r2
 800b156:	4293      	cmp	r3, r2
 800b158:	d100      	bne.n	800b15c <strncpy+0x22>
 800b15a:	bd30      	pop	{r4, r5, pc}
 800b15c:	7019      	strb	r1, [r3, #0]
 800b15e:	3301      	adds	r3, #1
 800b160:	e7f9      	b.n	800b156 <strncpy+0x1c>

0800b162 <strrchr>:
 800b162:	b570      	push	{r4, r5, r6, lr}
 800b164:	2400      	movs	r4, #0
 800b166:	b2cd      	uxtb	r5, r1
 800b168:	b2c9      	uxtb	r1, r1
 800b16a:	42a1      	cmp	r1, r4
 800b16c:	d106      	bne.n	800b17c <strrchr+0x1a>
 800b16e:	0029      	movs	r1, r5
 800b170:	f7ff ffc4 	bl	800b0fc <strchr>
 800b174:	0004      	movs	r4, r0
 800b176:	e006      	b.n	800b186 <strrchr+0x24>
 800b178:	001c      	movs	r4, r3
 800b17a:	1c58      	adds	r0, r3, #1
 800b17c:	0029      	movs	r1, r5
 800b17e:	f7ff ffbd 	bl	800b0fc <strchr>
 800b182:	1e03      	subs	r3, r0, #0
 800b184:	d1f8      	bne.n	800b178 <strrchr+0x16>
 800b186:	0020      	movs	r0, r4
 800b188:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b18c <strtok>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	4b16      	ldr	r3, [pc, #88]	@ (800b1e8 <strtok+0x5c>)
 800b190:	0005      	movs	r5, r0
 800b192:	681f      	ldr	r7, [r3, #0]
 800b194:	000e      	movs	r6, r1
 800b196:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b198:	2c00      	cmp	r4, #0
 800b19a:	d11d      	bne.n	800b1d8 <strtok+0x4c>
 800b19c:	2050      	movs	r0, #80	@ 0x50
 800b19e:	f000 fca1 	bl	800bae4 <malloc>
 800b1a2:	1e02      	subs	r2, r0, #0
 800b1a4:	6478      	str	r0, [r7, #68]	@ 0x44
 800b1a6:	d104      	bne.n	800b1b2 <strtok+0x26>
 800b1a8:	215b      	movs	r1, #91	@ 0x5b
 800b1aa:	4b10      	ldr	r3, [pc, #64]	@ (800b1ec <strtok+0x60>)
 800b1ac:	4810      	ldr	r0, [pc, #64]	@ (800b1f0 <strtok+0x64>)
 800b1ae:	f000 f8d7 	bl	800b360 <__assert_func>
 800b1b2:	6004      	str	r4, [r0, #0]
 800b1b4:	6044      	str	r4, [r0, #4]
 800b1b6:	6084      	str	r4, [r0, #8]
 800b1b8:	60c4      	str	r4, [r0, #12]
 800b1ba:	6104      	str	r4, [r0, #16]
 800b1bc:	6144      	str	r4, [r0, #20]
 800b1be:	6184      	str	r4, [r0, #24]
 800b1c0:	6284      	str	r4, [r0, #40]	@ 0x28
 800b1c2:	62c4      	str	r4, [r0, #44]	@ 0x2c
 800b1c4:	6304      	str	r4, [r0, #48]	@ 0x30
 800b1c6:	6344      	str	r4, [r0, #52]	@ 0x34
 800b1c8:	6384      	str	r4, [r0, #56]	@ 0x38
 800b1ca:	63c4      	str	r4, [r0, #60]	@ 0x3c
 800b1cc:	6404      	str	r4, [r0, #64]	@ 0x40
 800b1ce:	6444      	str	r4, [r0, #68]	@ 0x44
 800b1d0:	6484      	str	r4, [r0, #72]	@ 0x48
 800b1d2:	64c4      	str	r4, [r0, #76]	@ 0x4c
 800b1d4:	7704      	strb	r4, [r0, #28]
 800b1d6:	6244      	str	r4, [r0, #36]	@ 0x24
 800b1d8:	0031      	movs	r1, r6
 800b1da:	0028      	movs	r0, r5
 800b1dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1de:	2301      	movs	r3, #1
 800b1e0:	f000 f808 	bl	800b1f4 <__strtok_r>
 800b1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1e6:	46c0      	nop			@ (mov r8, r8)
 800b1e8:	200001cc 	.word	0x200001cc
 800b1ec:	0800d889 	.word	0x0800d889
 800b1f0:	0800d8a0 	.word	0x0800d8a0

0800b1f4 <__strtok_r>:
 800b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f6:	1e04      	subs	r4, r0, #0
 800b1f8:	d102      	bne.n	800b200 <__strtok_r+0xc>
 800b1fa:	6814      	ldr	r4, [r2, #0]
 800b1fc:	2c00      	cmp	r4, #0
 800b1fe:	d009      	beq.n	800b214 <__strtok_r+0x20>
 800b200:	0020      	movs	r0, r4
 800b202:	000e      	movs	r6, r1
 800b204:	7805      	ldrb	r5, [r0, #0]
 800b206:	3401      	adds	r4, #1
 800b208:	7837      	ldrb	r7, [r6, #0]
 800b20a:	2f00      	cmp	r7, #0
 800b20c:	d104      	bne.n	800b218 <__strtok_r+0x24>
 800b20e:	2d00      	cmp	r5, #0
 800b210:	d10d      	bne.n	800b22e <__strtok_r+0x3a>
 800b212:	6015      	str	r5, [r2, #0]
 800b214:	2000      	movs	r0, #0
 800b216:	e006      	b.n	800b226 <__strtok_r+0x32>
 800b218:	3601      	adds	r6, #1
 800b21a:	42bd      	cmp	r5, r7
 800b21c:	d1f4      	bne.n	800b208 <__strtok_r+0x14>
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1ee      	bne.n	800b200 <__strtok_r+0xc>
 800b222:	6014      	str	r4, [r2, #0]
 800b224:	7003      	strb	r3, [r0, #0]
 800b226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b228:	3301      	adds	r3, #1
 800b22a:	2d00      	cmp	r5, #0
 800b22c:	d102      	bne.n	800b234 <__strtok_r+0x40>
 800b22e:	000b      	movs	r3, r1
 800b230:	7826      	ldrb	r6, [r4, #0]
 800b232:	3401      	adds	r4, #1
 800b234:	781d      	ldrb	r5, [r3, #0]
 800b236:	42ae      	cmp	r6, r5
 800b238:	d1f6      	bne.n	800b228 <__strtok_r+0x34>
 800b23a:	2300      	movs	r3, #0
 800b23c:	001d      	movs	r5, r3
 800b23e:	429e      	cmp	r6, r3
 800b240:	d002      	beq.n	800b248 <__strtok_r+0x54>
 800b242:	0023      	movs	r3, r4
 800b244:	1e61      	subs	r1, r4, #1
 800b246:	700d      	strb	r5, [r1, #0]
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	e7ec      	b.n	800b226 <__strtok_r+0x32>

0800b24c <_close_r>:
 800b24c:	2300      	movs	r3, #0
 800b24e:	b570      	push	{r4, r5, r6, lr}
 800b250:	4d06      	ldr	r5, [pc, #24]	@ (800b26c <_close_r+0x20>)
 800b252:	0004      	movs	r4, r0
 800b254:	0008      	movs	r0, r1
 800b256:	602b      	str	r3, [r5, #0]
 800b258:	f7f9 fcda 	bl	8004c10 <_close>
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	d103      	bne.n	800b268 <_close_r+0x1c>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d000      	beq.n	800b268 <_close_r+0x1c>
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	bd70      	pop	{r4, r5, r6, pc}
 800b26a:	46c0      	nop			@ (mov r8, r8)
 800b26c:	200007c8 	.word	0x200007c8

0800b270 <_lseek_r>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	0004      	movs	r4, r0
 800b274:	0008      	movs	r0, r1
 800b276:	0011      	movs	r1, r2
 800b278:	001a      	movs	r2, r3
 800b27a:	2300      	movs	r3, #0
 800b27c:	4d05      	ldr	r5, [pc, #20]	@ (800b294 <_lseek_r+0x24>)
 800b27e:	602b      	str	r3, [r5, #0]
 800b280:	f7f9 fce7 	bl	8004c52 <_lseek>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d103      	bne.n	800b290 <_lseek_r+0x20>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d000      	beq.n	800b290 <_lseek_r+0x20>
 800b28e:	6023      	str	r3, [r4, #0]
 800b290:	bd70      	pop	{r4, r5, r6, pc}
 800b292:	46c0      	nop			@ (mov r8, r8)
 800b294:	200007c8 	.word	0x200007c8

0800b298 <_read_r>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	0004      	movs	r4, r0
 800b29c:	0008      	movs	r0, r1
 800b29e:	0011      	movs	r1, r2
 800b2a0:	001a      	movs	r2, r3
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4d05      	ldr	r5, [pc, #20]	@ (800b2bc <_read_r+0x24>)
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	f7f9 fc79 	bl	8004b9e <_read>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d103      	bne.n	800b2b8 <_read_r+0x20>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d000      	beq.n	800b2b8 <_read_r+0x20>
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ba:	46c0      	nop			@ (mov r8, r8)
 800b2bc:	200007c8 	.word	0x200007c8

0800b2c0 <_write_r>:
 800b2c0:	b570      	push	{r4, r5, r6, lr}
 800b2c2:	0004      	movs	r4, r0
 800b2c4:	0008      	movs	r0, r1
 800b2c6:	0011      	movs	r1, r2
 800b2c8:	001a      	movs	r2, r3
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	4d05      	ldr	r5, [pc, #20]	@ (800b2e4 <_write_r+0x24>)
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	f7f9 fc82 	bl	8004bd8 <_write>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d103      	bne.n	800b2e0 <_write_r+0x20>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d000      	beq.n	800b2e0 <_write_r+0x20>
 800b2de:	6023      	str	r3, [r4, #0]
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
 800b2e2:	46c0      	nop			@ (mov r8, r8)
 800b2e4:	200007c8 	.word	0x200007c8

0800b2e8 <__errno>:
 800b2e8:	4b01      	ldr	r3, [pc, #4]	@ (800b2f0 <__errno+0x8>)
 800b2ea:	6818      	ldr	r0, [r3, #0]
 800b2ec:	4770      	bx	lr
 800b2ee:	46c0      	nop			@ (mov r8, r8)
 800b2f0:	200001cc 	.word	0x200001cc

0800b2f4 <__libc_init_array>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	2600      	movs	r6, #0
 800b2f8:	4c0c      	ldr	r4, [pc, #48]	@ (800b32c <__libc_init_array+0x38>)
 800b2fa:	4d0d      	ldr	r5, [pc, #52]	@ (800b330 <__libc_init_array+0x3c>)
 800b2fc:	1b64      	subs	r4, r4, r5
 800b2fe:	10a4      	asrs	r4, r4, #2
 800b300:	42a6      	cmp	r6, r4
 800b302:	d109      	bne.n	800b318 <__libc_init_array+0x24>
 800b304:	2600      	movs	r6, #0
 800b306:	f002 f88b 	bl	800d420 <_init>
 800b30a:	4c0a      	ldr	r4, [pc, #40]	@ (800b334 <__libc_init_array+0x40>)
 800b30c:	4d0a      	ldr	r5, [pc, #40]	@ (800b338 <__libc_init_array+0x44>)
 800b30e:	1b64      	subs	r4, r4, r5
 800b310:	10a4      	asrs	r4, r4, #2
 800b312:	42a6      	cmp	r6, r4
 800b314:	d105      	bne.n	800b322 <__libc_init_array+0x2e>
 800b316:	bd70      	pop	{r4, r5, r6, pc}
 800b318:	00b3      	lsls	r3, r6, #2
 800b31a:	58eb      	ldr	r3, [r5, r3]
 800b31c:	4798      	blx	r3
 800b31e:	3601      	adds	r6, #1
 800b320:	e7ee      	b.n	800b300 <__libc_init_array+0xc>
 800b322:	00b3      	lsls	r3, r6, #2
 800b324:	58eb      	ldr	r3, [r5, r3]
 800b326:	4798      	blx	r3
 800b328:	3601      	adds	r6, #1
 800b32a:	e7f2      	b.n	800b312 <__libc_init_array+0x1e>
 800b32c:	0800db3c 	.word	0x0800db3c
 800b330:	0800db3c 	.word	0x0800db3c
 800b334:	0800db40 	.word	0x0800db40
 800b338:	0800db3c 	.word	0x0800db3c

0800b33c <__retarget_lock_init_recursive>:
 800b33c:	4770      	bx	lr

0800b33e <__retarget_lock_acquire_recursive>:
 800b33e:	4770      	bx	lr

0800b340 <__retarget_lock_release_recursive>:
 800b340:	4770      	bx	lr

0800b342 <memcpy>:
 800b342:	2300      	movs	r3, #0
 800b344:	b510      	push	{r4, lr}
 800b346:	429a      	cmp	r2, r3
 800b348:	d100      	bne.n	800b34c <memcpy+0xa>
 800b34a:	bd10      	pop	{r4, pc}
 800b34c:	5ccc      	ldrb	r4, [r1, r3]
 800b34e:	54c4      	strb	r4, [r0, r3]
 800b350:	3301      	adds	r3, #1
 800b352:	e7f8      	b.n	800b346 <memcpy+0x4>

0800b354 <nan>:
 800b354:	2000      	movs	r0, #0
 800b356:	4901      	ldr	r1, [pc, #4]	@ (800b35c <nan+0x8>)
 800b358:	4770      	bx	lr
 800b35a:	46c0      	nop			@ (mov r8, r8)
 800b35c:	7ff80000 	.word	0x7ff80000

0800b360 <__assert_func>:
 800b360:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b362:	0014      	movs	r4, r2
 800b364:	001a      	movs	r2, r3
 800b366:	4b09      	ldr	r3, [pc, #36]	@ (800b38c <__assert_func+0x2c>)
 800b368:	0005      	movs	r5, r0
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	000e      	movs	r6, r1
 800b36e:	68d8      	ldr	r0, [r3, #12]
 800b370:	4b07      	ldr	r3, [pc, #28]	@ (800b390 <__assert_func+0x30>)
 800b372:	2c00      	cmp	r4, #0
 800b374:	d101      	bne.n	800b37a <__assert_func+0x1a>
 800b376:	4b07      	ldr	r3, [pc, #28]	@ (800b394 <__assert_func+0x34>)
 800b378:	001c      	movs	r4, r3
 800b37a:	4907      	ldr	r1, [pc, #28]	@ (800b398 <__assert_func+0x38>)
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	9402      	str	r4, [sp, #8]
 800b380:	002b      	movs	r3, r5
 800b382:	9600      	str	r6, [sp, #0]
 800b384:	f001 fce2 	bl	800cd4c <fiprintf>
 800b388:	f001 fd21 	bl	800cdce <abort>
 800b38c:	200001cc 	.word	0x200001cc
 800b390:	0800d902 	.word	0x0800d902
 800b394:	0800d93d 	.word	0x0800d93d
 800b398:	0800d90f 	.word	0x0800d90f

0800b39c <_free_r>:
 800b39c:	b570      	push	{r4, r5, r6, lr}
 800b39e:	0005      	movs	r5, r0
 800b3a0:	1e0c      	subs	r4, r1, #0
 800b3a2:	d010      	beq.n	800b3c6 <_free_r+0x2a>
 800b3a4:	3c04      	subs	r4, #4
 800b3a6:	6823      	ldr	r3, [r4, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	da00      	bge.n	800b3ae <_free_r+0x12>
 800b3ac:	18e4      	adds	r4, r4, r3
 800b3ae:	0028      	movs	r0, r5
 800b3b0:	f000 fc56 	bl	800bc60 <__malloc_lock>
 800b3b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b42c <_free_r+0x90>)
 800b3b6:	6813      	ldr	r3, [r2, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d105      	bne.n	800b3c8 <_free_r+0x2c>
 800b3bc:	6063      	str	r3, [r4, #4]
 800b3be:	6014      	str	r4, [r2, #0]
 800b3c0:	0028      	movs	r0, r5
 800b3c2:	f000 fc55 	bl	800bc70 <__malloc_unlock>
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}
 800b3c8:	42a3      	cmp	r3, r4
 800b3ca:	d908      	bls.n	800b3de <_free_r+0x42>
 800b3cc:	6820      	ldr	r0, [r4, #0]
 800b3ce:	1821      	adds	r1, r4, r0
 800b3d0:	428b      	cmp	r3, r1
 800b3d2:	d1f3      	bne.n	800b3bc <_free_r+0x20>
 800b3d4:	6819      	ldr	r1, [r3, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	1809      	adds	r1, r1, r0
 800b3da:	6021      	str	r1, [r4, #0]
 800b3dc:	e7ee      	b.n	800b3bc <_free_r+0x20>
 800b3de:	001a      	movs	r2, r3
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <_free_r+0x4e>
 800b3e6:	42a3      	cmp	r3, r4
 800b3e8:	d9f9      	bls.n	800b3de <_free_r+0x42>
 800b3ea:	6811      	ldr	r1, [r2, #0]
 800b3ec:	1850      	adds	r0, r2, r1
 800b3ee:	42a0      	cmp	r0, r4
 800b3f0:	d10b      	bne.n	800b40a <_free_r+0x6e>
 800b3f2:	6820      	ldr	r0, [r4, #0]
 800b3f4:	1809      	adds	r1, r1, r0
 800b3f6:	1850      	adds	r0, r2, r1
 800b3f8:	6011      	str	r1, [r2, #0]
 800b3fa:	4283      	cmp	r3, r0
 800b3fc:	d1e0      	bne.n	800b3c0 <_free_r+0x24>
 800b3fe:	6818      	ldr	r0, [r3, #0]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	1841      	adds	r1, r0, r1
 800b404:	6011      	str	r1, [r2, #0]
 800b406:	6053      	str	r3, [r2, #4]
 800b408:	e7da      	b.n	800b3c0 <_free_r+0x24>
 800b40a:	42a0      	cmp	r0, r4
 800b40c:	d902      	bls.n	800b414 <_free_r+0x78>
 800b40e:	230c      	movs	r3, #12
 800b410:	602b      	str	r3, [r5, #0]
 800b412:	e7d5      	b.n	800b3c0 <_free_r+0x24>
 800b414:	6820      	ldr	r0, [r4, #0]
 800b416:	1821      	adds	r1, r4, r0
 800b418:	428b      	cmp	r3, r1
 800b41a:	d103      	bne.n	800b424 <_free_r+0x88>
 800b41c:	6819      	ldr	r1, [r3, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	1809      	adds	r1, r1, r0
 800b422:	6021      	str	r1, [r4, #0]
 800b424:	6063      	str	r3, [r4, #4]
 800b426:	6054      	str	r4, [r2, #4]
 800b428:	e7ca      	b.n	800b3c0 <_free_r+0x24>
 800b42a:	46c0      	nop			@ (mov r8, r8)
 800b42c:	200007d4 	.word	0x200007d4

0800b430 <rshift>:
 800b430:	0002      	movs	r2, r0
 800b432:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b434:	6904      	ldr	r4, [r0, #16]
 800b436:	b085      	sub	sp, #20
 800b438:	3214      	adds	r2, #20
 800b43a:	114b      	asrs	r3, r1, #5
 800b43c:	0016      	movs	r6, r2
 800b43e:	9302      	str	r3, [sp, #8]
 800b440:	429c      	cmp	r4, r3
 800b442:	dd31      	ble.n	800b4a8 <rshift+0x78>
 800b444:	261f      	movs	r6, #31
 800b446:	000f      	movs	r7, r1
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	00a5      	lsls	r5, r4, #2
 800b44c:	18d3      	adds	r3, r2, r3
 800b44e:	4037      	ands	r7, r6
 800b450:	1955      	adds	r5, r2, r5
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	9701      	str	r7, [sp, #4]
 800b456:	4231      	tst	r1, r6
 800b458:	d10d      	bne.n	800b476 <rshift+0x46>
 800b45a:	0016      	movs	r6, r2
 800b45c:	0019      	movs	r1, r3
 800b45e:	428d      	cmp	r5, r1
 800b460:	d836      	bhi.n	800b4d0 <rshift+0xa0>
 800b462:	9b00      	ldr	r3, [sp, #0]
 800b464:	2600      	movs	r6, #0
 800b466:	3b03      	subs	r3, #3
 800b468:	429d      	cmp	r5, r3
 800b46a:	d302      	bcc.n	800b472 <rshift+0x42>
 800b46c:	9b02      	ldr	r3, [sp, #8]
 800b46e:	1ae4      	subs	r4, r4, r3
 800b470:	00a6      	lsls	r6, r4, #2
 800b472:	1996      	adds	r6, r2, r6
 800b474:	e018      	b.n	800b4a8 <rshift+0x78>
 800b476:	2120      	movs	r1, #32
 800b478:	9e01      	ldr	r6, [sp, #4]
 800b47a:	9f01      	ldr	r7, [sp, #4]
 800b47c:	1b89      	subs	r1, r1, r6
 800b47e:	9e00      	ldr	r6, [sp, #0]
 800b480:	9103      	str	r1, [sp, #12]
 800b482:	ce02      	ldmia	r6!, {r1}
 800b484:	4694      	mov	ip, r2
 800b486:	40f9      	lsrs	r1, r7
 800b488:	42b5      	cmp	r5, r6
 800b48a:	d816      	bhi.n	800b4ba <rshift+0x8a>
 800b48c:	9b00      	ldr	r3, [sp, #0]
 800b48e:	2600      	movs	r6, #0
 800b490:	3301      	adds	r3, #1
 800b492:	429d      	cmp	r5, r3
 800b494:	d303      	bcc.n	800b49e <rshift+0x6e>
 800b496:	9b02      	ldr	r3, [sp, #8]
 800b498:	1ae4      	subs	r4, r4, r3
 800b49a:	00a6      	lsls	r6, r4, #2
 800b49c:	3e04      	subs	r6, #4
 800b49e:	1996      	adds	r6, r2, r6
 800b4a0:	6031      	str	r1, [r6, #0]
 800b4a2:	2900      	cmp	r1, #0
 800b4a4:	d000      	beq.n	800b4a8 <rshift+0x78>
 800b4a6:	3604      	adds	r6, #4
 800b4a8:	1ab1      	subs	r1, r6, r2
 800b4aa:	1089      	asrs	r1, r1, #2
 800b4ac:	6101      	str	r1, [r0, #16]
 800b4ae:	4296      	cmp	r6, r2
 800b4b0:	d101      	bne.n	800b4b6 <rshift+0x86>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	6143      	str	r3, [r0, #20]
 800b4b6:	b005      	add	sp, #20
 800b4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ba:	6837      	ldr	r7, [r6, #0]
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	409f      	lsls	r7, r3
 800b4c0:	430f      	orrs	r7, r1
 800b4c2:	4661      	mov	r1, ip
 800b4c4:	c180      	stmia	r1!, {r7}
 800b4c6:	468c      	mov	ip, r1
 800b4c8:	9b01      	ldr	r3, [sp, #4]
 800b4ca:	ce02      	ldmia	r6!, {r1}
 800b4cc:	40d9      	lsrs	r1, r3
 800b4ce:	e7db      	b.n	800b488 <rshift+0x58>
 800b4d0:	c980      	ldmia	r1!, {r7}
 800b4d2:	c680      	stmia	r6!, {r7}
 800b4d4:	e7c3      	b.n	800b45e <rshift+0x2e>

0800b4d6 <__hexdig_fun>:
 800b4d6:	0002      	movs	r2, r0
 800b4d8:	3a30      	subs	r2, #48	@ 0x30
 800b4da:	0003      	movs	r3, r0
 800b4dc:	2a09      	cmp	r2, #9
 800b4de:	d802      	bhi.n	800b4e6 <__hexdig_fun+0x10>
 800b4e0:	3b20      	subs	r3, #32
 800b4e2:	b2d8      	uxtb	r0, r3
 800b4e4:	4770      	bx	lr
 800b4e6:	0002      	movs	r2, r0
 800b4e8:	3a61      	subs	r2, #97	@ 0x61
 800b4ea:	2a05      	cmp	r2, #5
 800b4ec:	d801      	bhi.n	800b4f2 <__hexdig_fun+0x1c>
 800b4ee:	3b47      	subs	r3, #71	@ 0x47
 800b4f0:	e7f7      	b.n	800b4e2 <__hexdig_fun+0xc>
 800b4f2:	001a      	movs	r2, r3
 800b4f4:	3a41      	subs	r2, #65	@ 0x41
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	2a05      	cmp	r2, #5
 800b4fa:	d8f3      	bhi.n	800b4e4 <__hexdig_fun+0xe>
 800b4fc:	3b27      	subs	r3, #39	@ 0x27
 800b4fe:	e7f0      	b.n	800b4e2 <__hexdig_fun+0xc>

0800b500 <__gethex>:
 800b500:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b502:	b089      	sub	sp, #36	@ 0x24
 800b504:	9307      	str	r3, [sp, #28]
 800b506:	680b      	ldr	r3, [r1, #0]
 800b508:	9201      	str	r2, [sp, #4]
 800b50a:	9003      	str	r0, [sp, #12]
 800b50c:	9106      	str	r1, [sp, #24]
 800b50e:	1c9a      	adds	r2, r3, #2
 800b510:	0011      	movs	r1, r2
 800b512:	3201      	adds	r2, #1
 800b514:	1e50      	subs	r0, r2, #1
 800b516:	7800      	ldrb	r0, [r0, #0]
 800b518:	2830      	cmp	r0, #48	@ 0x30
 800b51a:	d0f9      	beq.n	800b510 <__gethex+0x10>
 800b51c:	1acb      	subs	r3, r1, r3
 800b51e:	3b02      	subs	r3, #2
 800b520:	9305      	str	r3, [sp, #20]
 800b522:	9100      	str	r1, [sp, #0]
 800b524:	f7ff ffd7 	bl	800b4d6 <__hexdig_fun>
 800b528:	2300      	movs	r3, #0
 800b52a:	001d      	movs	r5, r3
 800b52c:	9302      	str	r3, [sp, #8]
 800b52e:	4298      	cmp	r0, r3
 800b530:	d11e      	bne.n	800b570 <__gethex+0x70>
 800b532:	2201      	movs	r2, #1
 800b534:	49a6      	ldr	r1, [pc, #664]	@ (800b7d0 <__gethex+0x2d0>)
 800b536:	9800      	ldr	r0, [sp, #0]
 800b538:	f7ff fdee 	bl	800b118 <strncmp>
 800b53c:	0007      	movs	r7, r0
 800b53e:	42a8      	cmp	r0, r5
 800b540:	d000      	beq.n	800b544 <__gethex+0x44>
 800b542:	e06a      	b.n	800b61a <__gethex+0x11a>
 800b544:	9b00      	ldr	r3, [sp, #0]
 800b546:	7858      	ldrb	r0, [r3, #1]
 800b548:	1c5c      	adds	r4, r3, #1
 800b54a:	f7ff ffc4 	bl	800b4d6 <__hexdig_fun>
 800b54e:	2301      	movs	r3, #1
 800b550:	9302      	str	r3, [sp, #8]
 800b552:	42a8      	cmp	r0, r5
 800b554:	d02f      	beq.n	800b5b6 <__gethex+0xb6>
 800b556:	9400      	str	r4, [sp, #0]
 800b558:	9b00      	ldr	r3, [sp, #0]
 800b55a:	7818      	ldrb	r0, [r3, #0]
 800b55c:	2830      	cmp	r0, #48	@ 0x30
 800b55e:	d009      	beq.n	800b574 <__gethex+0x74>
 800b560:	f7ff ffb9 	bl	800b4d6 <__hexdig_fun>
 800b564:	4242      	negs	r2, r0
 800b566:	4142      	adcs	r2, r0
 800b568:	2301      	movs	r3, #1
 800b56a:	0025      	movs	r5, r4
 800b56c:	9202      	str	r2, [sp, #8]
 800b56e:	9305      	str	r3, [sp, #20]
 800b570:	9c00      	ldr	r4, [sp, #0]
 800b572:	e004      	b.n	800b57e <__gethex+0x7e>
 800b574:	9b00      	ldr	r3, [sp, #0]
 800b576:	3301      	adds	r3, #1
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	e7ed      	b.n	800b558 <__gethex+0x58>
 800b57c:	3401      	adds	r4, #1
 800b57e:	7820      	ldrb	r0, [r4, #0]
 800b580:	f7ff ffa9 	bl	800b4d6 <__hexdig_fun>
 800b584:	1e07      	subs	r7, r0, #0
 800b586:	d1f9      	bne.n	800b57c <__gethex+0x7c>
 800b588:	2201      	movs	r2, #1
 800b58a:	0020      	movs	r0, r4
 800b58c:	4990      	ldr	r1, [pc, #576]	@ (800b7d0 <__gethex+0x2d0>)
 800b58e:	f7ff fdc3 	bl	800b118 <strncmp>
 800b592:	2800      	cmp	r0, #0
 800b594:	d10d      	bne.n	800b5b2 <__gethex+0xb2>
 800b596:	2d00      	cmp	r5, #0
 800b598:	d106      	bne.n	800b5a8 <__gethex+0xa8>
 800b59a:	3401      	adds	r4, #1
 800b59c:	0025      	movs	r5, r4
 800b59e:	7820      	ldrb	r0, [r4, #0]
 800b5a0:	f7ff ff99 	bl	800b4d6 <__hexdig_fun>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d102      	bne.n	800b5ae <__gethex+0xae>
 800b5a8:	1b2d      	subs	r5, r5, r4
 800b5aa:	00af      	lsls	r7, r5, #2
 800b5ac:	e003      	b.n	800b5b6 <__gethex+0xb6>
 800b5ae:	3401      	adds	r4, #1
 800b5b0:	e7f5      	b.n	800b59e <__gethex+0x9e>
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	d1f8      	bne.n	800b5a8 <__gethex+0xa8>
 800b5b6:	2220      	movs	r2, #32
 800b5b8:	7823      	ldrb	r3, [r4, #0]
 800b5ba:	0026      	movs	r6, r4
 800b5bc:	4393      	bics	r3, r2
 800b5be:	2b50      	cmp	r3, #80	@ 0x50
 800b5c0:	d11d      	bne.n	800b5fe <__gethex+0xfe>
 800b5c2:	7863      	ldrb	r3, [r4, #1]
 800b5c4:	2b2b      	cmp	r3, #43	@ 0x2b
 800b5c6:	d02d      	beq.n	800b624 <__gethex+0x124>
 800b5c8:	2b2d      	cmp	r3, #45	@ 0x2d
 800b5ca:	d02f      	beq.n	800b62c <__gethex+0x12c>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	1c66      	adds	r6, r4, #1
 800b5d0:	9304      	str	r3, [sp, #16]
 800b5d2:	7830      	ldrb	r0, [r6, #0]
 800b5d4:	f7ff ff7f 	bl	800b4d6 <__hexdig_fun>
 800b5d8:	1e43      	subs	r3, r0, #1
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	0005      	movs	r5, r0
 800b5de:	2b18      	cmp	r3, #24
 800b5e0:	d82a      	bhi.n	800b638 <__gethex+0x138>
 800b5e2:	7870      	ldrb	r0, [r6, #1]
 800b5e4:	f7ff ff77 	bl	800b4d6 <__hexdig_fun>
 800b5e8:	1e43      	subs	r3, r0, #1
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	3601      	adds	r6, #1
 800b5ee:	3d10      	subs	r5, #16
 800b5f0:	2b18      	cmp	r3, #24
 800b5f2:	d91d      	bls.n	800b630 <__gethex+0x130>
 800b5f4:	9b04      	ldr	r3, [sp, #16]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d000      	beq.n	800b5fc <__gethex+0xfc>
 800b5fa:	426d      	negs	r5, r5
 800b5fc:	197f      	adds	r7, r7, r5
 800b5fe:	9b06      	ldr	r3, [sp, #24]
 800b600:	601e      	str	r6, [r3, #0]
 800b602:	9b02      	ldr	r3, [sp, #8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d019      	beq.n	800b63c <__gethex+0x13c>
 800b608:	9b05      	ldr	r3, [sp, #20]
 800b60a:	2606      	movs	r6, #6
 800b60c:	425a      	negs	r2, r3
 800b60e:	4153      	adcs	r3, r2
 800b610:	425b      	negs	r3, r3
 800b612:	401e      	ands	r6, r3
 800b614:	0030      	movs	r0, r6
 800b616:	b009      	add	sp, #36	@ 0x24
 800b618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b61a:	2301      	movs	r3, #1
 800b61c:	2700      	movs	r7, #0
 800b61e:	9c00      	ldr	r4, [sp, #0]
 800b620:	9302      	str	r3, [sp, #8]
 800b622:	e7c8      	b.n	800b5b6 <__gethex+0xb6>
 800b624:	2300      	movs	r3, #0
 800b626:	9304      	str	r3, [sp, #16]
 800b628:	1ca6      	adds	r6, r4, #2
 800b62a:	e7d2      	b.n	800b5d2 <__gethex+0xd2>
 800b62c:	2301      	movs	r3, #1
 800b62e:	e7fa      	b.n	800b626 <__gethex+0x126>
 800b630:	230a      	movs	r3, #10
 800b632:	435d      	muls	r5, r3
 800b634:	182d      	adds	r5, r5, r0
 800b636:	e7d4      	b.n	800b5e2 <__gethex+0xe2>
 800b638:	0026      	movs	r6, r4
 800b63a:	e7e0      	b.n	800b5fe <__gethex+0xfe>
 800b63c:	9b00      	ldr	r3, [sp, #0]
 800b63e:	9902      	ldr	r1, [sp, #8]
 800b640:	1ae3      	subs	r3, r4, r3
 800b642:	3b01      	subs	r3, #1
 800b644:	2b07      	cmp	r3, #7
 800b646:	dc0a      	bgt.n	800b65e <__gethex+0x15e>
 800b648:	9803      	ldr	r0, [sp, #12]
 800b64a:	f000 fb19 	bl	800bc80 <_Balloc>
 800b64e:	1e05      	subs	r5, r0, #0
 800b650:	d108      	bne.n	800b664 <__gethex+0x164>
 800b652:	002a      	movs	r2, r5
 800b654:	21e4      	movs	r1, #228	@ 0xe4
 800b656:	4b5f      	ldr	r3, [pc, #380]	@ (800b7d4 <__gethex+0x2d4>)
 800b658:	485f      	ldr	r0, [pc, #380]	@ (800b7d8 <__gethex+0x2d8>)
 800b65a:	f7ff fe81 	bl	800b360 <__assert_func>
 800b65e:	3101      	adds	r1, #1
 800b660:	105b      	asrs	r3, r3, #1
 800b662:	e7ef      	b.n	800b644 <__gethex+0x144>
 800b664:	0003      	movs	r3, r0
 800b666:	3314      	adds	r3, #20
 800b668:	9302      	str	r3, [sp, #8]
 800b66a:	9305      	str	r3, [sp, #20]
 800b66c:	2300      	movs	r3, #0
 800b66e:	001e      	movs	r6, r3
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	9b00      	ldr	r3, [sp, #0]
 800b674:	42a3      	cmp	r3, r4
 800b676:	d338      	bcc.n	800b6ea <__gethex+0x1ea>
 800b678:	9c05      	ldr	r4, [sp, #20]
 800b67a:	9b02      	ldr	r3, [sp, #8]
 800b67c:	c440      	stmia	r4!, {r6}
 800b67e:	1ae4      	subs	r4, r4, r3
 800b680:	10a4      	asrs	r4, r4, #2
 800b682:	0030      	movs	r0, r6
 800b684:	612c      	str	r4, [r5, #16]
 800b686:	f000 fbf3 	bl	800be70 <__hi0bits>
 800b68a:	9b01      	ldr	r3, [sp, #4]
 800b68c:	0164      	lsls	r4, r4, #5
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	1a26      	subs	r6, r4, r0
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	429e      	cmp	r6, r3
 800b696:	dd52      	ble.n	800b73e <__gethex+0x23e>
 800b698:	1af6      	subs	r6, r6, r3
 800b69a:	0031      	movs	r1, r6
 800b69c:	0028      	movs	r0, r5
 800b69e:	f000 ff96 	bl	800c5ce <__any_on>
 800b6a2:	1e04      	subs	r4, r0, #0
 800b6a4:	d00f      	beq.n	800b6c6 <__gethex+0x1c6>
 800b6a6:	2401      	movs	r4, #1
 800b6a8:	231f      	movs	r3, #31
 800b6aa:	0020      	movs	r0, r4
 800b6ac:	1e72      	subs	r2, r6, #1
 800b6ae:	4013      	ands	r3, r2
 800b6b0:	4098      	lsls	r0, r3
 800b6b2:	0003      	movs	r3, r0
 800b6b4:	1151      	asrs	r1, r2, #5
 800b6b6:	9802      	ldr	r0, [sp, #8]
 800b6b8:	0089      	lsls	r1, r1, #2
 800b6ba:	5809      	ldr	r1, [r1, r0]
 800b6bc:	4219      	tst	r1, r3
 800b6be:	d002      	beq.n	800b6c6 <__gethex+0x1c6>
 800b6c0:	42a2      	cmp	r2, r4
 800b6c2:	dc34      	bgt.n	800b72e <__gethex+0x22e>
 800b6c4:	2402      	movs	r4, #2
 800b6c6:	0031      	movs	r1, r6
 800b6c8:	0028      	movs	r0, r5
 800b6ca:	f7ff feb1 	bl	800b430 <rshift>
 800b6ce:	19bf      	adds	r7, r7, r6
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	42bb      	cmp	r3, r7
 800b6d6:	da42      	bge.n	800b75e <__gethex+0x25e>
 800b6d8:	0029      	movs	r1, r5
 800b6da:	9803      	ldr	r0, [sp, #12]
 800b6dc:	f000 fb14 	bl	800bd08 <_Bfree>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6e4:	26a3      	movs	r6, #163	@ 0xa3
 800b6e6:	6013      	str	r3, [r2, #0]
 800b6e8:	e794      	b.n	800b614 <__gethex+0x114>
 800b6ea:	3c01      	subs	r4, #1
 800b6ec:	7823      	ldrb	r3, [r4, #0]
 800b6ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6f0:	d012      	beq.n	800b718 <__gethex+0x218>
 800b6f2:	9b04      	ldr	r3, [sp, #16]
 800b6f4:	2b20      	cmp	r3, #32
 800b6f6:	d104      	bne.n	800b702 <__gethex+0x202>
 800b6f8:	9b05      	ldr	r3, [sp, #20]
 800b6fa:	c340      	stmia	r3!, {r6}
 800b6fc:	2600      	movs	r6, #0
 800b6fe:	9305      	str	r3, [sp, #20]
 800b700:	9604      	str	r6, [sp, #16]
 800b702:	7820      	ldrb	r0, [r4, #0]
 800b704:	f7ff fee7 	bl	800b4d6 <__hexdig_fun>
 800b708:	230f      	movs	r3, #15
 800b70a:	4018      	ands	r0, r3
 800b70c:	9b04      	ldr	r3, [sp, #16]
 800b70e:	4098      	lsls	r0, r3
 800b710:	3304      	adds	r3, #4
 800b712:	4306      	orrs	r6, r0
 800b714:	9304      	str	r3, [sp, #16]
 800b716:	e7ac      	b.n	800b672 <__gethex+0x172>
 800b718:	9b00      	ldr	r3, [sp, #0]
 800b71a:	42a3      	cmp	r3, r4
 800b71c:	d8e9      	bhi.n	800b6f2 <__gethex+0x1f2>
 800b71e:	2201      	movs	r2, #1
 800b720:	0020      	movs	r0, r4
 800b722:	492b      	ldr	r1, [pc, #172]	@ (800b7d0 <__gethex+0x2d0>)
 800b724:	f7ff fcf8 	bl	800b118 <strncmp>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d1e2      	bne.n	800b6f2 <__gethex+0x1f2>
 800b72c:	e7a1      	b.n	800b672 <__gethex+0x172>
 800b72e:	0028      	movs	r0, r5
 800b730:	1eb1      	subs	r1, r6, #2
 800b732:	f000 ff4c 	bl	800c5ce <__any_on>
 800b736:	2800      	cmp	r0, #0
 800b738:	d0c4      	beq.n	800b6c4 <__gethex+0x1c4>
 800b73a:	2403      	movs	r4, #3
 800b73c:	e7c3      	b.n	800b6c6 <__gethex+0x1c6>
 800b73e:	9b00      	ldr	r3, [sp, #0]
 800b740:	2400      	movs	r4, #0
 800b742:	429e      	cmp	r6, r3
 800b744:	dac4      	bge.n	800b6d0 <__gethex+0x1d0>
 800b746:	1b9e      	subs	r6, r3, r6
 800b748:	0029      	movs	r1, r5
 800b74a:	0032      	movs	r2, r6
 800b74c:	9803      	ldr	r0, [sp, #12]
 800b74e:	f000 fd05 	bl	800c15c <__lshift>
 800b752:	0003      	movs	r3, r0
 800b754:	3314      	adds	r3, #20
 800b756:	0005      	movs	r5, r0
 800b758:	1bbf      	subs	r7, r7, r6
 800b75a:	9302      	str	r3, [sp, #8]
 800b75c:	e7b8      	b.n	800b6d0 <__gethex+0x1d0>
 800b75e:	9b01      	ldr	r3, [sp, #4]
 800b760:	685e      	ldr	r6, [r3, #4]
 800b762:	42be      	cmp	r6, r7
 800b764:	dd6f      	ble.n	800b846 <__gethex+0x346>
 800b766:	9b00      	ldr	r3, [sp, #0]
 800b768:	1bf6      	subs	r6, r6, r7
 800b76a:	42b3      	cmp	r3, r6
 800b76c:	dc36      	bgt.n	800b7dc <__gethex+0x2dc>
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	2b02      	cmp	r3, #2
 800b774:	d024      	beq.n	800b7c0 <__gethex+0x2c0>
 800b776:	2b03      	cmp	r3, #3
 800b778:	d026      	beq.n	800b7c8 <__gethex+0x2c8>
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d117      	bne.n	800b7ae <__gethex+0x2ae>
 800b77e:	9b00      	ldr	r3, [sp, #0]
 800b780:	42b3      	cmp	r3, r6
 800b782:	d114      	bne.n	800b7ae <__gethex+0x2ae>
 800b784:	2b01      	cmp	r3, #1
 800b786:	d10b      	bne.n	800b7a0 <__gethex+0x2a0>
 800b788:	9b01      	ldr	r3, [sp, #4]
 800b78a:	9a07      	ldr	r2, [sp, #28]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	2662      	movs	r6, #98	@ 0x62
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	2301      	movs	r3, #1
 800b794:	9a02      	ldr	r2, [sp, #8]
 800b796:	612b      	str	r3, [r5, #16]
 800b798:	6013      	str	r3, [r2, #0]
 800b79a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b79c:	601d      	str	r5, [r3, #0]
 800b79e:	e739      	b.n	800b614 <__gethex+0x114>
 800b7a0:	9900      	ldr	r1, [sp, #0]
 800b7a2:	0028      	movs	r0, r5
 800b7a4:	3901      	subs	r1, #1
 800b7a6:	f000 ff12 	bl	800c5ce <__any_on>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d1ec      	bne.n	800b788 <__gethex+0x288>
 800b7ae:	0029      	movs	r1, r5
 800b7b0:	9803      	ldr	r0, [sp, #12]
 800b7b2:	f000 faa9 	bl	800bd08 <_Bfree>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7ba:	2650      	movs	r6, #80	@ 0x50
 800b7bc:	6013      	str	r3, [r2, #0]
 800b7be:	e729      	b.n	800b614 <__gethex+0x114>
 800b7c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1f3      	bne.n	800b7ae <__gethex+0x2ae>
 800b7c6:	e7df      	b.n	800b788 <__gethex+0x288>
 800b7c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1dc      	bne.n	800b788 <__gethex+0x288>
 800b7ce:	e7ee      	b.n	800b7ae <__gethex+0x2ae>
 800b7d0:	0800d724 	.word	0x0800d724
 800b7d4:	0800d93e 	.word	0x0800d93e
 800b7d8:	0800d94f 	.word	0x0800d94f
 800b7dc:	1e77      	subs	r7, r6, #1
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	d12f      	bne.n	800b842 <__gethex+0x342>
 800b7e2:	2f00      	cmp	r7, #0
 800b7e4:	d004      	beq.n	800b7f0 <__gethex+0x2f0>
 800b7e6:	0039      	movs	r1, r7
 800b7e8:	0028      	movs	r0, r5
 800b7ea:	f000 fef0 	bl	800c5ce <__any_on>
 800b7ee:	0004      	movs	r4, r0
 800b7f0:	231f      	movs	r3, #31
 800b7f2:	117a      	asrs	r2, r7, #5
 800b7f4:	401f      	ands	r7, r3
 800b7f6:	3b1e      	subs	r3, #30
 800b7f8:	40bb      	lsls	r3, r7
 800b7fa:	9902      	ldr	r1, [sp, #8]
 800b7fc:	0092      	lsls	r2, r2, #2
 800b7fe:	5852      	ldr	r2, [r2, r1]
 800b800:	421a      	tst	r2, r3
 800b802:	d001      	beq.n	800b808 <__gethex+0x308>
 800b804:	2302      	movs	r3, #2
 800b806:	431c      	orrs	r4, r3
 800b808:	9b00      	ldr	r3, [sp, #0]
 800b80a:	0031      	movs	r1, r6
 800b80c:	1b9b      	subs	r3, r3, r6
 800b80e:	2602      	movs	r6, #2
 800b810:	0028      	movs	r0, r5
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	f7ff fe0c 	bl	800b430 <rshift>
 800b818:	9b01      	ldr	r3, [sp, #4]
 800b81a:	685f      	ldr	r7, [r3, #4]
 800b81c:	2c00      	cmp	r4, #0
 800b81e:	d03f      	beq.n	800b8a0 <__gethex+0x3a0>
 800b820:	9b01      	ldr	r3, [sp, #4]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	2b02      	cmp	r3, #2
 800b826:	d010      	beq.n	800b84a <__gethex+0x34a>
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d012      	beq.n	800b852 <__gethex+0x352>
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d106      	bne.n	800b83e <__gethex+0x33e>
 800b830:	07a2      	lsls	r2, r4, #30
 800b832:	d504      	bpl.n	800b83e <__gethex+0x33e>
 800b834:	9a02      	ldr	r2, [sp, #8]
 800b836:	6812      	ldr	r2, [r2, #0]
 800b838:	4314      	orrs	r4, r2
 800b83a:	421c      	tst	r4, r3
 800b83c:	d10c      	bne.n	800b858 <__gethex+0x358>
 800b83e:	2310      	movs	r3, #16
 800b840:	e02d      	b.n	800b89e <__gethex+0x39e>
 800b842:	2401      	movs	r4, #1
 800b844:	e7d4      	b.n	800b7f0 <__gethex+0x2f0>
 800b846:	2601      	movs	r6, #1
 800b848:	e7e8      	b.n	800b81c <__gethex+0x31c>
 800b84a:	2301      	movs	r3, #1
 800b84c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b84e:	1a9b      	subs	r3, r3, r2
 800b850:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b854:	2b00      	cmp	r3, #0
 800b856:	d0f2      	beq.n	800b83e <__gethex+0x33e>
 800b858:	692b      	ldr	r3, [r5, #16]
 800b85a:	2000      	movs	r0, #0
 800b85c:	9302      	str	r3, [sp, #8]
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	002b      	movs	r3, r5
 800b864:	9a04      	ldr	r2, [sp, #16]
 800b866:	3314      	adds	r3, #20
 800b868:	1899      	adds	r1, r3, r2
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	1c54      	adds	r4, r2, #1
 800b86e:	d01c      	beq.n	800b8aa <__gethex+0x3aa>
 800b870:	3201      	adds	r2, #1
 800b872:	601a      	str	r2, [r3, #0]
 800b874:	002b      	movs	r3, r5
 800b876:	3314      	adds	r3, #20
 800b878:	2e02      	cmp	r6, #2
 800b87a:	d13f      	bne.n	800b8fc <__gethex+0x3fc>
 800b87c:	9a01      	ldr	r2, [sp, #4]
 800b87e:	9900      	ldr	r1, [sp, #0]
 800b880:	6812      	ldr	r2, [r2, #0]
 800b882:	3a01      	subs	r2, #1
 800b884:	428a      	cmp	r2, r1
 800b886:	d109      	bne.n	800b89c <__gethex+0x39c>
 800b888:	000a      	movs	r2, r1
 800b88a:	201f      	movs	r0, #31
 800b88c:	4010      	ands	r0, r2
 800b88e:	2201      	movs	r2, #1
 800b890:	4082      	lsls	r2, r0
 800b892:	1149      	asrs	r1, r1, #5
 800b894:	0089      	lsls	r1, r1, #2
 800b896:	58cb      	ldr	r3, [r1, r3]
 800b898:	4213      	tst	r3, r2
 800b89a:	d13d      	bne.n	800b918 <__gethex+0x418>
 800b89c:	2320      	movs	r3, #32
 800b89e:	431e      	orrs	r6, r3
 800b8a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8a2:	601d      	str	r5, [r3, #0]
 800b8a4:	9b07      	ldr	r3, [sp, #28]
 800b8a6:	601f      	str	r7, [r3, #0]
 800b8a8:	e6b4      	b.n	800b614 <__gethex+0x114>
 800b8aa:	c301      	stmia	r3!, {r0}
 800b8ac:	4299      	cmp	r1, r3
 800b8ae:	d8dc      	bhi.n	800b86a <__gethex+0x36a>
 800b8b0:	68ab      	ldr	r3, [r5, #8]
 800b8b2:	9a02      	ldr	r2, [sp, #8]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	db18      	blt.n	800b8ea <__gethex+0x3ea>
 800b8b8:	6869      	ldr	r1, [r5, #4]
 800b8ba:	9803      	ldr	r0, [sp, #12]
 800b8bc:	3101      	adds	r1, #1
 800b8be:	f000 f9df 	bl	800bc80 <_Balloc>
 800b8c2:	1e04      	subs	r4, r0, #0
 800b8c4:	d104      	bne.n	800b8d0 <__gethex+0x3d0>
 800b8c6:	0022      	movs	r2, r4
 800b8c8:	2184      	movs	r1, #132	@ 0x84
 800b8ca:	4b1d      	ldr	r3, [pc, #116]	@ (800b940 <__gethex+0x440>)
 800b8cc:	481d      	ldr	r0, [pc, #116]	@ (800b944 <__gethex+0x444>)
 800b8ce:	e6c4      	b.n	800b65a <__gethex+0x15a>
 800b8d0:	0029      	movs	r1, r5
 800b8d2:	692a      	ldr	r2, [r5, #16]
 800b8d4:	310c      	adds	r1, #12
 800b8d6:	3202      	adds	r2, #2
 800b8d8:	0092      	lsls	r2, r2, #2
 800b8da:	300c      	adds	r0, #12
 800b8dc:	f7ff fd31 	bl	800b342 <memcpy>
 800b8e0:	0029      	movs	r1, r5
 800b8e2:	9803      	ldr	r0, [sp, #12]
 800b8e4:	f000 fa10 	bl	800bd08 <_Bfree>
 800b8e8:	0025      	movs	r5, r4
 800b8ea:	692b      	ldr	r3, [r5, #16]
 800b8ec:	1c5a      	adds	r2, r3, #1
 800b8ee:	612a      	str	r2, [r5, #16]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	18eb      	adds	r3, r5, r3
 800b8f8:	605a      	str	r2, [r3, #4]
 800b8fa:	e7bb      	b.n	800b874 <__gethex+0x374>
 800b8fc:	692a      	ldr	r2, [r5, #16]
 800b8fe:	9902      	ldr	r1, [sp, #8]
 800b900:	428a      	cmp	r2, r1
 800b902:	dd0b      	ble.n	800b91c <__gethex+0x41c>
 800b904:	2101      	movs	r1, #1
 800b906:	0028      	movs	r0, r5
 800b908:	f7ff fd92 	bl	800b430 <rshift>
 800b90c:	9b01      	ldr	r3, [sp, #4]
 800b90e:	3701      	adds	r7, #1
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	42bb      	cmp	r3, r7
 800b914:	da00      	bge.n	800b918 <__gethex+0x418>
 800b916:	e6df      	b.n	800b6d8 <__gethex+0x1d8>
 800b918:	2601      	movs	r6, #1
 800b91a:	e7bf      	b.n	800b89c <__gethex+0x39c>
 800b91c:	221f      	movs	r2, #31
 800b91e:	9c00      	ldr	r4, [sp, #0]
 800b920:	9900      	ldr	r1, [sp, #0]
 800b922:	4014      	ands	r4, r2
 800b924:	4211      	tst	r1, r2
 800b926:	d0f7      	beq.n	800b918 <__gethex+0x418>
 800b928:	9a04      	ldr	r2, [sp, #16]
 800b92a:	189b      	adds	r3, r3, r2
 800b92c:	3b04      	subs	r3, #4
 800b92e:	6818      	ldr	r0, [r3, #0]
 800b930:	f000 fa9e 	bl	800be70 <__hi0bits>
 800b934:	2320      	movs	r3, #32
 800b936:	1b1b      	subs	r3, r3, r4
 800b938:	4298      	cmp	r0, r3
 800b93a:	dbe3      	blt.n	800b904 <__gethex+0x404>
 800b93c:	e7ec      	b.n	800b918 <__gethex+0x418>
 800b93e:	46c0      	nop			@ (mov r8, r8)
 800b940:	0800d93e 	.word	0x0800d93e
 800b944:	0800d94f 	.word	0x0800d94f

0800b948 <L_shift>:
 800b948:	2308      	movs	r3, #8
 800b94a:	b570      	push	{r4, r5, r6, lr}
 800b94c:	2520      	movs	r5, #32
 800b94e:	1a9a      	subs	r2, r3, r2
 800b950:	0092      	lsls	r2, r2, #2
 800b952:	1aad      	subs	r5, r5, r2
 800b954:	6843      	ldr	r3, [r0, #4]
 800b956:	6804      	ldr	r4, [r0, #0]
 800b958:	001e      	movs	r6, r3
 800b95a:	40ae      	lsls	r6, r5
 800b95c:	40d3      	lsrs	r3, r2
 800b95e:	4334      	orrs	r4, r6
 800b960:	6004      	str	r4, [r0, #0]
 800b962:	6043      	str	r3, [r0, #4]
 800b964:	3004      	adds	r0, #4
 800b966:	4288      	cmp	r0, r1
 800b968:	d3f4      	bcc.n	800b954 <L_shift+0xc>
 800b96a:	bd70      	pop	{r4, r5, r6, pc}

0800b96c <__match>:
 800b96c:	b530      	push	{r4, r5, lr}
 800b96e:	6803      	ldr	r3, [r0, #0]
 800b970:	780c      	ldrb	r4, [r1, #0]
 800b972:	3301      	adds	r3, #1
 800b974:	2c00      	cmp	r4, #0
 800b976:	d102      	bne.n	800b97e <__match+0x12>
 800b978:	6003      	str	r3, [r0, #0]
 800b97a:	2001      	movs	r0, #1
 800b97c:	bd30      	pop	{r4, r5, pc}
 800b97e:	781a      	ldrb	r2, [r3, #0]
 800b980:	0015      	movs	r5, r2
 800b982:	3d41      	subs	r5, #65	@ 0x41
 800b984:	2d19      	cmp	r5, #25
 800b986:	d800      	bhi.n	800b98a <__match+0x1e>
 800b988:	3220      	adds	r2, #32
 800b98a:	3101      	adds	r1, #1
 800b98c:	42a2      	cmp	r2, r4
 800b98e:	d0ef      	beq.n	800b970 <__match+0x4>
 800b990:	2000      	movs	r0, #0
 800b992:	e7f3      	b.n	800b97c <__match+0x10>

0800b994 <__hexnan>:
 800b994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b996:	680b      	ldr	r3, [r1, #0]
 800b998:	b08b      	sub	sp, #44	@ 0x2c
 800b99a:	9201      	str	r2, [sp, #4]
 800b99c:	9901      	ldr	r1, [sp, #4]
 800b99e:	115a      	asrs	r2, r3, #5
 800b9a0:	0092      	lsls	r2, r2, #2
 800b9a2:	188a      	adds	r2, r1, r2
 800b9a4:	9202      	str	r2, [sp, #8]
 800b9a6:	0019      	movs	r1, r3
 800b9a8:	221f      	movs	r2, #31
 800b9aa:	4011      	ands	r1, r2
 800b9ac:	9008      	str	r0, [sp, #32]
 800b9ae:	9106      	str	r1, [sp, #24]
 800b9b0:	4213      	tst	r3, r2
 800b9b2:	d002      	beq.n	800b9ba <__hexnan+0x26>
 800b9b4:	9b02      	ldr	r3, [sp, #8]
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	9302      	str	r3, [sp, #8]
 800b9ba:	9b02      	ldr	r3, [sp, #8]
 800b9bc:	2500      	movs	r5, #0
 800b9be:	1f1f      	subs	r7, r3, #4
 800b9c0:	003e      	movs	r6, r7
 800b9c2:	003c      	movs	r4, r7
 800b9c4:	9b08      	ldr	r3, [sp, #32]
 800b9c6:	603d      	str	r5, [r7, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	9507      	str	r5, [sp, #28]
 800b9cc:	9305      	str	r3, [sp, #20]
 800b9ce:	9503      	str	r5, [sp, #12]
 800b9d0:	9b05      	ldr	r3, [sp, #20]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9d6:	9b05      	ldr	r3, [sp, #20]
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d028      	beq.n	800ba32 <__hexnan+0x9e>
 800b9e0:	9804      	ldr	r0, [sp, #16]
 800b9e2:	f7ff fd78 	bl	800b4d6 <__hexdig_fun>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d155      	bne.n	800ba96 <__hexnan+0x102>
 800b9ea:	9b04      	ldr	r3, [sp, #16]
 800b9ec:	2b20      	cmp	r3, #32
 800b9ee:	d819      	bhi.n	800ba24 <__hexnan+0x90>
 800b9f0:	9b03      	ldr	r3, [sp, #12]
 800b9f2:	9a07      	ldr	r2, [sp, #28]
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	dd12      	ble.n	800ba1e <__hexnan+0x8a>
 800b9f8:	42b4      	cmp	r4, r6
 800b9fa:	d206      	bcs.n	800ba0a <__hexnan+0x76>
 800b9fc:	2d07      	cmp	r5, #7
 800b9fe:	dc04      	bgt.n	800ba0a <__hexnan+0x76>
 800ba00:	002a      	movs	r2, r5
 800ba02:	0031      	movs	r1, r6
 800ba04:	0020      	movs	r0, r4
 800ba06:	f7ff ff9f 	bl	800b948 <L_shift>
 800ba0a:	9b01      	ldr	r3, [sp, #4]
 800ba0c:	2508      	movs	r5, #8
 800ba0e:	429c      	cmp	r4, r3
 800ba10:	d905      	bls.n	800ba1e <__hexnan+0x8a>
 800ba12:	1f26      	subs	r6, r4, #4
 800ba14:	2500      	movs	r5, #0
 800ba16:	0034      	movs	r4, r6
 800ba18:	9b03      	ldr	r3, [sp, #12]
 800ba1a:	6035      	str	r5, [r6, #0]
 800ba1c:	9307      	str	r3, [sp, #28]
 800ba1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba20:	9305      	str	r3, [sp, #20]
 800ba22:	e7d5      	b.n	800b9d0 <__hexnan+0x3c>
 800ba24:	9b04      	ldr	r3, [sp, #16]
 800ba26:	2b29      	cmp	r3, #41	@ 0x29
 800ba28:	d15a      	bne.n	800bae0 <__hexnan+0x14c>
 800ba2a:	9b05      	ldr	r3, [sp, #20]
 800ba2c:	9a08      	ldr	r2, [sp, #32]
 800ba2e:	3302      	adds	r3, #2
 800ba30:	6013      	str	r3, [r2, #0]
 800ba32:	9b03      	ldr	r3, [sp, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d053      	beq.n	800bae0 <__hexnan+0x14c>
 800ba38:	42b4      	cmp	r4, r6
 800ba3a:	d206      	bcs.n	800ba4a <__hexnan+0xb6>
 800ba3c:	2d07      	cmp	r5, #7
 800ba3e:	dc04      	bgt.n	800ba4a <__hexnan+0xb6>
 800ba40:	002a      	movs	r2, r5
 800ba42:	0031      	movs	r1, r6
 800ba44:	0020      	movs	r0, r4
 800ba46:	f7ff ff7f 	bl	800b948 <L_shift>
 800ba4a:	9b01      	ldr	r3, [sp, #4]
 800ba4c:	429c      	cmp	r4, r3
 800ba4e:	d936      	bls.n	800babe <__hexnan+0x12a>
 800ba50:	001a      	movs	r2, r3
 800ba52:	0023      	movs	r3, r4
 800ba54:	cb02      	ldmia	r3!, {r1}
 800ba56:	c202      	stmia	r2!, {r1}
 800ba58:	429f      	cmp	r7, r3
 800ba5a:	d2fb      	bcs.n	800ba54 <__hexnan+0xc0>
 800ba5c:	9b02      	ldr	r3, [sp, #8]
 800ba5e:	1c61      	adds	r1, r4, #1
 800ba60:	1eda      	subs	r2, r3, #3
 800ba62:	2304      	movs	r3, #4
 800ba64:	4291      	cmp	r1, r2
 800ba66:	d805      	bhi.n	800ba74 <__hexnan+0xe0>
 800ba68:	9b02      	ldr	r3, [sp, #8]
 800ba6a:	3b04      	subs	r3, #4
 800ba6c:	1b1b      	subs	r3, r3, r4
 800ba6e:	089b      	lsrs	r3, r3, #2
 800ba70:	3301      	adds	r3, #1
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	9a01      	ldr	r2, [sp, #4]
 800ba76:	18d3      	adds	r3, r2, r3
 800ba78:	2200      	movs	r2, #0
 800ba7a:	c304      	stmia	r3!, {r2}
 800ba7c:	429f      	cmp	r7, r3
 800ba7e:	d2fc      	bcs.n	800ba7a <__hexnan+0xe6>
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d104      	bne.n	800ba90 <__hexnan+0xfc>
 800ba86:	9b01      	ldr	r3, [sp, #4]
 800ba88:	429f      	cmp	r7, r3
 800ba8a:	d127      	bne.n	800badc <__hexnan+0x148>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	2005      	movs	r0, #5
 800ba92:	b00b      	add	sp, #44	@ 0x2c
 800ba94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba96:	9b03      	ldr	r3, [sp, #12]
 800ba98:	3501      	adds	r5, #1
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	9303      	str	r3, [sp, #12]
 800ba9e:	2d08      	cmp	r5, #8
 800baa0:	dd06      	ble.n	800bab0 <__hexnan+0x11c>
 800baa2:	9b01      	ldr	r3, [sp, #4]
 800baa4:	429c      	cmp	r4, r3
 800baa6:	d9ba      	bls.n	800ba1e <__hexnan+0x8a>
 800baa8:	2300      	movs	r3, #0
 800baaa:	2501      	movs	r5, #1
 800baac:	3c04      	subs	r4, #4
 800baae:	6023      	str	r3, [r4, #0]
 800bab0:	220f      	movs	r2, #15
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	4010      	ands	r0, r2
 800bab6:	011b      	lsls	r3, r3, #4
 800bab8:	4303      	orrs	r3, r0
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	e7af      	b.n	800ba1e <__hexnan+0x8a>
 800babe:	9b06      	ldr	r3, [sp, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d0dd      	beq.n	800ba80 <__hexnan+0xec>
 800bac4:	2320      	movs	r3, #32
 800bac6:	9a06      	ldr	r2, [sp, #24]
 800bac8:	9902      	ldr	r1, [sp, #8]
 800baca:	1a9b      	subs	r3, r3, r2
 800bacc:	2201      	movs	r2, #1
 800bace:	4252      	negs	r2, r2
 800bad0:	40da      	lsrs	r2, r3
 800bad2:	3904      	subs	r1, #4
 800bad4:	680b      	ldr	r3, [r1, #0]
 800bad6:	4013      	ands	r3, r2
 800bad8:	600b      	str	r3, [r1, #0]
 800bada:	e7d1      	b.n	800ba80 <__hexnan+0xec>
 800badc:	3f04      	subs	r7, #4
 800bade:	e7cf      	b.n	800ba80 <__hexnan+0xec>
 800bae0:	2004      	movs	r0, #4
 800bae2:	e7d6      	b.n	800ba92 <__hexnan+0xfe>

0800bae4 <malloc>:
 800bae4:	b510      	push	{r4, lr}
 800bae6:	4b03      	ldr	r3, [pc, #12]	@ (800baf4 <malloc+0x10>)
 800bae8:	0001      	movs	r1, r0
 800baea:	6818      	ldr	r0, [r3, #0]
 800baec:	f000 f826 	bl	800bb3c <_malloc_r>
 800baf0:	bd10      	pop	{r4, pc}
 800baf2:	46c0      	nop			@ (mov r8, r8)
 800baf4:	200001cc 	.word	0x200001cc

0800baf8 <sbrk_aligned>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	4e0f      	ldr	r6, [pc, #60]	@ (800bb38 <sbrk_aligned+0x40>)
 800bafc:	000d      	movs	r5, r1
 800bafe:	6831      	ldr	r1, [r6, #0]
 800bb00:	0004      	movs	r4, r0
 800bb02:	2900      	cmp	r1, #0
 800bb04:	d102      	bne.n	800bb0c <sbrk_aligned+0x14>
 800bb06:	f001 f945 	bl	800cd94 <_sbrk_r>
 800bb0a:	6030      	str	r0, [r6, #0]
 800bb0c:	0029      	movs	r1, r5
 800bb0e:	0020      	movs	r0, r4
 800bb10:	f001 f940 	bl	800cd94 <_sbrk_r>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d103      	bne.n	800bb20 <sbrk_aligned+0x28>
 800bb18:	2501      	movs	r5, #1
 800bb1a:	426d      	negs	r5, r5
 800bb1c:	0028      	movs	r0, r5
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}
 800bb20:	2303      	movs	r3, #3
 800bb22:	1cc5      	adds	r5, r0, #3
 800bb24:	439d      	bics	r5, r3
 800bb26:	42a8      	cmp	r0, r5
 800bb28:	d0f8      	beq.n	800bb1c <sbrk_aligned+0x24>
 800bb2a:	1a29      	subs	r1, r5, r0
 800bb2c:	0020      	movs	r0, r4
 800bb2e:	f001 f931 	bl	800cd94 <_sbrk_r>
 800bb32:	3001      	adds	r0, #1
 800bb34:	d1f2      	bne.n	800bb1c <sbrk_aligned+0x24>
 800bb36:	e7ef      	b.n	800bb18 <sbrk_aligned+0x20>
 800bb38:	200007d0 	.word	0x200007d0

0800bb3c <_malloc_r>:
 800bb3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb3e:	2203      	movs	r2, #3
 800bb40:	1ccb      	adds	r3, r1, #3
 800bb42:	4393      	bics	r3, r2
 800bb44:	3308      	adds	r3, #8
 800bb46:	0005      	movs	r5, r0
 800bb48:	001f      	movs	r7, r3
 800bb4a:	2b0c      	cmp	r3, #12
 800bb4c:	d234      	bcs.n	800bbb8 <_malloc_r+0x7c>
 800bb4e:	270c      	movs	r7, #12
 800bb50:	42b9      	cmp	r1, r7
 800bb52:	d833      	bhi.n	800bbbc <_malloc_r+0x80>
 800bb54:	0028      	movs	r0, r5
 800bb56:	f000 f883 	bl	800bc60 <__malloc_lock>
 800bb5a:	4e37      	ldr	r6, [pc, #220]	@ (800bc38 <_malloc_r+0xfc>)
 800bb5c:	6833      	ldr	r3, [r6, #0]
 800bb5e:	001c      	movs	r4, r3
 800bb60:	2c00      	cmp	r4, #0
 800bb62:	d12f      	bne.n	800bbc4 <_malloc_r+0x88>
 800bb64:	0039      	movs	r1, r7
 800bb66:	0028      	movs	r0, r5
 800bb68:	f7ff ffc6 	bl	800baf8 <sbrk_aligned>
 800bb6c:	0004      	movs	r4, r0
 800bb6e:	1c43      	adds	r3, r0, #1
 800bb70:	d15f      	bne.n	800bc32 <_malloc_r+0xf6>
 800bb72:	6834      	ldr	r4, [r6, #0]
 800bb74:	9400      	str	r4, [sp, #0]
 800bb76:	9b00      	ldr	r3, [sp, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d14a      	bne.n	800bc12 <_malloc_r+0xd6>
 800bb7c:	2c00      	cmp	r4, #0
 800bb7e:	d052      	beq.n	800bc26 <_malloc_r+0xea>
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	0028      	movs	r0, r5
 800bb84:	18e3      	adds	r3, r4, r3
 800bb86:	9900      	ldr	r1, [sp, #0]
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	f001 f903 	bl	800cd94 <_sbrk_r>
 800bb8e:	9b01      	ldr	r3, [sp, #4]
 800bb90:	4283      	cmp	r3, r0
 800bb92:	d148      	bne.n	800bc26 <_malloc_r+0xea>
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	0028      	movs	r0, r5
 800bb98:	1aff      	subs	r7, r7, r3
 800bb9a:	0039      	movs	r1, r7
 800bb9c:	f7ff ffac 	bl	800baf8 <sbrk_aligned>
 800bba0:	3001      	adds	r0, #1
 800bba2:	d040      	beq.n	800bc26 <_malloc_r+0xea>
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	19db      	adds	r3, r3, r7
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	6833      	ldr	r3, [r6, #0]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	2a00      	cmp	r2, #0
 800bbb0:	d133      	bne.n	800bc1a <_malloc_r+0xde>
 800bbb2:	9b00      	ldr	r3, [sp, #0]
 800bbb4:	6033      	str	r3, [r6, #0]
 800bbb6:	e019      	b.n	800bbec <_malloc_r+0xb0>
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	dac9      	bge.n	800bb50 <_malloc_r+0x14>
 800bbbc:	230c      	movs	r3, #12
 800bbbe:	602b      	str	r3, [r5, #0]
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbc4:	6821      	ldr	r1, [r4, #0]
 800bbc6:	1bc9      	subs	r1, r1, r7
 800bbc8:	d420      	bmi.n	800bc0c <_malloc_r+0xd0>
 800bbca:	290b      	cmp	r1, #11
 800bbcc:	d90a      	bls.n	800bbe4 <_malloc_r+0xa8>
 800bbce:	19e2      	adds	r2, r4, r7
 800bbd0:	6027      	str	r7, [r4, #0]
 800bbd2:	42a3      	cmp	r3, r4
 800bbd4:	d104      	bne.n	800bbe0 <_malloc_r+0xa4>
 800bbd6:	6032      	str	r2, [r6, #0]
 800bbd8:	6863      	ldr	r3, [r4, #4]
 800bbda:	6011      	str	r1, [r2, #0]
 800bbdc:	6053      	str	r3, [r2, #4]
 800bbde:	e005      	b.n	800bbec <_malloc_r+0xb0>
 800bbe0:	605a      	str	r2, [r3, #4]
 800bbe2:	e7f9      	b.n	800bbd8 <_malloc_r+0x9c>
 800bbe4:	6862      	ldr	r2, [r4, #4]
 800bbe6:	42a3      	cmp	r3, r4
 800bbe8:	d10e      	bne.n	800bc08 <_malloc_r+0xcc>
 800bbea:	6032      	str	r2, [r6, #0]
 800bbec:	0028      	movs	r0, r5
 800bbee:	f000 f83f 	bl	800bc70 <__malloc_unlock>
 800bbf2:	0020      	movs	r0, r4
 800bbf4:	2207      	movs	r2, #7
 800bbf6:	300b      	adds	r0, #11
 800bbf8:	1d23      	adds	r3, r4, #4
 800bbfa:	4390      	bics	r0, r2
 800bbfc:	1ac2      	subs	r2, r0, r3
 800bbfe:	4298      	cmp	r0, r3
 800bc00:	d0df      	beq.n	800bbc2 <_malloc_r+0x86>
 800bc02:	1a1b      	subs	r3, r3, r0
 800bc04:	50a3      	str	r3, [r4, r2]
 800bc06:	e7dc      	b.n	800bbc2 <_malloc_r+0x86>
 800bc08:	605a      	str	r2, [r3, #4]
 800bc0a:	e7ef      	b.n	800bbec <_malloc_r+0xb0>
 800bc0c:	0023      	movs	r3, r4
 800bc0e:	6864      	ldr	r4, [r4, #4]
 800bc10:	e7a6      	b.n	800bb60 <_malloc_r+0x24>
 800bc12:	9c00      	ldr	r4, [sp, #0]
 800bc14:	6863      	ldr	r3, [r4, #4]
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	e7ad      	b.n	800bb76 <_malloc_r+0x3a>
 800bc1a:	001a      	movs	r2, r3
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	42a3      	cmp	r3, r4
 800bc20:	d1fb      	bne.n	800bc1a <_malloc_r+0xde>
 800bc22:	2300      	movs	r3, #0
 800bc24:	e7da      	b.n	800bbdc <_malloc_r+0xa0>
 800bc26:	230c      	movs	r3, #12
 800bc28:	0028      	movs	r0, r5
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	f000 f820 	bl	800bc70 <__malloc_unlock>
 800bc30:	e7c6      	b.n	800bbc0 <_malloc_r+0x84>
 800bc32:	6007      	str	r7, [r0, #0]
 800bc34:	e7da      	b.n	800bbec <_malloc_r+0xb0>
 800bc36:	46c0      	nop			@ (mov r8, r8)
 800bc38:	200007d4 	.word	0x200007d4

0800bc3c <__ascii_mbtowc>:
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	2900      	cmp	r1, #0
 800bc40:	d100      	bne.n	800bc44 <__ascii_mbtowc+0x8>
 800bc42:	a901      	add	r1, sp, #4
 800bc44:	1e10      	subs	r0, r2, #0
 800bc46:	d006      	beq.n	800bc56 <__ascii_mbtowc+0x1a>
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d006      	beq.n	800bc5a <__ascii_mbtowc+0x1e>
 800bc4c:	7813      	ldrb	r3, [r2, #0]
 800bc4e:	600b      	str	r3, [r1, #0]
 800bc50:	7810      	ldrb	r0, [r2, #0]
 800bc52:	1e43      	subs	r3, r0, #1
 800bc54:	4198      	sbcs	r0, r3
 800bc56:	b002      	add	sp, #8
 800bc58:	4770      	bx	lr
 800bc5a:	2002      	movs	r0, #2
 800bc5c:	4240      	negs	r0, r0
 800bc5e:	e7fa      	b.n	800bc56 <__ascii_mbtowc+0x1a>

0800bc60 <__malloc_lock>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	4802      	ldr	r0, [pc, #8]	@ (800bc6c <__malloc_lock+0xc>)
 800bc64:	f7ff fb6b 	bl	800b33e <__retarget_lock_acquire_recursive>
 800bc68:	bd10      	pop	{r4, pc}
 800bc6a:	46c0      	nop			@ (mov r8, r8)
 800bc6c:	200007cc 	.word	0x200007cc

0800bc70 <__malloc_unlock>:
 800bc70:	b510      	push	{r4, lr}
 800bc72:	4802      	ldr	r0, [pc, #8]	@ (800bc7c <__malloc_unlock+0xc>)
 800bc74:	f7ff fb64 	bl	800b340 <__retarget_lock_release_recursive>
 800bc78:	bd10      	pop	{r4, pc}
 800bc7a:	46c0      	nop			@ (mov r8, r8)
 800bc7c:	200007cc 	.word	0x200007cc

0800bc80 <_Balloc>:
 800bc80:	b570      	push	{r4, r5, r6, lr}
 800bc82:	69c5      	ldr	r5, [r0, #28]
 800bc84:	0006      	movs	r6, r0
 800bc86:	000c      	movs	r4, r1
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	d10e      	bne.n	800bcaa <_Balloc+0x2a>
 800bc8c:	2010      	movs	r0, #16
 800bc8e:	f7ff ff29 	bl	800bae4 <malloc>
 800bc92:	1e02      	subs	r2, r0, #0
 800bc94:	61f0      	str	r0, [r6, #28]
 800bc96:	d104      	bne.n	800bca2 <_Balloc+0x22>
 800bc98:	216b      	movs	r1, #107	@ 0x6b
 800bc9a:	4b19      	ldr	r3, [pc, #100]	@ (800bd00 <_Balloc+0x80>)
 800bc9c:	4819      	ldr	r0, [pc, #100]	@ (800bd04 <_Balloc+0x84>)
 800bc9e:	f7ff fb5f 	bl	800b360 <__assert_func>
 800bca2:	6045      	str	r5, [r0, #4]
 800bca4:	6085      	str	r5, [r0, #8]
 800bca6:	6005      	str	r5, [r0, #0]
 800bca8:	60c5      	str	r5, [r0, #12]
 800bcaa:	69f5      	ldr	r5, [r6, #28]
 800bcac:	68eb      	ldr	r3, [r5, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d013      	beq.n	800bcda <_Balloc+0x5a>
 800bcb2:	69f3      	ldr	r3, [r6, #28]
 800bcb4:	00a2      	lsls	r2, r4, #2
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	189b      	adds	r3, r3, r2
 800bcba:	6818      	ldr	r0, [r3, #0]
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d118      	bne.n	800bcf2 <_Balloc+0x72>
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	000d      	movs	r5, r1
 800bcc4:	40a5      	lsls	r5, r4
 800bcc6:	1d6a      	adds	r2, r5, #5
 800bcc8:	0030      	movs	r0, r6
 800bcca:	0092      	lsls	r2, r2, #2
 800bccc:	f001 f886 	bl	800cddc <_calloc_r>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d00c      	beq.n	800bcee <_Balloc+0x6e>
 800bcd4:	6044      	str	r4, [r0, #4]
 800bcd6:	6085      	str	r5, [r0, #8]
 800bcd8:	e00d      	b.n	800bcf6 <_Balloc+0x76>
 800bcda:	2221      	movs	r2, #33	@ 0x21
 800bcdc:	2104      	movs	r1, #4
 800bcde:	0030      	movs	r0, r6
 800bce0:	f001 f87c 	bl	800cddc <_calloc_r>
 800bce4:	69f3      	ldr	r3, [r6, #28]
 800bce6:	60e8      	str	r0, [r5, #12]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1e1      	bne.n	800bcb2 <_Balloc+0x32>
 800bcee:	2000      	movs	r0, #0
 800bcf0:	bd70      	pop	{r4, r5, r6, pc}
 800bcf2:	6802      	ldr	r2, [r0, #0]
 800bcf4:	601a      	str	r2, [r3, #0]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	6103      	str	r3, [r0, #16]
 800bcfa:	60c3      	str	r3, [r0, #12]
 800bcfc:	e7f8      	b.n	800bcf0 <_Balloc+0x70>
 800bcfe:	46c0      	nop			@ (mov r8, r8)
 800bd00:	0800d889 	.word	0x0800d889
 800bd04:	0800d9af 	.word	0x0800d9af

0800bd08 <_Bfree>:
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	69c6      	ldr	r6, [r0, #28]
 800bd0c:	0005      	movs	r5, r0
 800bd0e:	000c      	movs	r4, r1
 800bd10:	2e00      	cmp	r6, #0
 800bd12:	d10e      	bne.n	800bd32 <_Bfree+0x2a>
 800bd14:	2010      	movs	r0, #16
 800bd16:	f7ff fee5 	bl	800bae4 <malloc>
 800bd1a:	1e02      	subs	r2, r0, #0
 800bd1c:	61e8      	str	r0, [r5, #28]
 800bd1e:	d104      	bne.n	800bd2a <_Bfree+0x22>
 800bd20:	218f      	movs	r1, #143	@ 0x8f
 800bd22:	4b09      	ldr	r3, [pc, #36]	@ (800bd48 <_Bfree+0x40>)
 800bd24:	4809      	ldr	r0, [pc, #36]	@ (800bd4c <_Bfree+0x44>)
 800bd26:	f7ff fb1b 	bl	800b360 <__assert_func>
 800bd2a:	6046      	str	r6, [r0, #4]
 800bd2c:	6086      	str	r6, [r0, #8]
 800bd2e:	6006      	str	r6, [r0, #0]
 800bd30:	60c6      	str	r6, [r0, #12]
 800bd32:	2c00      	cmp	r4, #0
 800bd34:	d007      	beq.n	800bd46 <_Bfree+0x3e>
 800bd36:	69eb      	ldr	r3, [r5, #28]
 800bd38:	6862      	ldr	r2, [r4, #4]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	0092      	lsls	r2, r2, #2
 800bd3e:	189b      	adds	r3, r3, r2
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	6022      	str	r2, [r4, #0]
 800bd44:	601c      	str	r4, [r3, #0]
 800bd46:	bd70      	pop	{r4, r5, r6, pc}
 800bd48:	0800d889 	.word	0x0800d889
 800bd4c:	0800d9af 	.word	0x0800d9af

0800bd50 <__multadd>:
 800bd50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd52:	000f      	movs	r7, r1
 800bd54:	9001      	str	r0, [sp, #4]
 800bd56:	000c      	movs	r4, r1
 800bd58:	001e      	movs	r6, r3
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	690d      	ldr	r5, [r1, #16]
 800bd5e:	3714      	adds	r7, #20
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	3001      	adds	r0, #1
 800bd64:	b299      	uxth	r1, r3
 800bd66:	4351      	muls	r1, r2
 800bd68:	0c1b      	lsrs	r3, r3, #16
 800bd6a:	4353      	muls	r3, r2
 800bd6c:	1989      	adds	r1, r1, r6
 800bd6e:	0c0e      	lsrs	r6, r1, #16
 800bd70:	199b      	adds	r3, r3, r6
 800bd72:	0c1e      	lsrs	r6, r3, #16
 800bd74:	b289      	uxth	r1, r1
 800bd76:	041b      	lsls	r3, r3, #16
 800bd78:	185b      	adds	r3, r3, r1
 800bd7a:	c708      	stmia	r7!, {r3}
 800bd7c:	4285      	cmp	r5, r0
 800bd7e:	dcef      	bgt.n	800bd60 <__multadd+0x10>
 800bd80:	2e00      	cmp	r6, #0
 800bd82:	d022      	beq.n	800bdca <__multadd+0x7a>
 800bd84:	68a3      	ldr	r3, [r4, #8]
 800bd86:	42ab      	cmp	r3, r5
 800bd88:	dc19      	bgt.n	800bdbe <__multadd+0x6e>
 800bd8a:	6861      	ldr	r1, [r4, #4]
 800bd8c:	9801      	ldr	r0, [sp, #4]
 800bd8e:	3101      	adds	r1, #1
 800bd90:	f7ff ff76 	bl	800bc80 <_Balloc>
 800bd94:	1e07      	subs	r7, r0, #0
 800bd96:	d105      	bne.n	800bda4 <__multadd+0x54>
 800bd98:	003a      	movs	r2, r7
 800bd9a:	21ba      	movs	r1, #186	@ 0xba
 800bd9c:	4b0c      	ldr	r3, [pc, #48]	@ (800bdd0 <__multadd+0x80>)
 800bd9e:	480d      	ldr	r0, [pc, #52]	@ (800bdd4 <__multadd+0x84>)
 800bda0:	f7ff fade 	bl	800b360 <__assert_func>
 800bda4:	0021      	movs	r1, r4
 800bda6:	6922      	ldr	r2, [r4, #16]
 800bda8:	310c      	adds	r1, #12
 800bdaa:	3202      	adds	r2, #2
 800bdac:	0092      	lsls	r2, r2, #2
 800bdae:	300c      	adds	r0, #12
 800bdb0:	f7ff fac7 	bl	800b342 <memcpy>
 800bdb4:	0021      	movs	r1, r4
 800bdb6:	9801      	ldr	r0, [sp, #4]
 800bdb8:	f7ff ffa6 	bl	800bd08 <_Bfree>
 800bdbc:	003c      	movs	r4, r7
 800bdbe:	1d2b      	adds	r3, r5, #4
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	18e3      	adds	r3, r4, r3
 800bdc4:	3501      	adds	r5, #1
 800bdc6:	605e      	str	r6, [r3, #4]
 800bdc8:	6125      	str	r5, [r4, #16]
 800bdca:	0020      	movs	r0, r4
 800bdcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bdce:	46c0      	nop			@ (mov r8, r8)
 800bdd0:	0800d93e 	.word	0x0800d93e
 800bdd4:	0800d9af 	.word	0x0800d9af

0800bdd8 <__s2b>:
 800bdd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdda:	0007      	movs	r7, r0
 800bddc:	0018      	movs	r0, r3
 800bdde:	000c      	movs	r4, r1
 800bde0:	3008      	adds	r0, #8
 800bde2:	2109      	movs	r1, #9
 800bde4:	9301      	str	r3, [sp, #4]
 800bde6:	0015      	movs	r5, r2
 800bde8:	f7f4 fa3e 	bl	8000268 <__divsi3>
 800bdec:	2301      	movs	r3, #1
 800bdee:	2100      	movs	r1, #0
 800bdf0:	4283      	cmp	r3, r0
 800bdf2:	db0a      	blt.n	800be0a <__s2b+0x32>
 800bdf4:	0038      	movs	r0, r7
 800bdf6:	f7ff ff43 	bl	800bc80 <_Balloc>
 800bdfa:	1e01      	subs	r1, r0, #0
 800bdfc:	d108      	bne.n	800be10 <__s2b+0x38>
 800bdfe:	000a      	movs	r2, r1
 800be00:	4b19      	ldr	r3, [pc, #100]	@ (800be68 <__s2b+0x90>)
 800be02:	481a      	ldr	r0, [pc, #104]	@ (800be6c <__s2b+0x94>)
 800be04:	31d3      	adds	r1, #211	@ 0xd3
 800be06:	f7ff faab 	bl	800b360 <__assert_func>
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	3101      	adds	r1, #1
 800be0e:	e7ef      	b.n	800bdf0 <__s2b+0x18>
 800be10:	9b08      	ldr	r3, [sp, #32]
 800be12:	6143      	str	r3, [r0, #20]
 800be14:	2301      	movs	r3, #1
 800be16:	6103      	str	r3, [r0, #16]
 800be18:	2d09      	cmp	r5, #9
 800be1a:	dd18      	ble.n	800be4e <__s2b+0x76>
 800be1c:	0023      	movs	r3, r4
 800be1e:	3309      	adds	r3, #9
 800be20:	001e      	movs	r6, r3
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	1964      	adds	r4, r4, r5
 800be26:	7833      	ldrb	r3, [r6, #0]
 800be28:	220a      	movs	r2, #10
 800be2a:	0038      	movs	r0, r7
 800be2c:	3b30      	subs	r3, #48	@ 0x30
 800be2e:	f7ff ff8f 	bl	800bd50 <__multadd>
 800be32:	3601      	adds	r6, #1
 800be34:	0001      	movs	r1, r0
 800be36:	42a6      	cmp	r6, r4
 800be38:	d1f5      	bne.n	800be26 <__s2b+0x4e>
 800be3a:	002c      	movs	r4, r5
 800be3c:	9b00      	ldr	r3, [sp, #0]
 800be3e:	3c08      	subs	r4, #8
 800be40:	191c      	adds	r4, r3, r4
 800be42:	002e      	movs	r6, r5
 800be44:	9b01      	ldr	r3, [sp, #4]
 800be46:	429e      	cmp	r6, r3
 800be48:	db04      	blt.n	800be54 <__s2b+0x7c>
 800be4a:	0008      	movs	r0, r1
 800be4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be4e:	2509      	movs	r5, #9
 800be50:	340a      	adds	r4, #10
 800be52:	e7f6      	b.n	800be42 <__s2b+0x6a>
 800be54:	1b63      	subs	r3, r4, r5
 800be56:	5d9b      	ldrb	r3, [r3, r6]
 800be58:	220a      	movs	r2, #10
 800be5a:	0038      	movs	r0, r7
 800be5c:	3b30      	subs	r3, #48	@ 0x30
 800be5e:	f7ff ff77 	bl	800bd50 <__multadd>
 800be62:	3601      	adds	r6, #1
 800be64:	0001      	movs	r1, r0
 800be66:	e7ed      	b.n	800be44 <__s2b+0x6c>
 800be68:	0800d93e 	.word	0x0800d93e
 800be6c:	0800d9af 	.word	0x0800d9af

0800be70 <__hi0bits>:
 800be70:	2280      	movs	r2, #128	@ 0x80
 800be72:	0003      	movs	r3, r0
 800be74:	0252      	lsls	r2, r2, #9
 800be76:	2000      	movs	r0, #0
 800be78:	4293      	cmp	r3, r2
 800be7a:	d201      	bcs.n	800be80 <__hi0bits+0x10>
 800be7c:	041b      	lsls	r3, r3, #16
 800be7e:	3010      	adds	r0, #16
 800be80:	2280      	movs	r2, #128	@ 0x80
 800be82:	0452      	lsls	r2, r2, #17
 800be84:	4293      	cmp	r3, r2
 800be86:	d201      	bcs.n	800be8c <__hi0bits+0x1c>
 800be88:	3008      	adds	r0, #8
 800be8a:	021b      	lsls	r3, r3, #8
 800be8c:	2280      	movs	r2, #128	@ 0x80
 800be8e:	0552      	lsls	r2, r2, #21
 800be90:	4293      	cmp	r3, r2
 800be92:	d201      	bcs.n	800be98 <__hi0bits+0x28>
 800be94:	3004      	adds	r0, #4
 800be96:	011b      	lsls	r3, r3, #4
 800be98:	2280      	movs	r2, #128	@ 0x80
 800be9a:	05d2      	lsls	r2, r2, #23
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d201      	bcs.n	800bea4 <__hi0bits+0x34>
 800bea0:	3002      	adds	r0, #2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	db03      	blt.n	800beb0 <__hi0bits+0x40>
 800bea8:	3001      	adds	r0, #1
 800beaa:	4213      	tst	r3, r2
 800beac:	d100      	bne.n	800beb0 <__hi0bits+0x40>
 800beae:	2020      	movs	r0, #32
 800beb0:	4770      	bx	lr

0800beb2 <__lo0bits>:
 800beb2:	6803      	ldr	r3, [r0, #0]
 800beb4:	0001      	movs	r1, r0
 800beb6:	2207      	movs	r2, #7
 800beb8:	0018      	movs	r0, r3
 800beba:	4010      	ands	r0, r2
 800bebc:	4213      	tst	r3, r2
 800bebe:	d00d      	beq.n	800bedc <__lo0bits+0x2a>
 800bec0:	3a06      	subs	r2, #6
 800bec2:	2000      	movs	r0, #0
 800bec4:	4213      	tst	r3, r2
 800bec6:	d105      	bne.n	800bed4 <__lo0bits+0x22>
 800bec8:	3002      	adds	r0, #2
 800beca:	4203      	tst	r3, r0
 800becc:	d003      	beq.n	800bed6 <__lo0bits+0x24>
 800bece:	40d3      	lsrs	r3, r2
 800bed0:	0010      	movs	r0, r2
 800bed2:	600b      	str	r3, [r1, #0]
 800bed4:	4770      	bx	lr
 800bed6:	089b      	lsrs	r3, r3, #2
 800bed8:	600b      	str	r3, [r1, #0]
 800beda:	e7fb      	b.n	800bed4 <__lo0bits+0x22>
 800bedc:	b29a      	uxth	r2, r3
 800bede:	2a00      	cmp	r2, #0
 800bee0:	d101      	bne.n	800bee6 <__lo0bits+0x34>
 800bee2:	2010      	movs	r0, #16
 800bee4:	0c1b      	lsrs	r3, r3, #16
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	2a00      	cmp	r2, #0
 800beea:	d101      	bne.n	800bef0 <__lo0bits+0x3e>
 800beec:	3008      	adds	r0, #8
 800beee:	0a1b      	lsrs	r3, r3, #8
 800bef0:	071a      	lsls	r2, r3, #28
 800bef2:	d101      	bne.n	800bef8 <__lo0bits+0x46>
 800bef4:	3004      	adds	r0, #4
 800bef6:	091b      	lsrs	r3, r3, #4
 800bef8:	079a      	lsls	r2, r3, #30
 800befa:	d101      	bne.n	800bf00 <__lo0bits+0x4e>
 800befc:	3002      	adds	r0, #2
 800befe:	089b      	lsrs	r3, r3, #2
 800bf00:	07da      	lsls	r2, r3, #31
 800bf02:	d4e9      	bmi.n	800bed8 <__lo0bits+0x26>
 800bf04:	3001      	adds	r0, #1
 800bf06:	085b      	lsrs	r3, r3, #1
 800bf08:	d1e6      	bne.n	800bed8 <__lo0bits+0x26>
 800bf0a:	2020      	movs	r0, #32
 800bf0c:	e7e2      	b.n	800bed4 <__lo0bits+0x22>
	...

0800bf10 <__i2b>:
 800bf10:	b510      	push	{r4, lr}
 800bf12:	000c      	movs	r4, r1
 800bf14:	2101      	movs	r1, #1
 800bf16:	f7ff feb3 	bl	800bc80 <_Balloc>
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	d107      	bne.n	800bf2e <__i2b+0x1e>
 800bf1e:	2146      	movs	r1, #70	@ 0x46
 800bf20:	4c05      	ldr	r4, [pc, #20]	@ (800bf38 <__i2b+0x28>)
 800bf22:	0002      	movs	r2, r0
 800bf24:	4b05      	ldr	r3, [pc, #20]	@ (800bf3c <__i2b+0x2c>)
 800bf26:	0020      	movs	r0, r4
 800bf28:	31ff      	adds	r1, #255	@ 0xff
 800bf2a:	f7ff fa19 	bl	800b360 <__assert_func>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	6144      	str	r4, [r0, #20]
 800bf32:	6103      	str	r3, [r0, #16]
 800bf34:	bd10      	pop	{r4, pc}
 800bf36:	46c0      	nop			@ (mov r8, r8)
 800bf38:	0800d9af 	.word	0x0800d9af
 800bf3c:	0800d93e 	.word	0x0800d93e

0800bf40 <__multiply>:
 800bf40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf42:	0014      	movs	r4, r2
 800bf44:	690a      	ldr	r2, [r1, #16]
 800bf46:	6923      	ldr	r3, [r4, #16]
 800bf48:	000d      	movs	r5, r1
 800bf4a:	b08b      	sub	sp, #44	@ 0x2c
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	db02      	blt.n	800bf56 <__multiply+0x16>
 800bf50:	0023      	movs	r3, r4
 800bf52:	000c      	movs	r4, r1
 800bf54:	001d      	movs	r5, r3
 800bf56:	6927      	ldr	r7, [r4, #16]
 800bf58:	692e      	ldr	r6, [r5, #16]
 800bf5a:	6861      	ldr	r1, [r4, #4]
 800bf5c:	19bb      	adds	r3, r7, r6
 800bf5e:	9303      	str	r3, [sp, #12]
 800bf60:	68a3      	ldr	r3, [r4, #8]
 800bf62:	19ba      	adds	r2, r7, r6
 800bf64:	4293      	cmp	r3, r2
 800bf66:	da00      	bge.n	800bf6a <__multiply+0x2a>
 800bf68:	3101      	adds	r1, #1
 800bf6a:	f7ff fe89 	bl	800bc80 <_Balloc>
 800bf6e:	9002      	str	r0, [sp, #8]
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d106      	bne.n	800bf82 <__multiply+0x42>
 800bf74:	21b1      	movs	r1, #177	@ 0xb1
 800bf76:	4b49      	ldr	r3, [pc, #292]	@ (800c09c <__multiply+0x15c>)
 800bf78:	4849      	ldr	r0, [pc, #292]	@ (800c0a0 <__multiply+0x160>)
 800bf7a:	9a02      	ldr	r2, [sp, #8]
 800bf7c:	0049      	lsls	r1, r1, #1
 800bf7e:	f7ff f9ef 	bl	800b360 <__assert_func>
 800bf82:	9b02      	ldr	r3, [sp, #8]
 800bf84:	2200      	movs	r2, #0
 800bf86:	3314      	adds	r3, #20
 800bf88:	469c      	mov	ip, r3
 800bf8a:	19bb      	adds	r3, r7, r6
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4463      	add	r3, ip
 800bf90:	9304      	str	r3, [sp, #16]
 800bf92:	4663      	mov	r3, ip
 800bf94:	9904      	ldr	r1, [sp, #16]
 800bf96:	428b      	cmp	r3, r1
 800bf98:	d32a      	bcc.n	800bff0 <__multiply+0xb0>
 800bf9a:	0023      	movs	r3, r4
 800bf9c:	00bf      	lsls	r7, r7, #2
 800bf9e:	3314      	adds	r3, #20
 800bfa0:	3514      	adds	r5, #20
 800bfa2:	9308      	str	r3, [sp, #32]
 800bfa4:	00b6      	lsls	r6, r6, #2
 800bfa6:	19db      	adds	r3, r3, r7
 800bfa8:	9305      	str	r3, [sp, #20]
 800bfaa:	19ab      	adds	r3, r5, r6
 800bfac:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfae:	2304      	movs	r3, #4
 800bfb0:	9306      	str	r3, [sp, #24]
 800bfb2:	0023      	movs	r3, r4
 800bfb4:	9a05      	ldr	r2, [sp, #20]
 800bfb6:	3315      	adds	r3, #21
 800bfb8:	9501      	str	r5, [sp, #4]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d305      	bcc.n	800bfca <__multiply+0x8a>
 800bfbe:	1b13      	subs	r3, r2, r4
 800bfc0:	3b15      	subs	r3, #21
 800bfc2:	089b      	lsrs	r3, r3, #2
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	9306      	str	r3, [sp, #24]
 800bfca:	9b01      	ldr	r3, [sp, #4]
 800bfcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d310      	bcc.n	800bff4 <__multiply+0xb4>
 800bfd2:	9b03      	ldr	r3, [sp, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	dd05      	ble.n	800bfe4 <__multiply+0xa4>
 800bfd8:	9b04      	ldr	r3, [sp, #16]
 800bfda:	3b04      	subs	r3, #4
 800bfdc:	9304      	str	r3, [sp, #16]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d056      	beq.n	800c092 <__multiply+0x152>
 800bfe4:	9b02      	ldr	r3, [sp, #8]
 800bfe6:	9a03      	ldr	r2, [sp, #12]
 800bfe8:	0018      	movs	r0, r3
 800bfea:	611a      	str	r2, [r3, #16]
 800bfec:	b00b      	add	sp, #44	@ 0x2c
 800bfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bff0:	c304      	stmia	r3!, {r2}
 800bff2:	e7cf      	b.n	800bf94 <__multiply+0x54>
 800bff4:	9b01      	ldr	r3, [sp, #4]
 800bff6:	6818      	ldr	r0, [r3, #0]
 800bff8:	b280      	uxth	r0, r0
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d01e      	beq.n	800c03c <__multiply+0xfc>
 800bffe:	4667      	mov	r7, ip
 800c000:	2500      	movs	r5, #0
 800c002:	9e08      	ldr	r6, [sp, #32]
 800c004:	ce02      	ldmia	r6!, {r1}
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	9307      	str	r3, [sp, #28]
 800c00a:	b28b      	uxth	r3, r1
 800c00c:	4343      	muls	r3, r0
 800c00e:	001a      	movs	r2, r3
 800c010:	466b      	mov	r3, sp
 800c012:	0c09      	lsrs	r1, r1, #16
 800c014:	8b9b      	ldrh	r3, [r3, #28]
 800c016:	4341      	muls	r1, r0
 800c018:	18d3      	adds	r3, r2, r3
 800c01a:	9a07      	ldr	r2, [sp, #28]
 800c01c:	195b      	adds	r3, r3, r5
 800c01e:	0c12      	lsrs	r2, r2, #16
 800c020:	1889      	adds	r1, r1, r2
 800c022:	0c1a      	lsrs	r2, r3, #16
 800c024:	188a      	adds	r2, r1, r2
 800c026:	b29b      	uxth	r3, r3
 800c028:	0c15      	lsrs	r5, r2, #16
 800c02a:	0412      	lsls	r2, r2, #16
 800c02c:	431a      	orrs	r2, r3
 800c02e:	9b05      	ldr	r3, [sp, #20]
 800c030:	c704      	stmia	r7!, {r2}
 800c032:	42b3      	cmp	r3, r6
 800c034:	d8e6      	bhi.n	800c004 <__multiply+0xc4>
 800c036:	4663      	mov	r3, ip
 800c038:	9a06      	ldr	r2, [sp, #24]
 800c03a:	509d      	str	r5, [r3, r2]
 800c03c:	9b01      	ldr	r3, [sp, #4]
 800c03e:	6818      	ldr	r0, [r3, #0]
 800c040:	0c00      	lsrs	r0, r0, #16
 800c042:	d020      	beq.n	800c086 <__multiply+0x146>
 800c044:	4663      	mov	r3, ip
 800c046:	0025      	movs	r5, r4
 800c048:	4661      	mov	r1, ip
 800c04a:	2700      	movs	r7, #0
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3514      	adds	r5, #20
 800c050:	682a      	ldr	r2, [r5, #0]
 800c052:	680e      	ldr	r6, [r1, #0]
 800c054:	b292      	uxth	r2, r2
 800c056:	4342      	muls	r2, r0
 800c058:	0c36      	lsrs	r6, r6, #16
 800c05a:	1992      	adds	r2, r2, r6
 800c05c:	19d2      	adds	r2, r2, r7
 800c05e:	0416      	lsls	r6, r2, #16
 800c060:	b29b      	uxth	r3, r3
 800c062:	431e      	orrs	r6, r3
 800c064:	600e      	str	r6, [r1, #0]
 800c066:	cd40      	ldmia	r5!, {r6}
 800c068:	684b      	ldr	r3, [r1, #4]
 800c06a:	0c36      	lsrs	r6, r6, #16
 800c06c:	4346      	muls	r6, r0
 800c06e:	b29b      	uxth	r3, r3
 800c070:	0c12      	lsrs	r2, r2, #16
 800c072:	18f3      	adds	r3, r6, r3
 800c074:	189b      	adds	r3, r3, r2
 800c076:	9a05      	ldr	r2, [sp, #20]
 800c078:	0c1f      	lsrs	r7, r3, #16
 800c07a:	3104      	adds	r1, #4
 800c07c:	42aa      	cmp	r2, r5
 800c07e:	d8e7      	bhi.n	800c050 <__multiply+0x110>
 800c080:	4662      	mov	r2, ip
 800c082:	9906      	ldr	r1, [sp, #24]
 800c084:	5053      	str	r3, [r2, r1]
 800c086:	9b01      	ldr	r3, [sp, #4]
 800c088:	3304      	adds	r3, #4
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	2304      	movs	r3, #4
 800c08e:	449c      	add	ip, r3
 800c090:	e79b      	b.n	800bfca <__multiply+0x8a>
 800c092:	9b03      	ldr	r3, [sp, #12]
 800c094:	3b01      	subs	r3, #1
 800c096:	9303      	str	r3, [sp, #12]
 800c098:	e79b      	b.n	800bfd2 <__multiply+0x92>
 800c09a:	46c0      	nop			@ (mov r8, r8)
 800c09c:	0800d93e 	.word	0x0800d93e
 800c0a0:	0800d9af 	.word	0x0800d9af

0800c0a4 <__pow5mult>:
 800c0a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	0015      	movs	r5, r2
 800c0aa:	0007      	movs	r7, r0
 800c0ac:	000e      	movs	r6, r1
 800c0ae:	401a      	ands	r2, r3
 800c0b0:	421d      	tst	r5, r3
 800c0b2:	d008      	beq.n	800c0c6 <__pow5mult+0x22>
 800c0b4:	4925      	ldr	r1, [pc, #148]	@ (800c14c <__pow5mult+0xa8>)
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	0092      	lsls	r2, r2, #2
 800c0ba:	5852      	ldr	r2, [r2, r1]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	0031      	movs	r1, r6
 800c0c0:	f7ff fe46 	bl	800bd50 <__multadd>
 800c0c4:	0006      	movs	r6, r0
 800c0c6:	10ad      	asrs	r5, r5, #2
 800c0c8:	d03d      	beq.n	800c146 <__pow5mult+0xa2>
 800c0ca:	69fc      	ldr	r4, [r7, #28]
 800c0cc:	2c00      	cmp	r4, #0
 800c0ce:	d10f      	bne.n	800c0f0 <__pow5mult+0x4c>
 800c0d0:	2010      	movs	r0, #16
 800c0d2:	f7ff fd07 	bl	800bae4 <malloc>
 800c0d6:	1e02      	subs	r2, r0, #0
 800c0d8:	61f8      	str	r0, [r7, #28]
 800c0da:	d105      	bne.n	800c0e8 <__pow5mult+0x44>
 800c0dc:	21b4      	movs	r1, #180	@ 0xb4
 800c0de:	4b1c      	ldr	r3, [pc, #112]	@ (800c150 <__pow5mult+0xac>)
 800c0e0:	481c      	ldr	r0, [pc, #112]	@ (800c154 <__pow5mult+0xb0>)
 800c0e2:	31ff      	adds	r1, #255	@ 0xff
 800c0e4:	f7ff f93c 	bl	800b360 <__assert_func>
 800c0e8:	6044      	str	r4, [r0, #4]
 800c0ea:	6084      	str	r4, [r0, #8]
 800c0ec:	6004      	str	r4, [r0, #0]
 800c0ee:	60c4      	str	r4, [r0, #12]
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	689c      	ldr	r4, [r3, #8]
 800c0f4:	9301      	str	r3, [sp, #4]
 800c0f6:	2c00      	cmp	r4, #0
 800c0f8:	d108      	bne.n	800c10c <__pow5mult+0x68>
 800c0fa:	0038      	movs	r0, r7
 800c0fc:	4916      	ldr	r1, [pc, #88]	@ (800c158 <__pow5mult+0xb4>)
 800c0fe:	f7ff ff07 	bl	800bf10 <__i2b>
 800c102:	9b01      	ldr	r3, [sp, #4]
 800c104:	0004      	movs	r4, r0
 800c106:	6098      	str	r0, [r3, #8]
 800c108:	2300      	movs	r3, #0
 800c10a:	6003      	str	r3, [r0, #0]
 800c10c:	2301      	movs	r3, #1
 800c10e:	421d      	tst	r5, r3
 800c110:	d00a      	beq.n	800c128 <__pow5mult+0x84>
 800c112:	0031      	movs	r1, r6
 800c114:	0022      	movs	r2, r4
 800c116:	0038      	movs	r0, r7
 800c118:	f7ff ff12 	bl	800bf40 <__multiply>
 800c11c:	0031      	movs	r1, r6
 800c11e:	9001      	str	r0, [sp, #4]
 800c120:	0038      	movs	r0, r7
 800c122:	f7ff fdf1 	bl	800bd08 <_Bfree>
 800c126:	9e01      	ldr	r6, [sp, #4]
 800c128:	106d      	asrs	r5, r5, #1
 800c12a:	d00c      	beq.n	800c146 <__pow5mult+0xa2>
 800c12c:	6820      	ldr	r0, [r4, #0]
 800c12e:	2800      	cmp	r0, #0
 800c130:	d107      	bne.n	800c142 <__pow5mult+0x9e>
 800c132:	0022      	movs	r2, r4
 800c134:	0021      	movs	r1, r4
 800c136:	0038      	movs	r0, r7
 800c138:	f7ff ff02 	bl	800bf40 <__multiply>
 800c13c:	2300      	movs	r3, #0
 800c13e:	6020      	str	r0, [r4, #0]
 800c140:	6003      	str	r3, [r0, #0]
 800c142:	0004      	movs	r4, r0
 800c144:	e7e2      	b.n	800c10c <__pow5mult+0x68>
 800c146:	0030      	movs	r0, r6
 800c148:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c14a:	46c0      	nop			@ (mov r8, r8)
 800c14c:	0800da08 	.word	0x0800da08
 800c150:	0800d889 	.word	0x0800d889
 800c154:	0800d9af 	.word	0x0800d9af
 800c158:	00000271 	.word	0x00000271

0800c15c <__lshift>:
 800c15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c15e:	000c      	movs	r4, r1
 800c160:	0016      	movs	r6, r2
 800c162:	6923      	ldr	r3, [r4, #16]
 800c164:	1157      	asrs	r7, r2, #5
 800c166:	b085      	sub	sp, #20
 800c168:	18fb      	adds	r3, r7, r3
 800c16a:	9301      	str	r3, [sp, #4]
 800c16c:	3301      	adds	r3, #1
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	6849      	ldr	r1, [r1, #4]
 800c172:	68a3      	ldr	r3, [r4, #8]
 800c174:	9002      	str	r0, [sp, #8]
 800c176:	9a00      	ldr	r2, [sp, #0]
 800c178:	4293      	cmp	r3, r2
 800c17a:	db10      	blt.n	800c19e <__lshift+0x42>
 800c17c:	9802      	ldr	r0, [sp, #8]
 800c17e:	f7ff fd7f 	bl	800bc80 <_Balloc>
 800c182:	2300      	movs	r3, #0
 800c184:	0001      	movs	r1, r0
 800c186:	0005      	movs	r5, r0
 800c188:	001a      	movs	r2, r3
 800c18a:	3114      	adds	r1, #20
 800c18c:	4298      	cmp	r0, r3
 800c18e:	d10c      	bne.n	800c1aa <__lshift+0x4e>
 800c190:	21ef      	movs	r1, #239	@ 0xef
 800c192:	002a      	movs	r2, r5
 800c194:	4b25      	ldr	r3, [pc, #148]	@ (800c22c <__lshift+0xd0>)
 800c196:	4826      	ldr	r0, [pc, #152]	@ (800c230 <__lshift+0xd4>)
 800c198:	0049      	lsls	r1, r1, #1
 800c19a:	f7ff f8e1 	bl	800b360 <__assert_func>
 800c19e:	3101      	adds	r1, #1
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	e7e8      	b.n	800c176 <__lshift+0x1a>
 800c1a4:	0098      	lsls	r0, r3, #2
 800c1a6:	500a      	str	r2, [r1, r0]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	42bb      	cmp	r3, r7
 800c1ac:	dbfa      	blt.n	800c1a4 <__lshift+0x48>
 800c1ae:	43fb      	mvns	r3, r7
 800c1b0:	17db      	asrs	r3, r3, #31
 800c1b2:	401f      	ands	r7, r3
 800c1b4:	00bf      	lsls	r7, r7, #2
 800c1b6:	0023      	movs	r3, r4
 800c1b8:	201f      	movs	r0, #31
 800c1ba:	19c9      	adds	r1, r1, r7
 800c1bc:	0037      	movs	r7, r6
 800c1be:	6922      	ldr	r2, [r4, #16]
 800c1c0:	3314      	adds	r3, #20
 800c1c2:	0092      	lsls	r2, r2, #2
 800c1c4:	189a      	adds	r2, r3, r2
 800c1c6:	4007      	ands	r7, r0
 800c1c8:	4206      	tst	r6, r0
 800c1ca:	d029      	beq.n	800c220 <__lshift+0xc4>
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	1bc0      	subs	r0, r0, r7
 800c1d0:	9003      	str	r0, [sp, #12]
 800c1d2:	468c      	mov	ip, r1
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	681e      	ldr	r6, [r3, #0]
 800c1d8:	40be      	lsls	r6, r7
 800c1da:	4306      	orrs	r6, r0
 800c1dc:	4660      	mov	r0, ip
 800c1de:	c040      	stmia	r0!, {r6}
 800c1e0:	4684      	mov	ip, r0
 800c1e2:	9e03      	ldr	r6, [sp, #12]
 800c1e4:	cb01      	ldmia	r3!, {r0}
 800c1e6:	40f0      	lsrs	r0, r6
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d8f4      	bhi.n	800c1d6 <__lshift+0x7a>
 800c1ec:	0026      	movs	r6, r4
 800c1ee:	3615      	adds	r6, #21
 800c1f0:	2304      	movs	r3, #4
 800c1f2:	42b2      	cmp	r2, r6
 800c1f4:	d304      	bcc.n	800c200 <__lshift+0xa4>
 800c1f6:	1b13      	subs	r3, r2, r4
 800c1f8:	3b15      	subs	r3, #21
 800c1fa:	089b      	lsrs	r3, r3, #2
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	50c8      	str	r0, [r1, r3]
 800c202:	2800      	cmp	r0, #0
 800c204:	d002      	beq.n	800c20c <__lshift+0xb0>
 800c206:	9b01      	ldr	r3, [sp, #4]
 800c208:	3302      	adds	r3, #2
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	9b00      	ldr	r3, [sp, #0]
 800c20e:	9802      	ldr	r0, [sp, #8]
 800c210:	3b01      	subs	r3, #1
 800c212:	0021      	movs	r1, r4
 800c214:	612b      	str	r3, [r5, #16]
 800c216:	f7ff fd77 	bl	800bd08 <_Bfree>
 800c21a:	0028      	movs	r0, r5
 800c21c:	b005      	add	sp, #20
 800c21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c220:	cb01      	ldmia	r3!, {r0}
 800c222:	c101      	stmia	r1!, {r0}
 800c224:	429a      	cmp	r2, r3
 800c226:	d8fb      	bhi.n	800c220 <__lshift+0xc4>
 800c228:	e7f0      	b.n	800c20c <__lshift+0xb0>
 800c22a:	46c0      	nop			@ (mov r8, r8)
 800c22c:	0800d93e 	.word	0x0800d93e
 800c230:	0800d9af 	.word	0x0800d9af

0800c234 <__mcmp>:
 800c234:	b530      	push	{r4, r5, lr}
 800c236:	690b      	ldr	r3, [r1, #16]
 800c238:	6904      	ldr	r4, [r0, #16]
 800c23a:	0002      	movs	r2, r0
 800c23c:	1ae0      	subs	r0, r4, r3
 800c23e:	429c      	cmp	r4, r3
 800c240:	d10f      	bne.n	800c262 <__mcmp+0x2e>
 800c242:	3214      	adds	r2, #20
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	3114      	adds	r1, #20
 800c248:	0014      	movs	r4, r2
 800c24a:	18c9      	adds	r1, r1, r3
 800c24c:	18d2      	adds	r2, r2, r3
 800c24e:	3a04      	subs	r2, #4
 800c250:	3904      	subs	r1, #4
 800c252:	6815      	ldr	r5, [r2, #0]
 800c254:	680b      	ldr	r3, [r1, #0]
 800c256:	429d      	cmp	r5, r3
 800c258:	d004      	beq.n	800c264 <__mcmp+0x30>
 800c25a:	2001      	movs	r0, #1
 800c25c:	429d      	cmp	r5, r3
 800c25e:	d200      	bcs.n	800c262 <__mcmp+0x2e>
 800c260:	3802      	subs	r0, #2
 800c262:	bd30      	pop	{r4, r5, pc}
 800c264:	4294      	cmp	r4, r2
 800c266:	d3f2      	bcc.n	800c24e <__mcmp+0x1a>
 800c268:	e7fb      	b.n	800c262 <__mcmp+0x2e>
	...

0800c26c <__mdiff>:
 800c26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c26e:	000c      	movs	r4, r1
 800c270:	b087      	sub	sp, #28
 800c272:	9000      	str	r0, [sp, #0]
 800c274:	0011      	movs	r1, r2
 800c276:	0020      	movs	r0, r4
 800c278:	0017      	movs	r7, r2
 800c27a:	f7ff ffdb 	bl	800c234 <__mcmp>
 800c27e:	1e05      	subs	r5, r0, #0
 800c280:	d110      	bne.n	800c2a4 <__mdiff+0x38>
 800c282:	0001      	movs	r1, r0
 800c284:	9800      	ldr	r0, [sp, #0]
 800c286:	f7ff fcfb 	bl	800bc80 <_Balloc>
 800c28a:	1e02      	subs	r2, r0, #0
 800c28c:	d104      	bne.n	800c298 <__mdiff+0x2c>
 800c28e:	4b40      	ldr	r3, [pc, #256]	@ (800c390 <__mdiff+0x124>)
 800c290:	4840      	ldr	r0, [pc, #256]	@ (800c394 <__mdiff+0x128>)
 800c292:	4941      	ldr	r1, [pc, #260]	@ (800c398 <__mdiff+0x12c>)
 800c294:	f7ff f864 	bl	800b360 <__assert_func>
 800c298:	2301      	movs	r3, #1
 800c29a:	6145      	str	r5, [r0, #20]
 800c29c:	6103      	str	r3, [r0, #16]
 800c29e:	0010      	movs	r0, r2
 800c2a0:	b007      	add	sp, #28
 800c2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a4:	2600      	movs	r6, #0
 800c2a6:	42b0      	cmp	r0, r6
 800c2a8:	da03      	bge.n	800c2b2 <__mdiff+0x46>
 800c2aa:	0023      	movs	r3, r4
 800c2ac:	003c      	movs	r4, r7
 800c2ae:	001f      	movs	r7, r3
 800c2b0:	3601      	adds	r6, #1
 800c2b2:	6861      	ldr	r1, [r4, #4]
 800c2b4:	9800      	ldr	r0, [sp, #0]
 800c2b6:	f7ff fce3 	bl	800bc80 <_Balloc>
 800c2ba:	1e02      	subs	r2, r0, #0
 800c2bc:	d103      	bne.n	800c2c6 <__mdiff+0x5a>
 800c2be:	4b34      	ldr	r3, [pc, #208]	@ (800c390 <__mdiff+0x124>)
 800c2c0:	4834      	ldr	r0, [pc, #208]	@ (800c394 <__mdiff+0x128>)
 800c2c2:	4936      	ldr	r1, [pc, #216]	@ (800c39c <__mdiff+0x130>)
 800c2c4:	e7e6      	b.n	800c294 <__mdiff+0x28>
 800c2c6:	6923      	ldr	r3, [r4, #16]
 800c2c8:	3414      	adds	r4, #20
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	18e3      	adds	r3, r4, r3
 800c2d0:	0021      	movs	r1, r4
 800c2d2:	9401      	str	r4, [sp, #4]
 800c2d4:	003c      	movs	r4, r7
 800c2d6:	9302      	str	r3, [sp, #8]
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	3414      	adds	r4, #20
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	18e3      	adds	r3, r4, r3
 800c2e0:	9303      	str	r3, [sp, #12]
 800c2e2:	0003      	movs	r3, r0
 800c2e4:	60c6      	str	r6, [r0, #12]
 800c2e6:	468c      	mov	ip, r1
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	3314      	adds	r3, #20
 800c2ec:	9304      	str	r3, [sp, #16]
 800c2ee:	9305      	str	r3, [sp, #20]
 800c2f0:	4663      	mov	r3, ip
 800c2f2:	cb20      	ldmia	r3!, {r5}
 800c2f4:	b2a9      	uxth	r1, r5
 800c2f6:	000e      	movs	r6, r1
 800c2f8:	469c      	mov	ip, r3
 800c2fa:	cc08      	ldmia	r4!, {r3}
 800c2fc:	0c2d      	lsrs	r5, r5, #16
 800c2fe:	b299      	uxth	r1, r3
 800c300:	1a71      	subs	r1, r6, r1
 800c302:	1809      	adds	r1, r1, r0
 800c304:	0c1b      	lsrs	r3, r3, #16
 800c306:	1408      	asrs	r0, r1, #16
 800c308:	1aeb      	subs	r3, r5, r3
 800c30a:	181b      	adds	r3, r3, r0
 800c30c:	1418      	asrs	r0, r3, #16
 800c30e:	b289      	uxth	r1, r1
 800c310:	041b      	lsls	r3, r3, #16
 800c312:	4319      	orrs	r1, r3
 800c314:	9b05      	ldr	r3, [sp, #20]
 800c316:	c302      	stmia	r3!, {r1}
 800c318:	9305      	str	r3, [sp, #20]
 800c31a:	9b03      	ldr	r3, [sp, #12]
 800c31c:	42a3      	cmp	r3, r4
 800c31e:	d8e7      	bhi.n	800c2f0 <__mdiff+0x84>
 800c320:	0039      	movs	r1, r7
 800c322:	9c03      	ldr	r4, [sp, #12]
 800c324:	3115      	adds	r1, #21
 800c326:	2304      	movs	r3, #4
 800c328:	428c      	cmp	r4, r1
 800c32a:	d304      	bcc.n	800c336 <__mdiff+0xca>
 800c32c:	1be3      	subs	r3, r4, r7
 800c32e:	3b15      	subs	r3, #21
 800c330:	089b      	lsrs	r3, r3, #2
 800c332:	3301      	adds	r3, #1
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	9901      	ldr	r1, [sp, #4]
 800c338:	18cd      	adds	r5, r1, r3
 800c33a:	9904      	ldr	r1, [sp, #16]
 800c33c:	002e      	movs	r6, r5
 800c33e:	18cb      	adds	r3, r1, r3
 800c340:	001f      	movs	r7, r3
 800c342:	9902      	ldr	r1, [sp, #8]
 800c344:	428e      	cmp	r6, r1
 800c346:	d311      	bcc.n	800c36c <__mdiff+0x100>
 800c348:	9c02      	ldr	r4, [sp, #8]
 800c34a:	1ee9      	subs	r1, r5, #3
 800c34c:	2000      	movs	r0, #0
 800c34e:	428c      	cmp	r4, r1
 800c350:	d304      	bcc.n	800c35c <__mdiff+0xf0>
 800c352:	0021      	movs	r1, r4
 800c354:	3103      	adds	r1, #3
 800c356:	1b49      	subs	r1, r1, r5
 800c358:	0889      	lsrs	r1, r1, #2
 800c35a:	0088      	lsls	r0, r1, #2
 800c35c:	181b      	adds	r3, r3, r0
 800c35e:	3b04      	subs	r3, #4
 800c360:	6819      	ldr	r1, [r3, #0]
 800c362:	2900      	cmp	r1, #0
 800c364:	d010      	beq.n	800c388 <__mdiff+0x11c>
 800c366:	9b00      	ldr	r3, [sp, #0]
 800c368:	6113      	str	r3, [r2, #16]
 800c36a:	e798      	b.n	800c29e <__mdiff+0x32>
 800c36c:	4684      	mov	ip, r0
 800c36e:	ce02      	ldmia	r6!, {r1}
 800c370:	b288      	uxth	r0, r1
 800c372:	4460      	add	r0, ip
 800c374:	1400      	asrs	r0, r0, #16
 800c376:	0c0c      	lsrs	r4, r1, #16
 800c378:	1904      	adds	r4, r0, r4
 800c37a:	4461      	add	r1, ip
 800c37c:	1420      	asrs	r0, r4, #16
 800c37e:	b289      	uxth	r1, r1
 800c380:	0424      	lsls	r4, r4, #16
 800c382:	4321      	orrs	r1, r4
 800c384:	c702      	stmia	r7!, {r1}
 800c386:	e7dc      	b.n	800c342 <__mdiff+0xd6>
 800c388:	9900      	ldr	r1, [sp, #0]
 800c38a:	3901      	subs	r1, #1
 800c38c:	9100      	str	r1, [sp, #0]
 800c38e:	e7e6      	b.n	800c35e <__mdiff+0xf2>
 800c390:	0800d93e 	.word	0x0800d93e
 800c394:	0800d9af 	.word	0x0800d9af
 800c398:	00000237 	.word	0x00000237
 800c39c:	00000245 	.word	0x00000245

0800c3a0 <__ulp>:
 800c3a0:	b510      	push	{r4, lr}
 800c3a2:	2400      	movs	r4, #0
 800c3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d8 <__ulp+0x38>)
 800c3a6:	4a0d      	ldr	r2, [pc, #52]	@ (800c3dc <__ulp+0x3c>)
 800c3a8:	400b      	ands	r3, r1
 800c3aa:	189b      	adds	r3, r3, r2
 800c3ac:	42a3      	cmp	r3, r4
 800c3ae:	dc06      	bgt.n	800c3be <__ulp+0x1e>
 800c3b0:	425b      	negs	r3, r3
 800c3b2:	151a      	asrs	r2, r3, #20
 800c3b4:	2a13      	cmp	r2, #19
 800c3b6:	dc05      	bgt.n	800c3c4 <__ulp+0x24>
 800c3b8:	2380      	movs	r3, #128	@ 0x80
 800c3ba:	031b      	lsls	r3, r3, #12
 800c3bc:	4113      	asrs	r3, r2
 800c3be:	0019      	movs	r1, r3
 800c3c0:	0020      	movs	r0, r4
 800c3c2:	bd10      	pop	{r4, pc}
 800c3c4:	3a14      	subs	r2, #20
 800c3c6:	2401      	movs	r4, #1
 800c3c8:	2a1e      	cmp	r2, #30
 800c3ca:	dc02      	bgt.n	800c3d2 <__ulp+0x32>
 800c3cc:	2480      	movs	r4, #128	@ 0x80
 800c3ce:	0624      	lsls	r4, r4, #24
 800c3d0:	40d4      	lsrs	r4, r2
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	e7f3      	b.n	800c3be <__ulp+0x1e>
 800c3d6:	46c0      	nop			@ (mov r8, r8)
 800c3d8:	7ff00000 	.word	0x7ff00000
 800c3dc:	fcc00000 	.word	0xfcc00000

0800c3e0 <__b2d>:
 800c3e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3e2:	0006      	movs	r6, r0
 800c3e4:	6903      	ldr	r3, [r0, #16]
 800c3e6:	3614      	adds	r6, #20
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	18f3      	adds	r3, r6, r3
 800c3ec:	1f1d      	subs	r5, r3, #4
 800c3ee:	682c      	ldr	r4, [r5, #0]
 800c3f0:	000f      	movs	r7, r1
 800c3f2:	0020      	movs	r0, r4
 800c3f4:	9301      	str	r3, [sp, #4]
 800c3f6:	f7ff fd3b 	bl	800be70 <__hi0bits>
 800c3fa:	2220      	movs	r2, #32
 800c3fc:	1a12      	subs	r2, r2, r0
 800c3fe:	603a      	str	r2, [r7, #0]
 800c400:	0003      	movs	r3, r0
 800c402:	4a1c      	ldr	r2, [pc, #112]	@ (800c474 <__b2d+0x94>)
 800c404:	280a      	cmp	r0, #10
 800c406:	dc15      	bgt.n	800c434 <__b2d+0x54>
 800c408:	210b      	movs	r1, #11
 800c40a:	0027      	movs	r7, r4
 800c40c:	1a09      	subs	r1, r1, r0
 800c40e:	40cf      	lsrs	r7, r1
 800c410:	433a      	orrs	r2, r7
 800c412:	468c      	mov	ip, r1
 800c414:	0011      	movs	r1, r2
 800c416:	2200      	movs	r2, #0
 800c418:	42ae      	cmp	r6, r5
 800c41a:	d202      	bcs.n	800c422 <__b2d+0x42>
 800c41c:	9a01      	ldr	r2, [sp, #4]
 800c41e:	3a08      	subs	r2, #8
 800c420:	6812      	ldr	r2, [r2, #0]
 800c422:	3315      	adds	r3, #21
 800c424:	409c      	lsls	r4, r3
 800c426:	4663      	mov	r3, ip
 800c428:	0027      	movs	r7, r4
 800c42a:	40da      	lsrs	r2, r3
 800c42c:	4317      	orrs	r7, r2
 800c42e:	0038      	movs	r0, r7
 800c430:	b003      	add	sp, #12
 800c432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c434:	2700      	movs	r7, #0
 800c436:	42ae      	cmp	r6, r5
 800c438:	d202      	bcs.n	800c440 <__b2d+0x60>
 800c43a:	9d01      	ldr	r5, [sp, #4]
 800c43c:	3d08      	subs	r5, #8
 800c43e:	682f      	ldr	r7, [r5, #0]
 800c440:	210b      	movs	r1, #11
 800c442:	4249      	negs	r1, r1
 800c444:	468c      	mov	ip, r1
 800c446:	449c      	add	ip, r3
 800c448:	2b0b      	cmp	r3, #11
 800c44a:	d010      	beq.n	800c46e <__b2d+0x8e>
 800c44c:	4661      	mov	r1, ip
 800c44e:	2320      	movs	r3, #32
 800c450:	408c      	lsls	r4, r1
 800c452:	1a5b      	subs	r3, r3, r1
 800c454:	0039      	movs	r1, r7
 800c456:	40d9      	lsrs	r1, r3
 800c458:	430c      	orrs	r4, r1
 800c45a:	4322      	orrs	r2, r4
 800c45c:	0011      	movs	r1, r2
 800c45e:	2200      	movs	r2, #0
 800c460:	42b5      	cmp	r5, r6
 800c462:	d901      	bls.n	800c468 <__b2d+0x88>
 800c464:	3d04      	subs	r5, #4
 800c466:	682a      	ldr	r2, [r5, #0]
 800c468:	4664      	mov	r4, ip
 800c46a:	40a7      	lsls	r7, r4
 800c46c:	e7dd      	b.n	800c42a <__b2d+0x4a>
 800c46e:	4322      	orrs	r2, r4
 800c470:	0011      	movs	r1, r2
 800c472:	e7dc      	b.n	800c42e <__b2d+0x4e>
 800c474:	3ff00000 	.word	0x3ff00000

0800c478 <__d2b>:
 800c478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c47a:	2101      	movs	r1, #1
 800c47c:	0016      	movs	r6, r2
 800c47e:	001f      	movs	r7, r3
 800c480:	f7ff fbfe 	bl	800bc80 <_Balloc>
 800c484:	1e04      	subs	r4, r0, #0
 800c486:	d105      	bne.n	800c494 <__d2b+0x1c>
 800c488:	0022      	movs	r2, r4
 800c48a:	4b25      	ldr	r3, [pc, #148]	@ (800c520 <__d2b+0xa8>)
 800c48c:	4825      	ldr	r0, [pc, #148]	@ (800c524 <__d2b+0xac>)
 800c48e:	4926      	ldr	r1, [pc, #152]	@ (800c528 <__d2b+0xb0>)
 800c490:	f7fe ff66 	bl	800b360 <__assert_func>
 800c494:	033b      	lsls	r3, r7, #12
 800c496:	007d      	lsls	r5, r7, #1
 800c498:	0b1b      	lsrs	r3, r3, #12
 800c49a:	0d6d      	lsrs	r5, r5, #21
 800c49c:	d002      	beq.n	800c4a4 <__d2b+0x2c>
 800c49e:	2280      	movs	r2, #128	@ 0x80
 800c4a0:	0352      	lsls	r2, r2, #13
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	2e00      	cmp	r6, #0
 800c4a8:	d025      	beq.n	800c4f6 <__d2b+0x7e>
 800c4aa:	4668      	mov	r0, sp
 800c4ac:	9600      	str	r6, [sp, #0]
 800c4ae:	f7ff fd00 	bl	800beb2 <__lo0bits>
 800c4b2:	9b01      	ldr	r3, [sp, #4]
 800c4b4:	9900      	ldr	r1, [sp, #0]
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d01b      	beq.n	800c4f2 <__d2b+0x7a>
 800c4ba:	2220      	movs	r2, #32
 800c4bc:	001e      	movs	r6, r3
 800c4be:	1a12      	subs	r2, r2, r0
 800c4c0:	4096      	lsls	r6, r2
 800c4c2:	0032      	movs	r2, r6
 800c4c4:	40c3      	lsrs	r3, r0
 800c4c6:	430a      	orrs	r2, r1
 800c4c8:	6162      	str	r2, [r4, #20]
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	9e01      	ldr	r6, [sp, #4]
 800c4ce:	61a6      	str	r6, [r4, #24]
 800c4d0:	1e73      	subs	r3, r6, #1
 800c4d2:	419e      	sbcs	r6, r3
 800c4d4:	3601      	adds	r6, #1
 800c4d6:	6126      	str	r6, [r4, #16]
 800c4d8:	2d00      	cmp	r5, #0
 800c4da:	d014      	beq.n	800c506 <__d2b+0x8e>
 800c4dc:	2635      	movs	r6, #53	@ 0x35
 800c4de:	4b13      	ldr	r3, [pc, #76]	@ (800c52c <__d2b+0xb4>)
 800c4e0:	18ed      	adds	r5, r5, r3
 800c4e2:	9b08      	ldr	r3, [sp, #32]
 800c4e4:	182d      	adds	r5, r5, r0
 800c4e6:	601d      	str	r5, [r3, #0]
 800c4e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ea:	1a36      	subs	r6, r6, r0
 800c4ec:	601e      	str	r6, [r3, #0]
 800c4ee:	0020      	movs	r0, r4
 800c4f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4f2:	6161      	str	r1, [r4, #20]
 800c4f4:	e7ea      	b.n	800c4cc <__d2b+0x54>
 800c4f6:	a801      	add	r0, sp, #4
 800c4f8:	f7ff fcdb 	bl	800beb2 <__lo0bits>
 800c4fc:	9b01      	ldr	r3, [sp, #4]
 800c4fe:	2601      	movs	r6, #1
 800c500:	6163      	str	r3, [r4, #20]
 800c502:	3020      	adds	r0, #32
 800c504:	e7e7      	b.n	800c4d6 <__d2b+0x5e>
 800c506:	4b0a      	ldr	r3, [pc, #40]	@ (800c530 <__d2b+0xb8>)
 800c508:	18c0      	adds	r0, r0, r3
 800c50a:	9b08      	ldr	r3, [sp, #32]
 800c50c:	6018      	str	r0, [r3, #0]
 800c50e:	4b09      	ldr	r3, [pc, #36]	@ (800c534 <__d2b+0xbc>)
 800c510:	18f3      	adds	r3, r6, r3
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	18e3      	adds	r3, r4, r3
 800c516:	6958      	ldr	r0, [r3, #20]
 800c518:	f7ff fcaa 	bl	800be70 <__hi0bits>
 800c51c:	0176      	lsls	r6, r6, #5
 800c51e:	e7e3      	b.n	800c4e8 <__d2b+0x70>
 800c520:	0800d93e 	.word	0x0800d93e
 800c524:	0800d9af 	.word	0x0800d9af
 800c528:	0000030f 	.word	0x0000030f
 800c52c:	fffffbcd 	.word	0xfffffbcd
 800c530:	fffffbce 	.word	0xfffffbce
 800c534:	3fffffff 	.word	0x3fffffff

0800c538 <__ratio>:
 800c538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c53a:	b087      	sub	sp, #28
 800c53c:	000f      	movs	r7, r1
 800c53e:	a904      	add	r1, sp, #16
 800c540:	0006      	movs	r6, r0
 800c542:	f7ff ff4d 	bl	800c3e0 <__b2d>
 800c546:	9000      	str	r0, [sp, #0]
 800c548:	9101      	str	r1, [sp, #4]
 800c54a:	9b00      	ldr	r3, [sp, #0]
 800c54c:	9c01      	ldr	r4, [sp, #4]
 800c54e:	0038      	movs	r0, r7
 800c550:	a905      	add	r1, sp, #20
 800c552:	9302      	str	r3, [sp, #8]
 800c554:	9403      	str	r4, [sp, #12]
 800c556:	f7ff ff43 	bl	800c3e0 <__b2d>
 800c55a:	000d      	movs	r5, r1
 800c55c:	0002      	movs	r2, r0
 800c55e:	000b      	movs	r3, r1
 800c560:	6930      	ldr	r0, [r6, #16]
 800c562:	6939      	ldr	r1, [r7, #16]
 800c564:	9e04      	ldr	r6, [sp, #16]
 800c566:	1a40      	subs	r0, r0, r1
 800c568:	9905      	ldr	r1, [sp, #20]
 800c56a:	0140      	lsls	r0, r0, #5
 800c56c:	1a71      	subs	r1, r6, r1
 800c56e:	1841      	adds	r1, r0, r1
 800c570:	0508      	lsls	r0, r1, #20
 800c572:	2900      	cmp	r1, #0
 800c574:	dd08      	ble.n	800c588 <__ratio+0x50>
 800c576:	9901      	ldr	r1, [sp, #4]
 800c578:	1841      	adds	r1, r0, r1
 800c57a:	9103      	str	r1, [sp, #12]
 800c57c:	9802      	ldr	r0, [sp, #8]
 800c57e:	9903      	ldr	r1, [sp, #12]
 800c580:	f7f5 f8c2 	bl	8001708 <__aeabi_ddiv>
 800c584:	b007      	add	sp, #28
 800c586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c588:	1a2b      	subs	r3, r5, r0
 800c58a:	e7f7      	b.n	800c57c <__ratio+0x44>

0800c58c <__copybits>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	0014      	movs	r4, r2
 800c590:	0005      	movs	r5, r0
 800c592:	3901      	subs	r1, #1
 800c594:	6913      	ldr	r3, [r2, #16]
 800c596:	1149      	asrs	r1, r1, #5
 800c598:	3101      	adds	r1, #1
 800c59a:	0089      	lsls	r1, r1, #2
 800c59c:	3414      	adds	r4, #20
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	1841      	adds	r1, r0, r1
 800c5a2:	18e3      	adds	r3, r4, r3
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	d80d      	bhi.n	800c5c4 <__copybits+0x38>
 800c5a8:	0014      	movs	r4, r2
 800c5aa:	3411      	adds	r4, #17
 800c5ac:	2500      	movs	r5, #0
 800c5ae:	429c      	cmp	r4, r3
 800c5b0:	d803      	bhi.n	800c5ba <__copybits+0x2e>
 800c5b2:	1a9b      	subs	r3, r3, r2
 800c5b4:	3b11      	subs	r3, #17
 800c5b6:	089b      	lsrs	r3, r3, #2
 800c5b8:	009d      	lsls	r5, r3, #2
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	1940      	adds	r0, r0, r5
 800c5be:	4281      	cmp	r1, r0
 800c5c0:	d803      	bhi.n	800c5ca <__copybits+0x3e>
 800c5c2:	bd70      	pop	{r4, r5, r6, pc}
 800c5c4:	cc40      	ldmia	r4!, {r6}
 800c5c6:	c540      	stmia	r5!, {r6}
 800c5c8:	e7ec      	b.n	800c5a4 <__copybits+0x18>
 800c5ca:	c008      	stmia	r0!, {r3}
 800c5cc:	e7f7      	b.n	800c5be <__copybits+0x32>

0800c5ce <__any_on>:
 800c5ce:	0002      	movs	r2, r0
 800c5d0:	6900      	ldr	r0, [r0, #16]
 800c5d2:	b510      	push	{r4, lr}
 800c5d4:	3214      	adds	r2, #20
 800c5d6:	114b      	asrs	r3, r1, #5
 800c5d8:	4298      	cmp	r0, r3
 800c5da:	db13      	blt.n	800c604 <__any_on+0x36>
 800c5dc:	dd0c      	ble.n	800c5f8 <__any_on+0x2a>
 800c5de:	241f      	movs	r4, #31
 800c5e0:	0008      	movs	r0, r1
 800c5e2:	4020      	ands	r0, r4
 800c5e4:	4221      	tst	r1, r4
 800c5e6:	d007      	beq.n	800c5f8 <__any_on+0x2a>
 800c5e8:	0099      	lsls	r1, r3, #2
 800c5ea:	588c      	ldr	r4, [r1, r2]
 800c5ec:	0021      	movs	r1, r4
 800c5ee:	40c1      	lsrs	r1, r0
 800c5f0:	4081      	lsls	r1, r0
 800c5f2:	2001      	movs	r0, #1
 800c5f4:	428c      	cmp	r4, r1
 800c5f6:	d104      	bne.n	800c602 <__any_on+0x34>
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	18d3      	adds	r3, r2, r3
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d803      	bhi.n	800c608 <__any_on+0x3a>
 800c600:	2000      	movs	r0, #0
 800c602:	bd10      	pop	{r4, pc}
 800c604:	0003      	movs	r3, r0
 800c606:	e7f7      	b.n	800c5f8 <__any_on+0x2a>
 800c608:	3b04      	subs	r3, #4
 800c60a:	6819      	ldr	r1, [r3, #0]
 800c60c:	2900      	cmp	r1, #0
 800c60e:	d0f5      	beq.n	800c5fc <__any_on+0x2e>
 800c610:	2001      	movs	r0, #1
 800c612:	e7f6      	b.n	800c602 <__any_on+0x34>

0800c614 <__ascii_wctomb>:
 800c614:	0003      	movs	r3, r0
 800c616:	1e08      	subs	r0, r1, #0
 800c618:	d005      	beq.n	800c626 <__ascii_wctomb+0x12>
 800c61a:	2aff      	cmp	r2, #255	@ 0xff
 800c61c:	d904      	bls.n	800c628 <__ascii_wctomb+0x14>
 800c61e:	228a      	movs	r2, #138	@ 0x8a
 800c620:	2001      	movs	r0, #1
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	4240      	negs	r0, r0
 800c626:	4770      	bx	lr
 800c628:	2001      	movs	r0, #1
 800c62a:	700a      	strb	r2, [r1, #0]
 800c62c:	e7fb      	b.n	800c626 <__ascii_wctomb+0x12>
	...

0800c630 <__ssputs_r>:
 800c630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c632:	688e      	ldr	r6, [r1, #8]
 800c634:	b085      	sub	sp, #20
 800c636:	001f      	movs	r7, r3
 800c638:	000c      	movs	r4, r1
 800c63a:	680b      	ldr	r3, [r1, #0]
 800c63c:	9002      	str	r0, [sp, #8]
 800c63e:	9203      	str	r2, [sp, #12]
 800c640:	42be      	cmp	r6, r7
 800c642:	d830      	bhi.n	800c6a6 <__ssputs_r+0x76>
 800c644:	210c      	movs	r1, #12
 800c646:	5e62      	ldrsh	r2, [r4, r1]
 800c648:	2190      	movs	r1, #144	@ 0x90
 800c64a:	00c9      	lsls	r1, r1, #3
 800c64c:	420a      	tst	r2, r1
 800c64e:	d028      	beq.n	800c6a2 <__ssputs_r+0x72>
 800c650:	2003      	movs	r0, #3
 800c652:	6921      	ldr	r1, [r4, #16]
 800c654:	1a5b      	subs	r3, r3, r1
 800c656:	9301      	str	r3, [sp, #4]
 800c658:	6963      	ldr	r3, [r4, #20]
 800c65a:	4343      	muls	r3, r0
 800c65c:	9801      	ldr	r0, [sp, #4]
 800c65e:	0fdd      	lsrs	r5, r3, #31
 800c660:	18ed      	adds	r5, r5, r3
 800c662:	1c7b      	adds	r3, r7, #1
 800c664:	181b      	adds	r3, r3, r0
 800c666:	106d      	asrs	r5, r5, #1
 800c668:	42ab      	cmp	r3, r5
 800c66a:	d900      	bls.n	800c66e <__ssputs_r+0x3e>
 800c66c:	001d      	movs	r5, r3
 800c66e:	0552      	lsls	r2, r2, #21
 800c670:	d528      	bpl.n	800c6c4 <__ssputs_r+0x94>
 800c672:	0029      	movs	r1, r5
 800c674:	9802      	ldr	r0, [sp, #8]
 800c676:	f7ff fa61 	bl	800bb3c <_malloc_r>
 800c67a:	1e06      	subs	r6, r0, #0
 800c67c:	d02c      	beq.n	800c6d8 <__ssputs_r+0xa8>
 800c67e:	9a01      	ldr	r2, [sp, #4]
 800c680:	6921      	ldr	r1, [r4, #16]
 800c682:	f7fe fe5e 	bl	800b342 <memcpy>
 800c686:	89a2      	ldrh	r2, [r4, #12]
 800c688:	4b18      	ldr	r3, [pc, #96]	@ (800c6ec <__ssputs_r+0xbc>)
 800c68a:	401a      	ands	r2, r3
 800c68c:	2380      	movs	r3, #128	@ 0x80
 800c68e:	4313      	orrs	r3, r2
 800c690:	81a3      	strh	r3, [r4, #12]
 800c692:	9b01      	ldr	r3, [sp, #4]
 800c694:	6126      	str	r6, [r4, #16]
 800c696:	18f6      	adds	r6, r6, r3
 800c698:	6026      	str	r6, [r4, #0]
 800c69a:	003e      	movs	r6, r7
 800c69c:	6165      	str	r5, [r4, #20]
 800c69e:	1aed      	subs	r5, r5, r3
 800c6a0:	60a5      	str	r5, [r4, #8]
 800c6a2:	42be      	cmp	r6, r7
 800c6a4:	d900      	bls.n	800c6a8 <__ssputs_r+0x78>
 800c6a6:	003e      	movs	r6, r7
 800c6a8:	0032      	movs	r2, r6
 800c6aa:	9903      	ldr	r1, [sp, #12]
 800c6ac:	6820      	ldr	r0, [r4, #0]
 800c6ae:	f000 fb5d 	bl	800cd6c <memmove>
 800c6b2:	2000      	movs	r0, #0
 800c6b4:	68a3      	ldr	r3, [r4, #8]
 800c6b6:	1b9b      	subs	r3, r3, r6
 800c6b8:	60a3      	str	r3, [r4, #8]
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	199b      	adds	r3, r3, r6
 800c6be:	6023      	str	r3, [r4, #0]
 800c6c0:	b005      	add	sp, #20
 800c6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c4:	002a      	movs	r2, r5
 800c6c6:	9802      	ldr	r0, [sp, #8]
 800c6c8:	f000 fbb5 	bl	800ce36 <_realloc_r>
 800c6cc:	1e06      	subs	r6, r0, #0
 800c6ce:	d1e0      	bne.n	800c692 <__ssputs_r+0x62>
 800c6d0:	6921      	ldr	r1, [r4, #16]
 800c6d2:	9802      	ldr	r0, [sp, #8]
 800c6d4:	f7fe fe62 	bl	800b39c <_free_r>
 800c6d8:	230c      	movs	r3, #12
 800c6da:	2001      	movs	r0, #1
 800c6dc:	9a02      	ldr	r2, [sp, #8]
 800c6de:	4240      	negs	r0, r0
 800c6e0:	6013      	str	r3, [r2, #0]
 800c6e2:	89a2      	ldrh	r2, [r4, #12]
 800c6e4:	3334      	adds	r3, #52	@ 0x34
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	81a3      	strh	r3, [r4, #12]
 800c6ea:	e7e9      	b.n	800c6c0 <__ssputs_r+0x90>
 800c6ec:	fffffb7f 	.word	0xfffffb7f

0800c6f0 <_svfiprintf_r>:
 800c6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6f2:	b0a1      	sub	sp, #132	@ 0x84
 800c6f4:	9003      	str	r0, [sp, #12]
 800c6f6:	001d      	movs	r5, r3
 800c6f8:	898b      	ldrh	r3, [r1, #12]
 800c6fa:	000f      	movs	r7, r1
 800c6fc:	0016      	movs	r6, r2
 800c6fe:	061b      	lsls	r3, r3, #24
 800c700:	d511      	bpl.n	800c726 <_svfiprintf_r+0x36>
 800c702:	690b      	ldr	r3, [r1, #16]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10e      	bne.n	800c726 <_svfiprintf_r+0x36>
 800c708:	2140      	movs	r1, #64	@ 0x40
 800c70a:	f7ff fa17 	bl	800bb3c <_malloc_r>
 800c70e:	6038      	str	r0, [r7, #0]
 800c710:	6138      	str	r0, [r7, #16]
 800c712:	2800      	cmp	r0, #0
 800c714:	d105      	bne.n	800c722 <_svfiprintf_r+0x32>
 800c716:	230c      	movs	r3, #12
 800c718:	9a03      	ldr	r2, [sp, #12]
 800c71a:	6013      	str	r3, [r2, #0]
 800c71c:	2001      	movs	r0, #1
 800c71e:	4240      	negs	r0, r0
 800c720:	e0cf      	b.n	800c8c2 <_svfiprintf_r+0x1d2>
 800c722:	2340      	movs	r3, #64	@ 0x40
 800c724:	617b      	str	r3, [r7, #20]
 800c726:	2300      	movs	r3, #0
 800c728:	ac08      	add	r4, sp, #32
 800c72a:	6163      	str	r3, [r4, #20]
 800c72c:	3320      	adds	r3, #32
 800c72e:	7663      	strb	r3, [r4, #25]
 800c730:	3310      	adds	r3, #16
 800c732:	76a3      	strb	r3, [r4, #26]
 800c734:	9507      	str	r5, [sp, #28]
 800c736:	0035      	movs	r5, r6
 800c738:	782b      	ldrb	r3, [r5, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d001      	beq.n	800c742 <_svfiprintf_r+0x52>
 800c73e:	2b25      	cmp	r3, #37	@ 0x25
 800c740:	d148      	bne.n	800c7d4 <_svfiprintf_r+0xe4>
 800c742:	1bab      	subs	r3, r5, r6
 800c744:	9305      	str	r3, [sp, #20]
 800c746:	42b5      	cmp	r5, r6
 800c748:	d00b      	beq.n	800c762 <_svfiprintf_r+0x72>
 800c74a:	0032      	movs	r2, r6
 800c74c:	0039      	movs	r1, r7
 800c74e:	9803      	ldr	r0, [sp, #12]
 800c750:	f7ff ff6e 	bl	800c630 <__ssputs_r>
 800c754:	3001      	adds	r0, #1
 800c756:	d100      	bne.n	800c75a <_svfiprintf_r+0x6a>
 800c758:	e0ae      	b.n	800c8b8 <_svfiprintf_r+0x1c8>
 800c75a:	6963      	ldr	r3, [r4, #20]
 800c75c:	9a05      	ldr	r2, [sp, #20]
 800c75e:	189b      	adds	r3, r3, r2
 800c760:	6163      	str	r3, [r4, #20]
 800c762:	782b      	ldrb	r3, [r5, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d100      	bne.n	800c76a <_svfiprintf_r+0x7a>
 800c768:	e0a6      	b.n	800c8b8 <_svfiprintf_r+0x1c8>
 800c76a:	2201      	movs	r2, #1
 800c76c:	2300      	movs	r3, #0
 800c76e:	4252      	negs	r2, r2
 800c770:	6062      	str	r2, [r4, #4]
 800c772:	a904      	add	r1, sp, #16
 800c774:	3254      	adds	r2, #84	@ 0x54
 800c776:	1852      	adds	r2, r2, r1
 800c778:	1c6e      	adds	r6, r5, #1
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	60e3      	str	r3, [r4, #12]
 800c77e:	60a3      	str	r3, [r4, #8]
 800c780:	7013      	strb	r3, [r2, #0]
 800c782:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c784:	4b54      	ldr	r3, [pc, #336]	@ (800c8d8 <_svfiprintf_r+0x1e8>)
 800c786:	2205      	movs	r2, #5
 800c788:	0018      	movs	r0, r3
 800c78a:	7831      	ldrb	r1, [r6, #0]
 800c78c:	9305      	str	r3, [sp, #20]
 800c78e:	f000 fb13 	bl	800cdb8 <memchr>
 800c792:	1c75      	adds	r5, r6, #1
 800c794:	2800      	cmp	r0, #0
 800c796:	d11f      	bne.n	800c7d8 <_svfiprintf_r+0xe8>
 800c798:	6822      	ldr	r2, [r4, #0]
 800c79a:	06d3      	lsls	r3, r2, #27
 800c79c:	d504      	bpl.n	800c7a8 <_svfiprintf_r+0xb8>
 800c79e:	2353      	movs	r3, #83	@ 0x53
 800c7a0:	a904      	add	r1, sp, #16
 800c7a2:	185b      	adds	r3, r3, r1
 800c7a4:	2120      	movs	r1, #32
 800c7a6:	7019      	strb	r1, [r3, #0]
 800c7a8:	0713      	lsls	r3, r2, #28
 800c7aa:	d504      	bpl.n	800c7b6 <_svfiprintf_r+0xc6>
 800c7ac:	2353      	movs	r3, #83	@ 0x53
 800c7ae:	a904      	add	r1, sp, #16
 800c7b0:	185b      	adds	r3, r3, r1
 800c7b2:	212b      	movs	r1, #43	@ 0x2b
 800c7b4:	7019      	strb	r1, [r3, #0]
 800c7b6:	7833      	ldrb	r3, [r6, #0]
 800c7b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7ba:	d016      	beq.n	800c7ea <_svfiprintf_r+0xfa>
 800c7bc:	0035      	movs	r5, r6
 800c7be:	2100      	movs	r1, #0
 800c7c0:	200a      	movs	r0, #10
 800c7c2:	68e3      	ldr	r3, [r4, #12]
 800c7c4:	782a      	ldrb	r2, [r5, #0]
 800c7c6:	1c6e      	adds	r6, r5, #1
 800c7c8:	3a30      	subs	r2, #48	@ 0x30
 800c7ca:	2a09      	cmp	r2, #9
 800c7cc:	d950      	bls.n	800c870 <_svfiprintf_r+0x180>
 800c7ce:	2900      	cmp	r1, #0
 800c7d0:	d111      	bne.n	800c7f6 <_svfiprintf_r+0x106>
 800c7d2:	e017      	b.n	800c804 <_svfiprintf_r+0x114>
 800c7d4:	3501      	adds	r5, #1
 800c7d6:	e7af      	b.n	800c738 <_svfiprintf_r+0x48>
 800c7d8:	9b05      	ldr	r3, [sp, #20]
 800c7da:	6822      	ldr	r2, [r4, #0]
 800c7dc:	1ac0      	subs	r0, r0, r3
 800c7de:	2301      	movs	r3, #1
 800c7e0:	4083      	lsls	r3, r0
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	002e      	movs	r6, r5
 800c7e6:	6023      	str	r3, [r4, #0]
 800c7e8:	e7cc      	b.n	800c784 <_svfiprintf_r+0x94>
 800c7ea:	9b07      	ldr	r3, [sp, #28]
 800c7ec:	1d19      	adds	r1, r3, #4
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	9107      	str	r1, [sp, #28]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	db01      	blt.n	800c7fa <_svfiprintf_r+0x10a>
 800c7f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7f8:	e004      	b.n	800c804 <_svfiprintf_r+0x114>
 800c7fa:	425b      	negs	r3, r3
 800c7fc:	60e3      	str	r3, [r4, #12]
 800c7fe:	2302      	movs	r3, #2
 800c800:	4313      	orrs	r3, r2
 800c802:	6023      	str	r3, [r4, #0]
 800c804:	782b      	ldrb	r3, [r5, #0]
 800c806:	2b2e      	cmp	r3, #46	@ 0x2e
 800c808:	d10c      	bne.n	800c824 <_svfiprintf_r+0x134>
 800c80a:	786b      	ldrb	r3, [r5, #1]
 800c80c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c80e:	d134      	bne.n	800c87a <_svfiprintf_r+0x18a>
 800c810:	9b07      	ldr	r3, [sp, #28]
 800c812:	3502      	adds	r5, #2
 800c814:	1d1a      	adds	r2, r3, #4
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	9207      	str	r2, [sp, #28]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	da01      	bge.n	800c822 <_svfiprintf_r+0x132>
 800c81e:	2301      	movs	r3, #1
 800c820:	425b      	negs	r3, r3
 800c822:	9309      	str	r3, [sp, #36]	@ 0x24
 800c824:	4e2d      	ldr	r6, [pc, #180]	@ (800c8dc <_svfiprintf_r+0x1ec>)
 800c826:	2203      	movs	r2, #3
 800c828:	0030      	movs	r0, r6
 800c82a:	7829      	ldrb	r1, [r5, #0]
 800c82c:	f000 fac4 	bl	800cdb8 <memchr>
 800c830:	2800      	cmp	r0, #0
 800c832:	d006      	beq.n	800c842 <_svfiprintf_r+0x152>
 800c834:	2340      	movs	r3, #64	@ 0x40
 800c836:	1b80      	subs	r0, r0, r6
 800c838:	4083      	lsls	r3, r0
 800c83a:	6822      	ldr	r2, [r4, #0]
 800c83c:	3501      	adds	r5, #1
 800c83e:	4313      	orrs	r3, r2
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	7829      	ldrb	r1, [r5, #0]
 800c844:	2206      	movs	r2, #6
 800c846:	4826      	ldr	r0, [pc, #152]	@ (800c8e0 <_svfiprintf_r+0x1f0>)
 800c848:	1c6e      	adds	r6, r5, #1
 800c84a:	7621      	strb	r1, [r4, #24]
 800c84c:	f000 fab4 	bl	800cdb8 <memchr>
 800c850:	2800      	cmp	r0, #0
 800c852:	d038      	beq.n	800c8c6 <_svfiprintf_r+0x1d6>
 800c854:	4b23      	ldr	r3, [pc, #140]	@ (800c8e4 <_svfiprintf_r+0x1f4>)
 800c856:	2b00      	cmp	r3, #0
 800c858:	d122      	bne.n	800c8a0 <_svfiprintf_r+0x1b0>
 800c85a:	2207      	movs	r2, #7
 800c85c:	9b07      	ldr	r3, [sp, #28]
 800c85e:	3307      	adds	r3, #7
 800c860:	4393      	bics	r3, r2
 800c862:	3308      	adds	r3, #8
 800c864:	9307      	str	r3, [sp, #28]
 800c866:	6963      	ldr	r3, [r4, #20]
 800c868:	9a04      	ldr	r2, [sp, #16]
 800c86a:	189b      	adds	r3, r3, r2
 800c86c:	6163      	str	r3, [r4, #20]
 800c86e:	e762      	b.n	800c736 <_svfiprintf_r+0x46>
 800c870:	4343      	muls	r3, r0
 800c872:	0035      	movs	r5, r6
 800c874:	2101      	movs	r1, #1
 800c876:	189b      	adds	r3, r3, r2
 800c878:	e7a4      	b.n	800c7c4 <_svfiprintf_r+0xd4>
 800c87a:	2300      	movs	r3, #0
 800c87c:	200a      	movs	r0, #10
 800c87e:	0019      	movs	r1, r3
 800c880:	3501      	adds	r5, #1
 800c882:	6063      	str	r3, [r4, #4]
 800c884:	782a      	ldrb	r2, [r5, #0]
 800c886:	1c6e      	adds	r6, r5, #1
 800c888:	3a30      	subs	r2, #48	@ 0x30
 800c88a:	2a09      	cmp	r2, #9
 800c88c:	d903      	bls.n	800c896 <_svfiprintf_r+0x1a6>
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0c8      	beq.n	800c824 <_svfiprintf_r+0x134>
 800c892:	9109      	str	r1, [sp, #36]	@ 0x24
 800c894:	e7c6      	b.n	800c824 <_svfiprintf_r+0x134>
 800c896:	4341      	muls	r1, r0
 800c898:	0035      	movs	r5, r6
 800c89a:	2301      	movs	r3, #1
 800c89c:	1889      	adds	r1, r1, r2
 800c89e:	e7f1      	b.n	800c884 <_svfiprintf_r+0x194>
 800c8a0:	aa07      	add	r2, sp, #28
 800c8a2:	9200      	str	r2, [sp, #0]
 800c8a4:	0021      	movs	r1, r4
 800c8a6:	003a      	movs	r2, r7
 800c8a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c8e8 <_svfiprintf_r+0x1f8>)
 800c8aa:	9803      	ldr	r0, [sp, #12]
 800c8ac:	e000      	b.n	800c8b0 <_svfiprintf_r+0x1c0>
 800c8ae:	bf00      	nop
 800c8b0:	9004      	str	r0, [sp, #16]
 800c8b2:	9b04      	ldr	r3, [sp, #16]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	d1d6      	bne.n	800c866 <_svfiprintf_r+0x176>
 800c8b8:	89bb      	ldrh	r3, [r7, #12]
 800c8ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c8bc:	065b      	lsls	r3, r3, #25
 800c8be:	d500      	bpl.n	800c8c2 <_svfiprintf_r+0x1d2>
 800c8c0:	e72c      	b.n	800c71c <_svfiprintf_r+0x2c>
 800c8c2:	b021      	add	sp, #132	@ 0x84
 800c8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8c6:	aa07      	add	r2, sp, #28
 800c8c8:	9200      	str	r2, [sp, #0]
 800c8ca:	0021      	movs	r1, r4
 800c8cc:	003a      	movs	r2, r7
 800c8ce:	4b06      	ldr	r3, [pc, #24]	@ (800c8e8 <_svfiprintf_r+0x1f8>)
 800c8d0:	9803      	ldr	r0, [sp, #12]
 800c8d2:	f000 f87b 	bl	800c9cc <_printf_i>
 800c8d6:	e7eb      	b.n	800c8b0 <_svfiprintf_r+0x1c0>
 800c8d8:	0800db08 	.word	0x0800db08
 800c8dc:	0800db0e 	.word	0x0800db0e
 800c8e0:	0800db12 	.word	0x0800db12
 800c8e4:	00000000 	.word	0x00000000
 800c8e8:	0800c631 	.word	0x0800c631

0800c8ec <_printf_common>:
 800c8ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8ee:	0016      	movs	r6, r2
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	688a      	ldr	r2, [r1, #8]
 800c8f4:	690b      	ldr	r3, [r1, #16]
 800c8f6:	000c      	movs	r4, r1
 800c8f8:	9000      	str	r0, [sp, #0]
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	da00      	bge.n	800c900 <_printf_common+0x14>
 800c8fe:	0013      	movs	r3, r2
 800c900:	0022      	movs	r2, r4
 800c902:	6033      	str	r3, [r6, #0]
 800c904:	3243      	adds	r2, #67	@ 0x43
 800c906:	7812      	ldrb	r2, [r2, #0]
 800c908:	2a00      	cmp	r2, #0
 800c90a:	d001      	beq.n	800c910 <_printf_common+0x24>
 800c90c:	3301      	adds	r3, #1
 800c90e:	6033      	str	r3, [r6, #0]
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	069b      	lsls	r3, r3, #26
 800c914:	d502      	bpl.n	800c91c <_printf_common+0x30>
 800c916:	6833      	ldr	r3, [r6, #0]
 800c918:	3302      	adds	r3, #2
 800c91a:	6033      	str	r3, [r6, #0]
 800c91c:	6822      	ldr	r2, [r4, #0]
 800c91e:	2306      	movs	r3, #6
 800c920:	0015      	movs	r5, r2
 800c922:	401d      	ands	r5, r3
 800c924:	421a      	tst	r2, r3
 800c926:	d027      	beq.n	800c978 <_printf_common+0x8c>
 800c928:	0023      	movs	r3, r4
 800c92a:	3343      	adds	r3, #67	@ 0x43
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	1e5a      	subs	r2, r3, #1
 800c930:	4193      	sbcs	r3, r2
 800c932:	6822      	ldr	r2, [r4, #0]
 800c934:	0692      	lsls	r2, r2, #26
 800c936:	d430      	bmi.n	800c99a <_printf_common+0xae>
 800c938:	0022      	movs	r2, r4
 800c93a:	9901      	ldr	r1, [sp, #4]
 800c93c:	9800      	ldr	r0, [sp, #0]
 800c93e:	9d08      	ldr	r5, [sp, #32]
 800c940:	3243      	adds	r2, #67	@ 0x43
 800c942:	47a8      	blx	r5
 800c944:	3001      	adds	r0, #1
 800c946:	d025      	beq.n	800c994 <_printf_common+0xa8>
 800c948:	2206      	movs	r2, #6
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	2500      	movs	r5, #0
 800c94e:	4013      	ands	r3, r2
 800c950:	2b04      	cmp	r3, #4
 800c952:	d105      	bne.n	800c960 <_printf_common+0x74>
 800c954:	6833      	ldr	r3, [r6, #0]
 800c956:	68e5      	ldr	r5, [r4, #12]
 800c958:	1aed      	subs	r5, r5, r3
 800c95a:	43eb      	mvns	r3, r5
 800c95c:	17db      	asrs	r3, r3, #31
 800c95e:	401d      	ands	r5, r3
 800c960:	68a3      	ldr	r3, [r4, #8]
 800c962:	6922      	ldr	r2, [r4, #16]
 800c964:	4293      	cmp	r3, r2
 800c966:	dd01      	ble.n	800c96c <_printf_common+0x80>
 800c968:	1a9b      	subs	r3, r3, r2
 800c96a:	18ed      	adds	r5, r5, r3
 800c96c:	2600      	movs	r6, #0
 800c96e:	42b5      	cmp	r5, r6
 800c970:	d120      	bne.n	800c9b4 <_printf_common+0xc8>
 800c972:	2000      	movs	r0, #0
 800c974:	e010      	b.n	800c998 <_printf_common+0xac>
 800c976:	3501      	adds	r5, #1
 800c978:	68e3      	ldr	r3, [r4, #12]
 800c97a:	6832      	ldr	r2, [r6, #0]
 800c97c:	1a9b      	subs	r3, r3, r2
 800c97e:	42ab      	cmp	r3, r5
 800c980:	ddd2      	ble.n	800c928 <_printf_common+0x3c>
 800c982:	0022      	movs	r2, r4
 800c984:	2301      	movs	r3, #1
 800c986:	9901      	ldr	r1, [sp, #4]
 800c988:	9800      	ldr	r0, [sp, #0]
 800c98a:	9f08      	ldr	r7, [sp, #32]
 800c98c:	3219      	adds	r2, #25
 800c98e:	47b8      	blx	r7
 800c990:	3001      	adds	r0, #1
 800c992:	d1f0      	bne.n	800c976 <_printf_common+0x8a>
 800c994:	2001      	movs	r0, #1
 800c996:	4240      	negs	r0, r0
 800c998:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c99a:	2030      	movs	r0, #48	@ 0x30
 800c99c:	18e1      	adds	r1, r4, r3
 800c99e:	3143      	adds	r1, #67	@ 0x43
 800c9a0:	7008      	strb	r0, [r1, #0]
 800c9a2:	0021      	movs	r1, r4
 800c9a4:	1c5a      	adds	r2, r3, #1
 800c9a6:	3145      	adds	r1, #69	@ 0x45
 800c9a8:	7809      	ldrb	r1, [r1, #0]
 800c9aa:	18a2      	adds	r2, r4, r2
 800c9ac:	3243      	adds	r2, #67	@ 0x43
 800c9ae:	3302      	adds	r3, #2
 800c9b0:	7011      	strb	r1, [r2, #0]
 800c9b2:	e7c1      	b.n	800c938 <_printf_common+0x4c>
 800c9b4:	0022      	movs	r2, r4
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	9901      	ldr	r1, [sp, #4]
 800c9ba:	9800      	ldr	r0, [sp, #0]
 800c9bc:	9f08      	ldr	r7, [sp, #32]
 800c9be:	321a      	adds	r2, #26
 800c9c0:	47b8      	blx	r7
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	d0e6      	beq.n	800c994 <_printf_common+0xa8>
 800c9c6:	3601      	adds	r6, #1
 800c9c8:	e7d1      	b.n	800c96e <_printf_common+0x82>
	...

0800c9cc <_printf_i>:
 800c9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ce:	b08b      	sub	sp, #44	@ 0x2c
 800c9d0:	9206      	str	r2, [sp, #24]
 800c9d2:	000a      	movs	r2, r1
 800c9d4:	3243      	adds	r2, #67	@ 0x43
 800c9d6:	9307      	str	r3, [sp, #28]
 800c9d8:	9005      	str	r0, [sp, #20]
 800c9da:	9203      	str	r2, [sp, #12]
 800c9dc:	7e0a      	ldrb	r2, [r1, #24]
 800c9de:	000c      	movs	r4, r1
 800c9e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9e2:	2a78      	cmp	r2, #120	@ 0x78
 800c9e4:	d809      	bhi.n	800c9fa <_printf_i+0x2e>
 800c9e6:	2a62      	cmp	r2, #98	@ 0x62
 800c9e8:	d80b      	bhi.n	800ca02 <_printf_i+0x36>
 800c9ea:	2a00      	cmp	r2, #0
 800c9ec:	d100      	bne.n	800c9f0 <_printf_i+0x24>
 800c9ee:	e0bc      	b.n	800cb6a <_printf_i+0x19e>
 800c9f0:	497b      	ldr	r1, [pc, #492]	@ (800cbe0 <_printf_i+0x214>)
 800c9f2:	9104      	str	r1, [sp, #16]
 800c9f4:	2a58      	cmp	r2, #88	@ 0x58
 800c9f6:	d100      	bne.n	800c9fa <_printf_i+0x2e>
 800c9f8:	e090      	b.n	800cb1c <_printf_i+0x150>
 800c9fa:	0025      	movs	r5, r4
 800c9fc:	3542      	adds	r5, #66	@ 0x42
 800c9fe:	702a      	strb	r2, [r5, #0]
 800ca00:	e022      	b.n	800ca48 <_printf_i+0x7c>
 800ca02:	0010      	movs	r0, r2
 800ca04:	3863      	subs	r0, #99	@ 0x63
 800ca06:	2815      	cmp	r0, #21
 800ca08:	d8f7      	bhi.n	800c9fa <_printf_i+0x2e>
 800ca0a:	f7f3 fb99 	bl	8000140 <__gnu_thumb1_case_shi>
 800ca0e:	0016      	.short	0x0016
 800ca10:	fff6001f 	.word	0xfff6001f
 800ca14:	fff6fff6 	.word	0xfff6fff6
 800ca18:	001ffff6 	.word	0x001ffff6
 800ca1c:	fff6fff6 	.word	0xfff6fff6
 800ca20:	fff6fff6 	.word	0xfff6fff6
 800ca24:	003600a1 	.word	0x003600a1
 800ca28:	fff60080 	.word	0xfff60080
 800ca2c:	00b2fff6 	.word	0x00b2fff6
 800ca30:	0036fff6 	.word	0x0036fff6
 800ca34:	fff6fff6 	.word	0xfff6fff6
 800ca38:	0084      	.short	0x0084
 800ca3a:	0025      	movs	r5, r4
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	3542      	adds	r5, #66	@ 0x42
 800ca40:	1d11      	adds	r1, r2, #4
 800ca42:	6019      	str	r1, [r3, #0]
 800ca44:	6813      	ldr	r3, [r2, #0]
 800ca46:	702b      	strb	r3, [r5, #0]
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e0a0      	b.n	800cb8e <_printf_i+0x1c2>
 800ca4c:	6818      	ldr	r0, [r3, #0]
 800ca4e:	6809      	ldr	r1, [r1, #0]
 800ca50:	1d02      	adds	r2, r0, #4
 800ca52:	060d      	lsls	r5, r1, #24
 800ca54:	d50b      	bpl.n	800ca6e <_printf_i+0xa2>
 800ca56:	6806      	ldr	r6, [r0, #0]
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	2e00      	cmp	r6, #0
 800ca5c:	da03      	bge.n	800ca66 <_printf_i+0x9a>
 800ca5e:	232d      	movs	r3, #45	@ 0x2d
 800ca60:	9a03      	ldr	r2, [sp, #12]
 800ca62:	4276      	negs	r6, r6
 800ca64:	7013      	strb	r3, [r2, #0]
 800ca66:	4b5e      	ldr	r3, [pc, #376]	@ (800cbe0 <_printf_i+0x214>)
 800ca68:	270a      	movs	r7, #10
 800ca6a:	9304      	str	r3, [sp, #16]
 800ca6c:	e018      	b.n	800caa0 <_printf_i+0xd4>
 800ca6e:	6806      	ldr	r6, [r0, #0]
 800ca70:	601a      	str	r2, [r3, #0]
 800ca72:	0649      	lsls	r1, r1, #25
 800ca74:	d5f1      	bpl.n	800ca5a <_printf_i+0x8e>
 800ca76:	b236      	sxth	r6, r6
 800ca78:	e7ef      	b.n	800ca5a <_printf_i+0x8e>
 800ca7a:	6808      	ldr	r0, [r1, #0]
 800ca7c:	6819      	ldr	r1, [r3, #0]
 800ca7e:	c940      	ldmia	r1!, {r6}
 800ca80:	0605      	lsls	r5, r0, #24
 800ca82:	d402      	bmi.n	800ca8a <_printf_i+0xbe>
 800ca84:	0640      	lsls	r0, r0, #25
 800ca86:	d500      	bpl.n	800ca8a <_printf_i+0xbe>
 800ca88:	b2b6      	uxth	r6, r6
 800ca8a:	6019      	str	r1, [r3, #0]
 800ca8c:	4b54      	ldr	r3, [pc, #336]	@ (800cbe0 <_printf_i+0x214>)
 800ca8e:	270a      	movs	r7, #10
 800ca90:	9304      	str	r3, [sp, #16]
 800ca92:	2a6f      	cmp	r2, #111	@ 0x6f
 800ca94:	d100      	bne.n	800ca98 <_printf_i+0xcc>
 800ca96:	3f02      	subs	r7, #2
 800ca98:	0023      	movs	r3, r4
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	3343      	adds	r3, #67	@ 0x43
 800ca9e:	701a      	strb	r2, [r3, #0]
 800caa0:	6863      	ldr	r3, [r4, #4]
 800caa2:	60a3      	str	r3, [r4, #8]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	db03      	blt.n	800cab0 <_printf_i+0xe4>
 800caa8:	2104      	movs	r1, #4
 800caaa:	6822      	ldr	r2, [r4, #0]
 800caac:	438a      	bics	r2, r1
 800caae:	6022      	str	r2, [r4, #0]
 800cab0:	2e00      	cmp	r6, #0
 800cab2:	d102      	bne.n	800caba <_printf_i+0xee>
 800cab4:	9d03      	ldr	r5, [sp, #12]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00c      	beq.n	800cad4 <_printf_i+0x108>
 800caba:	9d03      	ldr	r5, [sp, #12]
 800cabc:	0030      	movs	r0, r6
 800cabe:	0039      	movs	r1, r7
 800cac0:	f7f3 fbce 	bl	8000260 <__aeabi_uidivmod>
 800cac4:	9b04      	ldr	r3, [sp, #16]
 800cac6:	3d01      	subs	r5, #1
 800cac8:	5c5b      	ldrb	r3, [r3, r1]
 800caca:	702b      	strb	r3, [r5, #0]
 800cacc:	0033      	movs	r3, r6
 800cace:	0006      	movs	r6, r0
 800cad0:	429f      	cmp	r7, r3
 800cad2:	d9f3      	bls.n	800cabc <_printf_i+0xf0>
 800cad4:	2f08      	cmp	r7, #8
 800cad6:	d109      	bne.n	800caec <_printf_i+0x120>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	07db      	lsls	r3, r3, #31
 800cadc:	d506      	bpl.n	800caec <_printf_i+0x120>
 800cade:	6862      	ldr	r2, [r4, #4]
 800cae0:	6923      	ldr	r3, [r4, #16]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	dc02      	bgt.n	800caec <_printf_i+0x120>
 800cae6:	2330      	movs	r3, #48	@ 0x30
 800cae8:	3d01      	subs	r5, #1
 800caea:	702b      	strb	r3, [r5, #0]
 800caec:	9b03      	ldr	r3, [sp, #12]
 800caee:	1b5b      	subs	r3, r3, r5
 800caf0:	6123      	str	r3, [r4, #16]
 800caf2:	9b07      	ldr	r3, [sp, #28]
 800caf4:	0021      	movs	r1, r4
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	9805      	ldr	r0, [sp, #20]
 800cafa:	9b06      	ldr	r3, [sp, #24]
 800cafc:	aa09      	add	r2, sp, #36	@ 0x24
 800cafe:	f7ff fef5 	bl	800c8ec <_printf_common>
 800cb02:	3001      	adds	r0, #1
 800cb04:	d148      	bne.n	800cb98 <_printf_i+0x1cc>
 800cb06:	2001      	movs	r0, #1
 800cb08:	4240      	negs	r0, r0
 800cb0a:	b00b      	add	sp, #44	@ 0x2c
 800cb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb0e:	2220      	movs	r2, #32
 800cb10:	6809      	ldr	r1, [r1, #0]
 800cb12:	430a      	orrs	r2, r1
 800cb14:	6022      	str	r2, [r4, #0]
 800cb16:	2278      	movs	r2, #120	@ 0x78
 800cb18:	4932      	ldr	r1, [pc, #200]	@ (800cbe4 <_printf_i+0x218>)
 800cb1a:	9104      	str	r1, [sp, #16]
 800cb1c:	0021      	movs	r1, r4
 800cb1e:	3145      	adds	r1, #69	@ 0x45
 800cb20:	700a      	strb	r2, [r1, #0]
 800cb22:	6819      	ldr	r1, [r3, #0]
 800cb24:	6822      	ldr	r2, [r4, #0]
 800cb26:	c940      	ldmia	r1!, {r6}
 800cb28:	0610      	lsls	r0, r2, #24
 800cb2a:	d402      	bmi.n	800cb32 <_printf_i+0x166>
 800cb2c:	0650      	lsls	r0, r2, #25
 800cb2e:	d500      	bpl.n	800cb32 <_printf_i+0x166>
 800cb30:	b2b6      	uxth	r6, r6
 800cb32:	6019      	str	r1, [r3, #0]
 800cb34:	07d3      	lsls	r3, r2, #31
 800cb36:	d502      	bpl.n	800cb3e <_printf_i+0x172>
 800cb38:	2320      	movs	r3, #32
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	2e00      	cmp	r6, #0
 800cb40:	d001      	beq.n	800cb46 <_printf_i+0x17a>
 800cb42:	2710      	movs	r7, #16
 800cb44:	e7a8      	b.n	800ca98 <_printf_i+0xcc>
 800cb46:	2220      	movs	r2, #32
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	4393      	bics	r3, r2
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	e7f8      	b.n	800cb42 <_printf_i+0x176>
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	680d      	ldr	r5, [r1, #0]
 800cb54:	1d10      	adds	r0, r2, #4
 800cb56:	6949      	ldr	r1, [r1, #20]
 800cb58:	6018      	str	r0, [r3, #0]
 800cb5a:	6813      	ldr	r3, [r2, #0]
 800cb5c:	062e      	lsls	r6, r5, #24
 800cb5e:	d501      	bpl.n	800cb64 <_printf_i+0x198>
 800cb60:	6019      	str	r1, [r3, #0]
 800cb62:	e002      	b.n	800cb6a <_printf_i+0x19e>
 800cb64:	066d      	lsls	r5, r5, #25
 800cb66:	d5fb      	bpl.n	800cb60 <_printf_i+0x194>
 800cb68:	8019      	strh	r1, [r3, #0]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	9d03      	ldr	r5, [sp, #12]
 800cb6e:	6123      	str	r3, [r4, #16]
 800cb70:	e7bf      	b.n	800caf2 <_printf_i+0x126>
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	1d11      	adds	r1, r2, #4
 800cb76:	6019      	str	r1, [r3, #0]
 800cb78:	6815      	ldr	r5, [r2, #0]
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	0028      	movs	r0, r5
 800cb7e:	6862      	ldr	r2, [r4, #4]
 800cb80:	f000 f91a 	bl	800cdb8 <memchr>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d001      	beq.n	800cb8c <_printf_i+0x1c0>
 800cb88:	1b40      	subs	r0, r0, r5
 800cb8a:	6060      	str	r0, [r4, #4]
 800cb8c:	6863      	ldr	r3, [r4, #4]
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	2300      	movs	r3, #0
 800cb92:	9a03      	ldr	r2, [sp, #12]
 800cb94:	7013      	strb	r3, [r2, #0]
 800cb96:	e7ac      	b.n	800caf2 <_printf_i+0x126>
 800cb98:	002a      	movs	r2, r5
 800cb9a:	6923      	ldr	r3, [r4, #16]
 800cb9c:	9906      	ldr	r1, [sp, #24]
 800cb9e:	9805      	ldr	r0, [sp, #20]
 800cba0:	9d07      	ldr	r5, [sp, #28]
 800cba2:	47a8      	blx	r5
 800cba4:	3001      	adds	r0, #1
 800cba6:	d0ae      	beq.n	800cb06 <_printf_i+0x13a>
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	079b      	lsls	r3, r3, #30
 800cbac:	d415      	bmi.n	800cbda <_printf_i+0x20e>
 800cbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb0:	68e0      	ldr	r0, [r4, #12]
 800cbb2:	4298      	cmp	r0, r3
 800cbb4:	daa9      	bge.n	800cb0a <_printf_i+0x13e>
 800cbb6:	0018      	movs	r0, r3
 800cbb8:	e7a7      	b.n	800cb0a <_printf_i+0x13e>
 800cbba:	0022      	movs	r2, r4
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	9906      	ldr	r1, [sp, #24]
 800cbc0:	9805      	ldr	r0, [sp, #20]
 800cbc2:	9e07      	ldr	r6, [sp, #28]
 800cbc4:	3219      	adds	r2, #25
 800cbc6:	47b0      	blx	r6
 800cbc8:	3001      	adds	r0, #1
 800cbca:	d09c      	beq.n	800cb06 <_printf_i+0x13a>
 800cbcc:	3501      	adds	r5, #1
 800cbce:	68e3      	ldr	r3, [r4, #12]
 800cbd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbd2:	1a9b      	subs	r3, r3, r2
 800cbd4:	42ab      	cmp	r3, r5
 800cbd6:	dcf0      	bgt.n	800cbba <_printf_i+0x1ee>
 800cbd8:	e7e9      	b.n	800cbae <_printf_i+0x1e2>
 800cbda:	2500      	movs	r5, #0
 800cbdc:	e7f7      	b.n	800cbce <_printf_i+0x202>
 800cbde:	46c0      	nop			@ (mov r8, r8)
 800cbe0:	0800db19 	.word	0x0800db19
 800cbe4:	0800db2a 	.word	0x0800db2a

0800cbe8 <__sflush_r>:
 800cbe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbea:	220c      	movs	r2, #12
 800cbec:	5e8b      	ldrsh	r3, [r1, r2]
 800cbee:	0005      	movs	r5, r0
 800cbf0:	000c      	movs	r4, r1
 800cbf2:	071a      	lsls	r2, r3, #28
 800cbf4:	d456      	bmi.n	800cca4 <__sflush_r+0xbc>
 800cbf6:	684a      	ldr	r2, [r1, #4]
 800cbf8:	2a00      	cmp	r2, #0
 800cbfa:	dc02      	bgt.n	800cc02 <__sflush_r+0x1a>
 800cbfc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800cbfe:	2a00      	cmp	r2, #0
 800cc00:	dd4e      	ble.n	800cca0 <__sflush_r+0xb8>
 800cc02:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800cc04:	2f00      	cmp	r7, #0
 800cc06:	d04b      	beq.n	800cca0 <__sflush_r+0xb8>
 800cc08:	2200      	movs	r2, #0
 800cc0a:	2080      	movs	r0, #128	@ 0x80
 800cc0c:	682e      	ldr	r6, [r5, #0]
 800cc0e:	602a      	str	r2, [r5, #0]
 800cc10:	001a      	movs	r2, r3
 800cc12:	0140      	lsls	r0, r0, #5
 800cc14:	6a21      	ldr	r1, [r4, #32]
 800cc16:	4002      	ands	r2, r0
 800cc18:	4203      	tst	r3, r0
 800cc1a:	d033      	beq.n	800cc84 <__sflush_r+0x9c>
 800cc1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc1e:	89a3      	ldrh	r3, [r4, #12]
 800cc20:	075b      	lsls	r3, r3, #29
 800cc22:	d506      	bpl.n	800cc32 <__sflush_r+0x4a>
 800cc24:	6863      	ldr	r3, [r4, #4]
 800cc26:	1ad2      	subs	r2, r2, r3
 800cc28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d001      	beq.n	800cc32 <__sflush_r+0x4a>
 800cc2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc30:	1ad2      	subs	r2, r2, r3
 800cc32:	2300      	movs	r3, #0
 800cc34:	0028      	movs	r0, r5
 800cc36:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800cc38:	6a21      	ldr	r1, [r4, #32]
 800cc3a:	47b8      	blx	r7
 800cc3c:	89a2      	ldrh	r2, [r4, #12]
 800cc3e:	1c43      	adds	r3, r0, #1
 800cc40:	d106      	bne.n	800cc50 <__sflush_r+0x68>
 800cc42:	6829      	ldr	r1, [r5, #0]
 800cc44:	291d      	cmp	r1, #29
 800cc46:	d846      	bhi.n	800ccd6 <__sflush_r+0xee>
 800cc48:	4b29      	ldr	r3, [pc, #164]	@ (800ccf0 <__sflush_r+0x108>)
 800cc4a:	410b      	asrs	r3, r1
 800cc4c:	07db      	lsls	r3, r3, #31
 800cc4e:	d442      	bmi.n	800ccd6 <__sflush_r+0xee>
 800cc50:	2300      	movs	r3, #0
 800cc52:	6063      	str	r3, [r4, #4]
 800cc54:	6923      	ldr	r3, [r4, #16]
 800cc56:	6023      	str	r3, [r4, #0]
 800cc58:	04d2      	lsls	r2, r2, #19
 800cc5a:	d505      	bpl.n	800cc68 <__sflush_r+0x80>
 800cc5c:	1c43      	adds	r3, r0, #1
 800cc5e:	d102      	bne.n	800cc66 <__sflush_r+0x7e>
 800cc60:	682b      	ldr	r3, [r5, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d100      	bne.n	800cc68 <__sflush_r+0x80>
 800cc66:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc6a:	602e      	str	r6, [r5, #0]
 800cc6c:	2900      	cmp	r1, #0
 800cc6e:	d017      	beq.n	800cca0 <__sflush_r+0xb8>
 800cc70:	0023      	movs	r3, r4
 800cc72:	3344      	adds	r3, #68	@ 0x44
 800cc74:	4299      	cmp	r1, r3
 800cc76:	d002      	beq.n	800cc7e <__sflush_r+0x96>
 800cc78:	0028      	movs	r0, r5
 800cc7a:	f7fe fb8f 	bl	800b39c <_free_r>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc82:	e00d      	b.n	800cca0 <__sflush_r+0xb8>
 800cc84:	2301      	movs	r3, #1
 800cc86:	0028      	movs	r0, r5
 800cc88:	47b8      	blx	r7
 800cc8a:	0002      	movs	r2, r0
 800cc8c:	1c43      	adds	r3, r0, #1
 800cc8e:	d1c6      	bne.n	800cc1e <__sflush_r+0x36>
 800cc90:	682b      	ldr	r3, [r5, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d0c3      	beq.n	800cc1e <__sflush_r+0x36>
 800cc96:	2b1d      	cmp	r3, #29
 800cc98:	d001      	beq.n	800cc9e <__sflush_r+0xb6>
 800cc9a:	2b16      	cmp	r3, #22
 800cc9c:	d11a      	bne.n	800ccd4 <__sflush_r+0xec>
 800cc9e:	602e      	str	r6, [r5, #0]
 800cca0:	2000      	movs	r0, #0
 800cca2:	e01e      	b.n	800cce2 <__sflush_r+0xfa>
 800cca4:	690e      	ldr	r6, [r1, #16]
 800cca6:	2e00      	cmp	r6, #0
 800cca8:	d0fa      	beq.n	800cca0 <__sflush_r+0xb8>
 800ccaa:	680f      	ldr	r7, [r1, #0]
 800ccac:	600e      	str	r6, [r1, #0]
 800ccae:	1bba      	subs	r2, r7, r6
 800ccb0:	9201      	str	r2, [sp, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	079b      	lsls	r3, r3, #30
 800ccb6:	d100      	bne.n	800ccba <__sflush_r+0xd2>
 800ccb8:	694a      	ldr	r2, [r1, #20]
 800ccba:	60a2      	str	r2, [r4, #8]
 800ccbc:	9b01      	ldr	r3, [sp, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	ddee      	ble.n	800cca0 <__sflush_r+0xb8>
 800ccc2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ccc4:	0032      	movs	r2, r6
 800ccc6:	001f      	movs	r7, r3
 800ccc8:	0028      	movs	r0, r5
 800ccca:	9b01      	ldr	r3, [sp, #4]
 800cccc:	6a21      	ldr	r1, [r4, #32]
 800ccce:	47b8      	blx	r7
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	dc07      	bgt.n	800cce4 <__sflush_r+0xfc>
 800ccd4:	89a2      	ldrh	r2, [r4, #12]
 800ccd6:	2340      	movs	r3, #64	@ 0x40
 800ccd8:	2001      	movs	r0, #1
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	b21b      	sxth	r3, r3
 800ccde:	81a3      	strh	r3, [r4, #12]
 800cce0:	4240      	negs	r0, r0
 800cce2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	1836      	adds	r6, r6, r0
 800cce8:	1a1b      	subs	r3, r3, r0
 800ccea:	9301      	str	r3, [sp, #4]
 800ccec:	e7e6      	b.n	800ccbc <__sflush_r+0xd4>
 800ccee:	46c0      	nop			@ (mov r8, r8)
 800ccf0:	dfbffffe 	.word	0xdfbffffe

0800ccf4 <_fflush_r>:
 800ccf4:	690b      	ldr	r3, [r1, #16]
 800ccf6:	b570      	push	{r4, r5, r6, lr}
 800ccf8:	0005      	movs	r5, r0
 800ccfa:	000c      	movs	r4, r1
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <_fflush_r+0x12>
 800cd00:	2500      	movs	r5, #0
 800cd02:	0028      	movs	r0, r5
 800cd04:	bd70      	pop	{r4, r5, r6, pc}
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d004      	beq.n	800cd14 <_fflush_r+0x20>
 800cd0a:	6a03      	ldr	r3, [r0, #32]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <_fflush_r+0x20>
 800cd10:	f7fe f938 	bl	800af84 <__sinit>
 800cd14:	220c      	movs	r2, #12
 800cd16:	5ea3      	ldrsh	r3, [r4, r2]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d0f1      	beq.n	800cd00 <_fflush_r+0xc>
 800cd1c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd1e:	07d2      	lsls	r2, r2, #31
 800cd20:	d404      	bmi.n	800cd2c <_fflush_r+0x38>
 800cd22:	059b      	lsls	r3, r3, #22
 800cd24:	d402      	bmi.n	800cd2c <_fflush_r+0x38>
 800cd26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd28:	f7fe fb09 	bl	800b33e <__retarget_lock_acquire_recursive>
 800cd2c:	0028      	movs	r0, r5
 800cd2e:	0021      	movs	r1, r4
 800cd30:	f7ff ff5a 	bl	800cbe8 <__sflush_r>
 800cd34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd36:	0005      	movs	r5, r0
 800cd38:	07db      	lsls	r3, r3, #31
 800cd3a:	d4e2      	bmi.n	800cd02 <_fflush_r+0xe>
 800cd3c:	89a3      	ldrh	r3, [r4, #12]
 800cd3e:	059b      	lsls	r3, r3, #22
 800cd40:	d4df      	bmi.n	800cd02 <_fflush_r+0xe>
 800cd42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd44:	f7fe fafc 	bl	800b340 <__retarget_lock_release_recursive>
 800cd48:	e7db      	b.n	800cd02 <_fflush_r+0xe>
	...

0800cd4c <fiprintf>:
 800cd4c:	b40e      	push	{r1, r2, r3}
 800cd4e:	b517      	push	{r0, r1, r2, r4, lr}
 800cd50:	4c05      	ldr	r4, [pc, #20]	@ (800cd68 <fiprintf+0x1c>)
 800cd52:	ab05      	add	r3, sp, #20
 800cd54:	cb04      	ldmia	r3!, {r2}
 800cd56:	0001      	movs	r1, r0
 800cd58:	6820      	ldr	r0, [r4, #0]
 800cd5a:	9301      	str	r3, [sp, #4]
 800cd5c:	f000 f8c2 	bl	800cee4 <_vfiprintf_r>
 800cd60:	bc1e      	pop	{r1, r2, r3, r4}
 800cd62:	bc08      	pop	{r3}
 800cd64:	b003      	add	sp, #12
 800cd66:	4718      	bx	r3
 800cd68:	200001cc 	.word	0x200001cc

0800cd6c <memmove>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	4288      	cmp	r0, r1
 800cd70:	d806      	bhi.n	800cd80 <memmove+0x14>
 800cd72:	2300      	movs	r3, #0
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d008      	beq.n	800cd8a <memmove+0x1e>
 800cd78:	5ccc      	ldrb	r4, [r1, r3]
 800cd7a:	54c4      	strb	r4, [r0, r3]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	e7f9      	b.n	800cd74 <memmove+0x8>
 800cd80:	188b      	adds	r3, r1, r2
 800cd82:	4298      	cmp	r0, r3
 800cd84:	d2f5      	bcs.n	800cd72 <memmove+0x6>
 800cd86:	3a01      	subs	r2, #1
 800cd88:	d200      	bcs.n	800cd8c <memmove+0x20>
 800cd8a:	bd10      	pop	{r4, pc}
 800cd8c:	5c8b      	ldrb	r3, [r1, r2]
 800cd8e:	5483      	strb	r3, [r0, r2]
 800cd90:	e7f9      	b.n	800cd86 <memmove+0x1a>
	...

0800cd94 <_sbrk_r>:
 800cd94:	2300      	movs	r3, #0
 800cd96:	b570      	push	{r4, r5, r6, lr}
 800cd98:	4d06      	ldr	r5, [pc, #24]	@ (800cdb4 <_sbrk_r+0x20>)
 800cd9a:	0004      	movs	r4, r0
 800cd9c:	0008      	movs	r0, r1
 800cd9e:	602b      	str	r3, [r5, #0]
 800cda0:	f7f7 ff62 	bl	8004c68 <_sbrk>
 800cda4:	1c43      	adds	r3, r0, #1
 800cda6:	d103      	bne.n	800cdb0 <_sbrk_r+0x1c>
 800cda8:	682b      	ldr	r3, [r5, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d000      	beq.n	800cdb0 <_sbrk_r+0x1c>
 800cdae:	6023      	str	r3, [r4, #0]
 800cdb0:	bd70      	pop	{r4, r5, r6, pc}
 800cdb2:	46c0      	nop			@ (mov r8, r8)
 800cdb4:	200007c8 	.word	0x200007c8

0800cdb8 <memchr>:
 800cdb8:	b2c9      	uxtb	r1, r1
 800cdba:	1882      	adds	r2, r0, r2
 800cdbc:	4290      	cmp	r0, r2
 800cdbe:	d101      	bne.n	800cdc4 <memchr+0xc>
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	4770      	bx	lr
 800cdc4:	7803      	ldrb	r3, [r0, #0]
 800cdc6:	428b      	cmp	r3, r1
 800cdc8:	d0fb      	beq.n	800cdc2 <memchr+0xa>
 800cdca:	3001      	adds	r0, #1
 800cdcc:	e7f6      	b.n	800cdbc <memchr+0x4>

0800cdce <abort>:
 800cdce:	2006      	movs	r0, #6
 800cdd0:	b510      	push	{r4, lr}
 800cdd2:	f000 fa6d 	bl	800d2b0 <raise>
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	f7f7 fed4 	bl	8004b84 <_exit>

0800cddc <_calloc_r>:
 800cddc:	b570      	push	{r4, r5, r6, lr}
 800cdde:	0c0b      	lsrs	r3, r1, #16
 800cde0:	0c15      	lsrs	r5, r2, #16
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d11e      	bne.n	800ce24 <_calloc_r+0x48>
 800cde6:	2d00      	cmp	r5, #0
 800cde8:	d10c      	bne.n	800ce04 <_calloc_r+0x28>
 800cdea:	b289      	uxth	r1, r1
 800cdec:	b294      	uxth	r4, r2
 800cdee:	434c      	muls	r4, r1
 800cdf0:	0021      	movs	r1, r4
 800cdf2:	f7fe fea3 	bl	800bb3c <_malloc_r>
 800cdf6:	1e05      	subs	r5, r0, #0
 800cdf8:	d01a      	beq.n	800ce30 <_calloc_r+0x54>
 800cdfa:	0022      	movs	r2, r4
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	f7fe f975 	bl	800b0ec <memset>
 800ce02:	e016      	b.n	800ce32 <_calloc_r+0x56>
 800ce04:	1c2b      	adds	r3, r5, #0
 800ce06:	1c0c      	adds	r4, r1, #0
 800ce08:	b289      	uxth	r1, r1
 800ce0a:	b292      	uxth	r2, r2
 800ce0c:	434a      	muls	r2, r1
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	b2a1      	uxth	r1, r4
 800ce12:	4359      	muls	r1, r3
 800ce14:	0c14      	lsrs	r4, r2, #16
 800ce16:	190c      	adds	r4, r1, r4
 800ce18:	0c23      	lsrs	r3, r4, #16
 800ce1a:	d107      	bne.n	800ce2c <_calloc_r+0x50>
 800ce1c:	0424      	lsls	r4, r4, #16
 800ce1e:	b292      	uxth	r2, r2
 800ce20:	4314      	orrs	r4, r2
 800ce22:	e7e5      	b.n	800cdf0 <_calloc_r+0x14>
 800ce24:	2d00      	cmp	r5, #0
 800ce26:	d101      	bne.n	800ce2c <_calloc_r+0x50>
 800ce28:	1c14      	adds	r4, r2, #0
 800ce2a:	e7ed      	b.n	800ce08 <_calloc_r+0x2c>
 800ce2c:	230c      	movs	r3, #12
 800ce2e:	6003      	str	r3, [r0, #0]
 800ce30:	2500      	movs	r5, #0
 800ce32:	0028      	movs	r0, r5
 800ce34:	bd70      	pop	{r4, r5, r6, pc}

0800ce36 <_realloc_r>:
 800ce36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce38:	0006      	movs	r6, r0
 800ce3a:	000c      	movs	r4, r1
 800ce3c:	0015      	movs	r5, r2
 800ce3e:	2900      	cmp	r1, #0
 800ce40:	d105      	bne.n	800ce4e <_realloc_r+0x18>
 800ce42:	0011      	movs	r1, r2
 800ce44:	f7fe fe7a 	bl	800bb3c <_malloc_r>
 800ce48:	0004      	movs	r4, r0
 800ce4a:	0020      	movs	r0, r4
 800ce4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce4e:	2a00      	cmp	r2, #0
 800ce50:	d103      	bne.n	800ce5a <_realloc_r+0x24>
 800ce52:	f7fe faa3 	bl	800b39c <_free_r>
 800ce56:	2400      	movs	r4, #0
 800ce58:	e7f7      	b.n	800ce4a <_realloc_r+0x14>
 800ce5a:	f000 fa49 	bl	800d2f0 <_malloc_usable_size_r>
 800ce5e:	0007      	movs	r7, r0
 800ce60:	4285      	cmp	r5, r0
 800ce62:	d802      	bhi.n	800ce6a <_realloc_r+0x34>
 800ce64:	0843      	lsrs	r3, r0, #1
 800ce66:	42ab      	cmp	r3, r5
 800ce68:	d3ef      	bcc.n	800ce4a <_realloc_r+0x14>
 800ce6a:	0029      	movs	r1, r5
 800ce6c:	0030      	movs	r0, r6
 800ce6e:	f7fe fe65 	bl	800bb3c <_malloc_r>
 800ce72:	9001      	str	r0, [sp, #4]
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d0ee      	beq.n	800ce56 <_realloc_r+0x20>
 800ce78:	002a      	movs	r2, r5
 800ce7a:	42bd      	cmp	r5, r7
 800ce7c:	d900      	bls.n	800ce80 <_realloc_r+0x4a>
 800ce7e:	003a      	movs	r2, r7
 800ce80:	0021      	movs	r1, r4
 800ce82:	9801      	ldr	r0, [sp, #4]
 800ce84:	f7fe fa5d 	bl	800b342 <memcpy>
 800ce88:	0021      	movs	r1, r4
 800ce8a:	0030      	movs	r0, r6
 800ce8c:	f7fe fa86 	bl	800b39c <_free_r>
 800ce90:	9c01      	ldr	r4, [sp, #4]
 800ce92:	e7da      	b.n	800ce4a <_realloc_r+0x14>

0800ce94 <__sfputc_r>:
 800ce94:	6893      	ldr	r3, [r2, #8]
 800ce96:	b510      	push	{r4, lr}
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	6093      	str	r3, [r2, #8]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	da04      	bge.n	800ceaa <__sfputc_r+0x16>
 800cea0:	6994      	ldr	r4, [r2, #24]
 800cea2:	42a3      	cmp	r3, r4
 800cea4:	db07      	blt.n	800ceb6 <__sfputc_r+0x22>
 800cea6:	290a      	cmp	r1, #10
 800cea8:	d005      	beq.n	800ceb6 <__sfputc_r+0x22>
 800ceaa:	6813      	ldr	r3, [r2, #0]
 800ceac:	1c58      	adds	r0, r3, #1
 800ceae:	6010      	str	r0, [r2, #0]
 800ceb0:	7019      	strb	r1, [r3, #0]
 800ceb2:	0008      	movs	r0, r1
 800ceb4:	bd10      	pop	{r4, pc}
 800ceb6:	f000 f931 	bl	800d11c <__swbuf_r>
 800ceba:	0001      	movs	r1, r0
 800cebc:	e7f9      	b.n	800ceb2 <__sfputc_r+0x1e>

0800cebe <__sfputs_r>:
 800cebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec0:	0006      	movs	r6, r0
 800cec2:	000f      	movs	r7, r1
 800cec4:	0014      	movs	r4, r2
 800cec6:	18d5      	adds	r5, r2, r3
 800cec8:	42ac      	cmp	r4, r5
 800ceca:	d101      	bne.n	800ced0 <__sfputs_r+0x12>
 800cecc:	2000      	movs	r0, #0
 800cece:	e007      	b.n	800cee0 <__sfputs_r+0x22>
 800ced0:	7821      	ldrb	r1, [r4, #0]
 800ced2:	003a      	movs	r2, r7
 800ced4:	0030      	movs	r0, r6
 800ced6:	f7ff ffdd 	bl	800ce94 <__sfputc_r>
 800ceda:	3401      	adds	r4, #1
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d1f3      	bne.n	800cec8 <__sfputs_r+0xa>
 800cee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cee4 <_vfiprintf_r>:
 800cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cee6:	b0a1      	sub	sp, #132	@ 0x84
 800cee8:	000f      	movs	r7, r1
 800ceea:	0015      	movs	r5, r2
 800ceec:	001e      	movs	r6, r3
 800ceee:	9003      	str	r0, [sp, #12]
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d004      	beq.n	800cefe <_vfiprintf_r+0x1a>
 800cef4:	6a03      	ldr	r3, [r0, #32]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <_vfiprintf_r+0x1a>
 800cefa:	f7fe f843 	bl	800af84 <__sinit>
 800cefe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf00:	07db      	lsls	r3, r3, #31
 800cf02:	d405      	bmi.n	800cf10 <_vfiprintf_r+0x2c>
 800cf04:	89bb      	ldrh	r3, [r7, #12]
 800cf06:	059b      	lsls	r3, r3, #22
 800cf08:	d402      	bmi.n	800cf10 <_vfiprintf_r+0x2c>
 800cf0a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf0c:	f7fe fa17 	bl	800b33e <__retarget_lock_acquire_recursive>
 800cf10:	89bb      	ldrh	r3, [r7, #12]
 800cf12:	071b      	lsls	r3, r3, #28
 800cf14:	d502      	bpl.n	800cf1c <_vfiprintf_r+0x38>
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d113      	bne.n	800cf44 <_vfiprintf_r+0x60>
 800cf1c:	0039      	movs	r1, r7
 800cf1e:	9803      	ldr	r0, [sp, #12]
 800cf20:	f000 f93e 	bl	800d1a0 <__swsetup_r>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d00d      	beq.n	800cf44 <_vfiprintf_r+0x60>
 800cf28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf2a:	07db      	lsls	r3, r3, #31
 800cf2c:	d503      	bpl.n	800cf36 <_vfiprintf_r+0x52>
 800cf2e:	2001      	movs	r0, #1
 800cf30:	4240      	negs	r0, r0
 800cf32:	b021      	add	sp, #132	@ 0x84
 800cf34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf36:	89bb      	ldrh	r3, [r7, #12]
 800cf38:	059b      	lsls	r3, r3, #22
 800cf3a:	d4f8      	bmi.n	800cf2e <_vfiprintf_r+0x4a>
 800cf3c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf3e:	f7fe f9ff 	bl	800b340 <__retarget_lock_release_recursive>
 800cf42:	e7f4      	b.n	800cf2e <_vfiprintf_r+0x4a>
 800cf44:	2300      	movs	r3, #0
 800cf46:	ac08      	add	r4, sp, #32
 800cf48:	6163      	str	r3, [r4, #20]
 800cf4a:	3320      	adds	r3, #32
 800cf4c:	7663      	strb	r3, [r4, #25]
 800cf4e:	3310      	adds	r3, #16
 800cf50:	76a3      	strb	r3, [r4, #26]
 800cf52:	9607      	str	r6, [sp, #28]
 800cf54:	002e      	movs	r6, r5
 800cf56:	7833      	ldrb	r3, [r6, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <_vfiprintf_r+0x7c>
 800cf5c:	2b25      	cmp	r3, #37	@ 0x25
 800cf5e:	d148      	bne.n	800cff2 <_vfiprintf_r+0x10e>
 800cf60:	1b73      	subs	r3, r6, r5
 800cf62:	9305      	str	r3, [sp, #20]
 800cf64:	42ae      	cmp	r6, r5
 800cf66:	d00b      	beq.n	800cf80 <_vfiprintf_r+0x9c>
 800cf68:	002a      	movs	r2, r5
 800cf6a:	0039      	movs	r1, r7
 800cf6c:	9803      	ldr	r0, [sp, #12]
 800cf6e:	f7ff ffa6 	bl	800cebe <__sfputs_r>
 800cf72:	3001      	adds	r0, #1
 800cf74:	d100      	bne.n	800cf78 <_vfiprintf_r+0x94>
 800cf76:	e0ae      	b.n	800d0d6 <_vfiprintf_r+0x1f2>
 800cf78:	6963      	ldr	r3, [r4, #20]
 800cf7a:	9a05      	ldr	r2, [sp, #20]
 800cf7c:	189b      	adds	r3, r3, r2
 800cf7e:	6163      	str	r3, [r4, #20]
 800cf80:	7833      	ldrb	r3, [r6, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d100      	bne.n	800cf88 <_vfiprintf_r+0xa4>
 800cf86:	e0a6      	b.n	800d0d6 <_vfiprintf_r+0x1f2>
 800cf88:	2201      	movs	r2, #1
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	4252      	negs	r2, r2
 800cf8e:	6062      	str	r2, [r4, #4]
 800cf90:	a904      	add	r1, sp, #16
 800cf92:	3254      	adds	r2, #84	@ 0x54
 800cf94:	1852      	adds	r2, r2, r1
 800cf96:	1c75      	adds	r5, r6, #1
 800cf98:	6023      	str	r3, [r4, #0]
 800cf9a:	60e3      	str	r3, [r4, #12]
 800cf9c:	60a3      	str	r3, [r4, #8]
 800cf9e:	7013      	strb	r3, [r2, #0]
 800cfa0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cfa2:	4b59      	ldr	r3, [pc, #356]	@ (800d108 <_vfiprintf_r+0x224>)
 800cfa4:	2205      	movs	r2, #5
 800cfa6:	0018      	movs	r0, r3
 800cfa8:	7829      	ldrb	r1, [r5, #0]
 800cfaa:	9305      	str	r3, [sp, #20]
 800cfac:	f7ff ff04 	bl	800cdb8 <memchr>
 800cfb0:	1c6e      	adds	r6, r5, #1
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d11f      	bne.n	800cff6 <_vfiprintf_r+0x112>
 800cfb6:	6822      	ldr	r2, [r4, #0]
 800cfb8:	06d3      	lsls	r3, r2, #27
 800cfba:	d504      	bpl.n	800cfc6 <_vfiprintf_r+0xe2>
 800cfbc:	2353      	movs	r3, #83	@ 0x53
 800cfbe:	a904      	add	r1, sp, #16
 800cfc0:	185b      	adds	r3, r3, r1
 800cfc2:	2120      	movs	r1, #32
 800cfc4:	7019      	strb	r1, [r3, #0]
 800cfc6:	0713      	lsls	r3, r2, #28
 800cfc8:	d504      	bpl.n	800cfd4 <_vfiprintf_r+0xf0>
 800cfca:	2353      	movs	r3, #83	@ 0x53
 800cfcc:	a904      	add	r1, sp, #16
 800cfce:	185b      	adds	r3, r3, r1
 800cfd0:	212b      	movs	r1, #43	@ 0x2b
 800cfd2:	7019      	strb	r1, [r3, #0]
 800cfd4:	782b      	ldrb	r3, [r5, #0]
 800cfd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfd8:	d016      	beq.n	800d008 <_vfiprintf_r+0x124>
 800cfda:	002e      	movs	r6, r5
 800cfdc:	2100      	movs	r1, #0
 800cfde:	200a      	movs	r0, #10
 800cfe0:	68e3      	ldr	r3, [r4, #12]
 800cfe2:	7832      	ldrb	r2, [r6, #0]
 800cfe4:	1c75      	adds	r5, r6, #1
 800cfe6:	3a30      	subs	r2, #48	@ 0x30
 800cfe8:	2a09      	cmp	r2, #9
 800cfea:	d950      	bls.n	800d08e <_vfiprintf_r+0x1aa>
 800cfec:	2900      	cmp	r1, #0
 800cfee:	d111      	bne.n	800d014 <_vfiprintf_r+0x130>
 800cff0:	e017      	b.n	800d022 <_vfiprintf_r+0x13e>
 800cff2:	3601      	adds	r6, #1
 800cff4:	e7af      	b.n	800cf56 <_vfiprintf_r+0x72>
 800cff6:	9b05      	ldr	r3, [sp, #20]
 800cff8:	6822      	ldr	r2, [r4, #0]
 800cffa:	1ac0      	subs	r0, r0, r3
 800cffc:	2301      	movs	r3, #1
 800cffe:	4083      	lsls	r3, r0
 800d000:	4313      	orrs	r3, r2
 800d002:	0035      	movs	r5, r6
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	e7cc      	b.n	800cfa2 <_vfiprintf_r+0xbe>
 800d008:	9b07      	ldr	r3, [sp, #28]
 800d00a:	1d19      	adds	r1, r3, #4
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	9107      	str	r1, [sp, #28]
 800d010:	2b00      	cmp	r3, #0
 800d012:	db01      	blt.n	800d018 <_vfiprintf_r+0x134>
 800d014:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d016:	e004      	b.n	800d022 <_vfiprintf_r+0x13e>
 800d018:	425b      	negs	r3, r3
 800d01a:	60e3      	str	r3, [r4, #12]
 800d01c:	2302      	movs	r3, #2
 800d01e:	4313      	orrs	r3, r2
 800d020:	6023      	str	r3, [r4, #0]
 800d022:	7833      	ldrb	r3, [r6, #0]
 800d024:	2b2e      	cmp	r3, #46	@ 0x2e
 800d026:	d10c      	bne.n	800d042 <_vfiprintf_r+0x15e>
 800d028:	7873      	ldrb	r3, [r6, #1]
 800d02a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d02c:	d134      	bne.n	800d098 <_vfiprintf_r+0x1b4>
 800d02e:	9b07      	ldr	r3, [sp, #28]
 800d030:	3602      	adds	r6, #2
 800d032:	1d1a      	adds	r2, r3, #4
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	9207      	str	r2, [sp, #28]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	da01      	bge.n	800d040 <_vfiprintf_r+0x15c>
 800d03c:	2301      	movs	r3, #1
 800d03e:	425b      	negs	r3, r3
 800d040:	9309      	str	r3, [sp, #36]	@ 0x24
 800d042:	4d32      	ldr	r5, [pc, #200]	@ (800d10c <_vfiprintf_r+0x228>)
 800d044:	2203      	movs	r2, #3
 800d046:	0028      	movs	r0, r5
 800d048:	7831      	ldrb	r1, [r6, #0]
 800d04a:	f7ff feb5 	bl	800cdb8 <memchr>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d006      	beq.n	800d060 <_vfiprintf_r+0x17c>
 800d052:	2340      	movs	r3, #64	@ 0x40
 800d054:	1b40      	subs	r0, r0, r5
 800d056:	4083      	lsls	r3, r0
 800d058:	6822      	ldr	r2, [r4, #0]
 800d05a:	3601      	adds	r6, #1
 800d05c:	4313      	orrs	r3, r2
 800d05e:	6023      	str	r3, [r4, #0]
 800d060:	7831      	ldrb	r1, [r6, #0]
 800d062:	2206      	movs	r2, #6
 800d064:	482a      	ldr	r0, [pc, #168]	@ (800d110 <_vfiprintf_r+0x22c>)
 800d066:	1c75      	adds	r5, r6, #1
 800d068:	7621      	strb	r1, [r4, #24]
 800d06a:	f7ff fea5 	bl	800cdb8 <memchr>
 800d06e:	2800      	cmp	r0, #0
 800d070:	d040      	beq.n	800d0f4 <_vfiprintf_r+0x210>
 800d072:	4b28      	ldr	r3, [pc, #160]	@ (800d114 <_vfiprintf_r+0x230>)
 800d074:	2b00      	cmp	r3, #0
 800d076:	d122      	bne.n	800d0be <_vfiprintf_r+0x1da>
 800d078:	2207      	movs	r2, #7
 800d07a:	9b07      	ldr	r3, [sp, #28]
 800d07c:	3307      	adds	r3, #7
 800d07e:	4393      	bics	r3, r2
 800d080:	3308      	adds	r3, #8
 800d082:	9307      	str	r3, [sp, #28]
 800d084:	6963      	ldr	r3, [r4, #20]
 800d086:	9a04      	ldr	r2, [sp, #16]
 800d088:	189b      	adds	r3, r3, r2
 800d08a:	6163      	str	r3, [r4, #20]
 800d08c:	e762      	b.n	800cf54 <_vfiprintf_r+0x70>
 800d08e:	4343      	muls	r3, r0
 800d090:	002e      	movs	r6, r5
 800d092:	2101      	movs	r1, #1
 800d094:	189b      	adds	r3, r3, r2
 800d096:	e7a4      	b.n	800cfe2 <_vfiprintf_r+0xfe>
 800d098:	2300      	movs	r3, #0
 800d09a:	200a      	movs	r0, #10
 800d09c:	0019      	movs	r1, r3
 800d09e:	3601      	adds	r6, #1
 800d0a0:	6063      	str	r3, [r4, #4]
 800d0a2:	7832      	ldrb	r2, [r6, #0]
 800d0a4:	1c75      	adds	r5, r6, #1
 800d0a6:	3a30      	subs	r2, #48	@ 0x30
 800d0a8:	2a09      	cmp	r2, #9
 800d0aa:	d903      	bls.n	800d0b4 <_vfiprintf_r+0x1d0>
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d0c8      	beq.n	800d042 <_vfiprintf_r+0x15e>
 800d0b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0b2:	e7c6      	b.n	800d042 <_vfiprintf_r+0x15e>
 800d0b4:	4341      	muls	r1, r0
 800d0b6:	002e      	movs	r6, r5
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	1889      	adds	r1, r1, r2
 800d0bc:	e7f1      	b.n	800d0a2 <_vfiprintf_r+0x1be>
 800d0be:	aa07      	add	r2, sp, #28
 800d0c0:	9200      	str	r2, [sp, #0]
 800d0c2:	0021      	movs	r1, r4
 800d0c4:	003a      	movs	r2, r7
 800d0c6:	4b14      	ldr	r3, [pc, #80]	@ (800d118 <_vfiprintf_r+0x234>)
 800d0c8:	9803      	ldr	r0, [sp, #12]
 800d0ca:	e000      	b.n	800d0ce <_vfiprintf_r+0x1ea>
 800d0cc:	bf00      	nop
 800d0ce:	9004      	str	r0, [sp, #16]
 800d0d0:	9b04      	ldr	r3, [sp, #16]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	d1d6      	bne.n	800d084 <_vfiprintf_r+0x1a0>
 800d0d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0d8:	07db      	lsls	r3, r3, #31
 800d0da:	d405      	bmi.n	800d0e8 <_vfiprintf_r+0x204>
 800d0dc:	89bb      	ldrh	r3, [r7, #12]
 800d0de:	059b      	lsls	r3, r3, #22
 800d0e0:	d402      	bmi.n	800d0e8 <_vfiprintf_r+0x204>
 800d0e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d0e4:	f7fe f92c 	bl	800b340 <__retarget_lock_release_recursive>
 800d0e8:	89bb      	ldrh	r3, [r7, #12]
 800d0ea:	065b      	lsls	r3, r3, #25
 800d0ec:	d500      	bpl.n	800d0f0 <_vfiprintf_r+0x20c>
 800d0ee:	e71e      	b.n	800cf2e <_vfiprintf_r+0x4a>
 800d0f0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d0f2:	e71e      	b.n	800cf32 <_vfiprintf_r+0x4e>
 800d0f4:	aa07      	add	r2, sp, #28
 800d0f6:	9200      	str	r2, [sp, #0]
 800d0f8:	0021      	movs	r1, r4
 800d0fa:	003a      	movs	r2, r7
 800d0fc:	4b06      	ldr	r3, [pc, #24]	@ (800d118 <_vfiprintf_r+0x234>)
 800d0fe:	9803      	ldr	r0, [sp, #12]
 800d100:	f7ff fc64 	bl	800c9cc <_printf_i>
 800d104:	e7e3      	b.n	800d0ce <_vfiprintf_r+0x1ea>
 800d106:	46c0      	nop			@ (mov r8, r8)
 800d108:	0800db08 	.word	0x0800db08
 800d10c:	0800db0e 	.word	0x0800db0e
 800d110:	0800db12 	.word	0x0800db12
 800d114:	00000000 	.word	0x00000000
 800d118:	0800cebf 	.word	0x0800cebf

0800d11c <__swbuf_r>:
 800d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11e:	0006      	movs	r6, r0
 800d120:	000d      	movs	r5, r1
 800d122:	0014      	movs	r4, r2
 800d124:	2800      	cmp	r0, #0
 800d126:	d004      	beq.n	800d132 <__swbuf_r+0x16>
 800d128:	6a03      	ldr	r3, [r0, #32]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d101      	bne.n	800d132 <__swbuf_r+0x16>
 800d12e:	f7fd ff29 	bl	800af84 <__sinit>
 800d132:	69a3      	ldr	r3, [r4, #24]
 800d134:	60a3      	str	r3, [r4, #8]
 800d136:	89a3      	ldrh	r3, [r4, #12]
 800d138:	071b      	lsls	r3, r3, #28
 800d13a:	d502      	bpl.n	800d142 <__swbuf_r+0x26>
 800d13c:	6923      	ldr	r3, [r4, #16]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d109      	bne.n	800d156 <__swbuf_r+0x3a>
 800d142:	0021      	movs	r1, r4
 800d144:	0030      	movs	r0, r6
 800d146:	f000 f82b 	bl	800d1a0 <__swsetup_r>
 800d14a:	2800      	cmp	r0, #0
 800d14c:	d003      	beq.n	800d156 <__swbuf_r+0x3a>
 800d14e:	2501      	movs	r5, #1
 800d150:	426d      	negs	r5, r5
 800d152:	0028      	movs	r0, r5
 800d154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d156:	6923      	ldr	r3, [r4, #16]
 800d158:	6820      	ldr	r0, [r4, #0]
 800d15a:	b2ef      	uxtb	r7, r5
 800d15c:	1ac0      	subs	r0, r0, r3
 800d15e:	6963      	ldr	r3, [r4, #20]
 800d160:	b2ed      	uxtb	r5, r5
 800d162:	4283      	cmp	r3, r0
 800d164:	dc05      	bgt.n	800d172 <__swbuf_r+0x56>
 800d166:	0021      	movs	r1, r4
 800d168:	0030      	movs	r0, r6
 800d16a:	f7ff fdc3 	bl	800ccf4 <_fflush_r>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d1ed      	bne.n	800d14e <__swbuf_r+0x32>
 800d172:	68a3      	ldr	r3, [r4, #8]
 800d174:	3001      	adds	r0, #1
 800d176:	3b01      	subs	r3, #1
 800d178:	60a3      	str	r3, [r4, #8]
 800d17a:	6823      	ldr	r3, [r4, #0]
 800d17c:	1c5a      	adds	r2, r3, #1
 800d17e:	6022      	str	r2, [r4, #0]
 800d180:	701f      	strb	r7, [r3, #0]
 800d182:	6963      	ldr	r3, [r4, #20]
 800d184:	4283      	cmp	r3, r0
 800d186:	d004      	beq.n	800d192 <__swbuf_r+0x76>
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	07db      	lsls	r3, r3, #31
 800d18c:	d5e1      	bpl.n	800d152 <__swbuf_r+0x36>
 800d18e:	2d0a      	cmp	r5, #10
 800d190:	d1df      	bne.n	800d152 <__swbuf_r+0x36>
 800d192:	0021      	movs	r1, r4
 800d194:	0030      	movs	r0, r6
 800d196:	f7ff fdad 	bl	800ccf4 <_fflush_r>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d0d9      	beq.n	800d152 <__swbuf_r+0x36>
 800d19e:	e7d6      	b.n	800d14e <__swbuf_r+0x32>

0800d1a0 <__swsetup_r>:
 800d1a0:	4b2d      	ldr	r3, [pc, #180]	@ (800d258 <__swsetup_r+0xb8>)
 800d1a2:	b570      	push	{r4, r5, r6, lr}
 800d1a4:	0005      	movs	r5, r0
 800d1a6:	6818      	ldr	r0, [r3, #0]
 800d1a8:	000c      	movs	r4, r1
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d004      	beq.n	800d1b8 <__swsetup_r+0x18>
 800d1ae:	6a03      	ldr	r3, [r0, #32]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d101      	bne.n	800d1b8 <__swsetup_r+0x18>
 800d1b4:	f7fd fee6 	bl	800af84 <__sinit>
 800d1b8:	230c      	movs	r3, #12
 800d1ba:	5ee2      	ldrsh	r2, [r4, r3]
 800d1bc:	0713      	lsls	r3, r2, #28
 800d1be:	d423      	bmi.n	800d208 <__swsetup_r+0x68>
 800d1c0:	06d3      	lsls	r3, r2, #27
 800d1c2:	d407      	bmi.n	800d1d4 <__swsetup_r+0x34>
 800d1c4:	2309      	movs	r3, #9
 800d1c6:	602b      	str	r3, [r5, #0]
 800d1c8:	2340      	movs	r3, #64	@ 0x40
 800d1ca:	2001      	movs	r0, #1
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	81a3      	strh	r3, [r4, #12]
 800d1d0:	4240      	negs	r0, r0
 800d1d2:	e03a      	b.n	800d24a <__swsetup_r+0xaa>
 800d1d4:	0752      	lsls	r2, r2, #29
 800d1d6:	d513      	bpl.n	800d200 <__swsetup_r+0x60>
 800d1d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1da:	2900      	cmp	r1, #0
 800d1dc:	d008      	beq.n	800d1f0 <__swsetup_r+0x50>
 800d1de:	0023      	movs	r3, r4
 800d1e0:	3344      	adds	r3, #68	@ 0x44
 800d1e2:	4299      	cmp	r1, r3
 800d1e4:	d002      	beq.n	800d1ec <__swsetup_r+0x4c>
 800d1e6:	0028      	movs	r0, r5
 800d1e8:	f7fe f8d8 	bl	800b39c <_free_r>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1f0:	2224      	movs	r2, #36	@ 0x24
 800d1f2:	89a3      	ldrh	r3, [r4, #12]
 800d1f4:	4393      	bics	r3, r2
 800d1f6:	81a3      	strh	r3, [r4, #12]
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	6063      	str	r3, [r4, #4]
 800d1fc:	6923      	ldr	r3, [r4, #16]
 800d1fe:	6023      	str	r3, [r4, #0]
 800d200:	2308      	movs	r3, #8
 800d202:	89a2      	ldrh	r2, [r4, #12]
 800d204:	4313      	orrs	r3, r2
 800d206:	81a3      	strh	r3, [r4, #12]
 800d208:	6923      	ldr	r3, [r4, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10b      	bne.n	800d226 <__swsetup_r+0x86>
 800d20e:	21a0      	movs	r1, #160	@ 0xa0
 800d210:	2280      	movs	r2, #128	@ 0x80
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	0089      	lsls	r1, r1, #2
 800d216:	0092      	lsls	r2, r2, #2
 800d218:	400b      	ands	r3, r1
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d003      	beq.n	800d226 <__swsetup_r+0x86>
 800d21e:	0021      	movs	r1, r4
 800d220:	0028      	movs	r0, r5
 800d222:	f000 f897 	bl	800d354 <__smakebuf_r>
 800d226:	230c      	movs	r3, #12
 800d228:	5ee2      	ldrsh	r2, [r4, r3]
 800d22a:	2101      	movs	r1, #1
 800d22c:	0013      	movs	r3, r2
 800d22e:	400b      	ands	r3, r1
 800d230:	420a      	tst	r2, r1
 800d232:	d00b      	beq.n	800d24c <__swsetup_r+0xac>
 800d234:	2300      	movs	r3, #0
 800d236:	60a3      	str	r3, [r4, #8]
 800d238:	6963      	ldr	r3, [r4, #20]
 800d23a:	425b      	negs	r3, r3
 800d23c:	61a3      	str	r3, [r4, #24]
 800d23e:	2000      	movs	r0, #0
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	4283      	cmp	r3, r0
 800d244:	d101      	bne.n	800d24a <__swsetup_r+0xaa>
 800d246:	0613      	lsls	r3, r2, #24
 800d248:	d4be      	bmi.n	800d1c8 <__swsetup_r+0x28>
 800d24a:	bd70      	pop	{r4, r5, r6, pc}
 800d24c:	0791      	lsls	r1, r2, #30
 800d24e:	d400      	bmi.n	800d252 <__swsetup_r+0xb2>
 800d250:	6963      	ldr	r3, [r4, #20]
 800d252:	60a3      	str	r3, [r4, #8]
 800d254:	e7f3      	b.n	800d23e <__swsetup_r+0x9e>
 800d256:	46c0      	nop			@ (mov r8, r8)
 800d258:	200001cc 	.word	0x200001cc

0800d25c <_raise_r>:
 800d25c:	b570      	push	{r4, r5, r6, lr}
 800d25e:	0004      	movs	r4, r0
 800d260:	000d      	movs	r5, r1
 800d262:	291f      	cmp	r1, #31
 800d264:	d904      	bls.n	800d270 <_raise_r+0x14>
 800d266:	2316      	movs	r3, #22
 800d268:	6003      	str	r3, [r0, #0]
 800d26a:	2001      	movs	r0, #1
 800d26c:	4240      	negs	r0, r0
 800d26e:	bd70      	pop	{r4, r5, r6, pc}
 800d270:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d272:	2b00      	cmp	r3, #0
 800d274:	d004      	beq.n	800d280 <_raise_r+0x24>
 800d276:	008a      	lsls	r2, r1, #2
 800d278:	189b      	adds	r3, r3, r2
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	2a00      	cmp	r2, #0
 800d27e:	d108      	bne.n	800d292 <_raise_r+0x36>
 800d280:	0020      	movs	r0, r4
 800d282:	f000 f831 	bl	800d2e8 <_getpid_r>
 800d286:	002a      	movs	r2, r5
 800d288:	0001      	movs	r1, r0
 800d28a:	0020      	movs	r0, r4
 800d28c:	f000 f81a 	bl	800d2c4 <_kill_r>
 800d290:	e7ed      	b.n	800d26e <_raise_r+0x12>
 800d292:	2a01      	cmp	r2, #1
 800d294:	d009      	beq.n	800d2aa <_raise_r+0x4e>
 800d296:	1c51      	adds	r1, r2, #1
 800d298:	d103      	bne.n	800d2a2 <_raise_r+0x46>
 800d29a:	2316      	movs	r3, #22
 800d29c:	6003      	str	r3, [r0, #0]
 800d29e:	2001      	movs	r0, #1
 800d2a0:	e7e5      	b.n	800d26e <_raise_r+0x12>
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	0028      	movs	r0, r5
 800d2a6:	6019      	str	r1, [r3, #0]
 800d2a8:	4790      	blx	r2
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	e7df      	b.n	800d26e <_raise_r+0x12>
	...

0800d2b0 <raise>:
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	4b03      	ldr	r3, [pc, #12]	@ (800d2c0 <raise+0x10>)
 800d2b4:	0001      	movs	r1, r0
 800d2b6:	6818      	ldr	r0, [r3, #0]
 800d2b8:	f7ff ffd0 	bl	800d25c <_raise_r>
 800d2bc:	bd10      	pop	{r4, pc}
 800d2be:	46c0      	nop			@ (mov r8, r8)
 800d2c0:	200001cc 	.word	0x200001cc

0800d2c4 <_kill_r>:
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	b570      	push	{r4, r5, r6, lr}
 800d2c8:	4d06      	ldr	r5, [pc, #24]	@ (800d2e4 <_kill_r+0x20>)
 800d2ca:	0004      	movs	r4, r0
 800d2cc:	0008      	movs	r0, r1
 800d2ce:	0011      	movs	r1, r2
 800d2d0:	602b      	str	r3, [r5, #0]
 800d2d2:	f7f7 fc47 	bl	8004b64 <_kill>
 800d2d6:	1c43      	adds	r3, r0, #1
 800d2d8:	d103      	bne.n	800d2e2 <_kill_r+0x1e>
 800d2da:	682b      	ldr	r3, [r5, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d000      	beq.n	800d2e2 <_kill_r+0x1e>
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	bd70      	pop	{r4, r5, r6, pc}
 800d2e4:	200007c8 	.word	0x200007c8

0800d2e8 <_getpid_r>:
 800d2e8:	b510      	push	{r4, lr}
 800d2ea:	f7f7 fc35 	bl	8004b58 <_getpid>
 800d2ee:	bd10      	pop	{r4, pc}

0800d2f0 <_malloc_usable_size_r>:
 800d2f0:	1f0b      	subs	r3, r1, #4
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	1f18      	subs	r0, r3, #4
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	da01      	bge.n	800d2fe <_malloc_usable_size_r+0xe>
 800d2fa:	580b      	ldr	r3, [r1, r0]
 800d2fc:	18c0      	adds	r0, r0, r3
 800d2fe:	4770      	bx	lr

0800d300 <__swhatbuf_r>:
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	000e      	movs	r6, r1
 800d304:	001d      	movs	r5, r3
 800d306:	230e      	movs	r3, #14
 800d308:	5ec9      	ldrsh	r1, [r1, r3]
 800d30a:	0014      	movs	r4, r2
 800d30c:	b096      	sub	sp, #88	@ 0x58
 800d30e:	2900      	cmp	r1, #0
 800d310:	da0c      	bge.n	800d32c <__swhatbuf_r+0x2c>
 800d312:	89b2      	ldrh	r2, [r6, #12]
 800d314:	2380      	movs	r3, #128	@ 0x80
 800d316:	0011      	movs	r1, r2
 800d318:	4019      	ands	r1, r3
 800d31a:	421a      	tst	r2, r3
 800d31c:	d114      	bne.n	800d348 <__swhatbuf_r+0x48>
 800d31e:	2380      	movs	r3, #128	@ 0x80
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	2000      	movs	r0, #0
 800d324:	6029      	str	r1, [r5, #0]
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	b016      	add	sp, #88	@ 0x58
 800d32a:	bd70      	pop	{r4, r5, r6, pc}
 800d32c:	466a      	mov	r2, sp
 800d32e:	f000 f853 	bl	800d3d8 <_fstat_r>
 800d332:	2800      	cmp	r0, #0
 800d334:	dbed      	blt.n	800d312 <__swhatbuf_r+0x12>
 800d336:	23f0      	movs	r3, #240	@ 0xf0
 800d338:	9901      	ldr	r1, [sp, #4]
 800d33a:	021b      	lsls	r3, r3, #8
 800d33c:	4019      	ands	r1, r3
 800d33e:	4b04      	ldr	r3, [pc, #16]	@ (800d350 <__swhatbuf_r+0x50>)
 800d340:	18c9      	adds	r1, r1, r3
 800d342:	424b      	negs	r3, r1
 800d344:	4159      	adcs	r1, r3
 800d346:	e7ea      	b.n	800d31e <__swhatbuf_r+0x1e>
 800d348:	2100      	movs	r1, #0
 800d34a:	2340      	movs	r3, #64	@ 0x40
 800d34c:	e7e9      	b.n	800d322 <__swhatbuf_r+0x22>
 800d34e:	46c0      	nop			@ (mov r8, r8)
 800d350:	ffffe000 	.word	0xffffe000

0800d354 <__smakebuf_r>:
 800d354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d356:	2602      	movs	r6, #2
 800d358:	898b      	ldrh	r3, [r1, #12]
 800d35a:	0005      	movs	r5, r0
 800d35c:	000c      	movs	r4, r1
 800d35e:	b085      	sub	sp, #20
 800d360:	4233      	tst	r3, r6
 800d362:	d007      	beq.n	800d374 <__smakebuf_r+0x20>
 800d364:	0023      	movs	r3, r4
 800d366:	3347      	adds	r3, #71	@ 0x47
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	6123      	str	r3, [r4, #16]
 800d36c:	2301      	movs	r3, #1
 800d36e:	6163      	str	r3, [r4, #20]
 800d370:	b005      	add	sp, #20
 800d372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d374:	ab03      	add	r3, sp, #12
 800d376:	aa02      	add	r2, sp, #8
 800d378:	f7ff ffc2 	bl	800d300 <__swhatbuf_r>
 800d37c:	9f02      	ldr	r7, [sp, #8]
 800d37e:	9001      	str	r0, [sp, #4]
 800d380:	0039      	movs	r1, r7
 800d382:	0028      	movs	r0, r5
 800d384:	f7fe fbda 	bl	800bb3c <_malloc_r>
 800d388:	2800      	cmp	r0, #0
 800d38a:	d108      	bne.n	800d39e <__smakebuf_r+0x4a>
 800d38c:	220c      	movs	r2, #12
 800d38e:	5ea3      	ldrsh	r3, [r4, r2]
 800d390:	059a      	lsls	r2, r3, #22
 800d392:	d4ed      	bmi.n	800d370 <__smakebuf_r+0x1c>
 800d394:	2203      	movs	r2, #3
 800d396:	4393      	bics	r3, r2
 800d398:	431e      	orrs	r6, r3
 800d39a:	81a6      	strh	r6, [r4, #12]
 800d39c:	e7e2      	b.n	800d364 <__smakebuf_r+0x10>
 800d39e:	2380      	movs	r3, #128	@ 0x80
 800d3a0:	89a2      	ldrh	r2, [r4, #12]
 800d3a2:	6020      	str	r0, [r4, #0]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	81a3      	strh	r3, [r4, #12]
 800d3a8:	9b03      	ldr	r3, [sp, #12]
 800d3aa:	6120      	str	r0, [r4, #16]
 800d3ac:	6167      	str	r7, [r4, #20]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00c      	beq.n	800d3cc <__smakebuf_r+0x78>
 800d3b2:	0028      	movs	r0, r5
 800d3b4:	230e      	movs	r3, #14
 800d3b6:	5ee1      	ldrsh	r1, [r4, r3]
 800d3b8:	f000 f820 	bl	800d3fc <_isatty_r>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	d005      	beq.n	800d3cc <__smakebuf_r+0x78>
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	89a2      	ldrh	r2, [r4, #12]
 800d3c4:	439a      	bics	r2, r3
 800d3c6:	3b02      	subs	r3, #2
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	81a3      	strh	r3, [r4, #12]
 800d3cc:	89a3      	ldrh	r3, [r4, #12]
 800d3ce:	9a01      	ldr	r2, [sp, #4]
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	81a3      	strh	r3, [r4, #12]
 800d3d4:	e7cc      	b.n	800d370 <__smakebuf_r+0x1c>
	...

0800d3d8 <_fstat_r>:
 800d3d8:	2300      	movs	r3, #0
 800d3da:	b570      	push	{r4, r5, r6, lr}
 800d3dc:	4d06      	ldr	r5, [pc, #24]	@ (800d3f8 <_fstat_r+0x20>)
 800d3de:	0004      	movs	r4, r0
 800d3e0:	0008      	movs	r0, r1
 800d3e2:	0011      	movs	r1, r2
 800d3e4:	602b      	str	r3, [r5, #0]
 800d3e6:	f7f7 fc1d 	bl	8004c24 <_fstat>
 800d3ea:	1c43      	adds	r3, r0, #1
 800d3ec:	d103      	bne.n	800d3f6 <_fstat_r+0x1e>
 800d3ee:	682b      	ldr	r3, [r5, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d000      	beq.n	800d3f6 <_fstat_r+0x1e>
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
 800d3f8:	200007c8 	.word	0x200007c8

0800d3fc <_isatty_r>:
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	b570      	push	{r4, r5, r6, lr}
 800d400:	4d06      	ldr	r5, [pc, #24]	@ (800d41c <_isatty_r+0x20>)
 800d402:	0004      	movs	r4, r0
 800d404:	0008      	movs	r0, r1
 800d406:	602b      	str	r3, [r5, #0]
 800d408:	f7f7 fc1a 	bl	8004c40 <_isatty>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d103      	bne.n	800d418 <_isatty_r+0x1c>
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d000      	beq.n	800d418 <_isatty_r+0x1c>
 800d416:	6023      	str	r3, [r4, #0]
 800d418:	bd70      	pop	{r4, r5, r6, pc}
 800d41a:	46c0      	nop			@ (mov r8, r8)
 800d41c:	200007c8 	.word	0x200007c8

0800d420 <_init>:
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d422:	46c0      	nop			@ (mov r8, r8)
 800d424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d426:	bc08      	pop	{r3}
 800d428:	469e      	mov	lr, r3
 800d42a:	4770      	bx	lr

0800d42c <_fini>:
 800d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42e:	46c0      	nop			@ (mov r8, r8)
 800d430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d432:	bc08      	pop	{r3}
 800d434:	469e      	mov	lr, r3
 800d436:	4770      	bx	lr
